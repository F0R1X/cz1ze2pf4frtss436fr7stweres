// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {

namespace {

const ::google::protobuf::Descriptor* tagHandCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHandCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagWeaveCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagWeaveCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagThirdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagThirdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagSecondInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagSecondInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagChiCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagChiCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagDissolveRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagDissolveRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGain_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckTableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckTableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckStartBetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckStartBetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBettingErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBettingErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBettingSucc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBettingSucc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckStartPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckStartPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPiaoErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPiaoErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPiaoSucc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPiaoSucc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOperateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOperateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPreOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPreOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPreOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPreOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOperateCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOperateCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOperateCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOperateCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOperateRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOperateRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDispatchCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDispatchCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckXiangGong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckXiangGong_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChangeCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChangeCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChangeCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChangeCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateAbandon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateAbandon_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagFanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagFanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameStartFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameStartFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDissolveErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDissolveErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDissolveSucc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDissolveSucc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDissolveAct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDissolveAct_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDissolveActSucc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDissolveActSucc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDissolveResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDissolveResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOffline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOffline_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFinalEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFinalEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHandDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHandDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLastEndInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLastEndInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChouNotity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChouNotity_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableInfoVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableInfoVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStartVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStartVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGains_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGains_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFace_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChouCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameproto_2eproto() {
  protobuf_AddDesc_gameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameproto.proto");
  GOOGLE_CHECK(file != NULL);
  tagHandCards_descriptor_ = file->message_type(0);
  static const int tagHandCards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHandCards, card_),
  };
  tagHandCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHandCards_descriptor_,
      tagHandCards::default_instance_,
      tagHandCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHandCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHandCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHandCards));
  tagWeaveCards_descriptor_ = file->message_type(1);
  static const int tagWeaveCards_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagWeaveCards, weave_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagWeaveCards, card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagWeaveCards, center_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagWeaveCards, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagWeaveCards, hu_xi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagWeaveCards, out_card_),
  };
  tagWeaveCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagWeaveCards_descriptor_,
      tagWeaveCards::default_instance_,
      tagWeaveCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagWeaveCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagWeaveCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagWeaveCards));
  tagThirdInfo_descriptor_ = file->message_type(2);
  static const int tagThirdInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagThirdInfo, chi_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagThirdInfo, center_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagThirdInfo, cards_),
  };
  tagThirdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagThirdInfo_descriptor_,
      tagThirdInfo::default_instance_,
      tagThirdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagThirdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagThirdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagThirdInfo));
  tagSecondInfo_descriptor_ = file->message_type(3);
  static const int tagSecondInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSecondInfo, chi_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSecondInfo, center_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSecondInfo, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSecondInfo, third_info_),
  };
  tagSecondInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagSecondInfo_descriptor_,
      tagSecondInfo::default_instance_,
      tagSecondInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSecondInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSecondInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagSecondInfo));
  tagChiCardInfo_descriptor_ = file->message_type(4);
  static const int tagChiCardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagChiCardInfo, chi_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagChiCardInfo, center_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagChiCardInfo, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagChiCardInfo, second_info_),
  };
  tagChiCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagChiCardInfo_descriptor_,
      tagChiCardInfo::default_instance_,
      tagChiCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagChiCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagChiCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagChiCardInfo));
  tagPlayers_descriptor_ = file->message_type(5);
  static const int tagPlayers_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, hu_xi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, weaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, abandon_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, abandon_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, niao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, piao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, xiang_gong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, offline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, total_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, hong_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, hei_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, hand_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, hu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, best_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, dian_pao_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, best_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, listen_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, gains_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, total_gains_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, all_piao_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, zimo_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, dissolve_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, dissovle_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, skey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, card_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, cards_weave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, best_weave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, peng_chou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, chi_chou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, chou_wei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, chicard_info_),
  };
  tagPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPlayers_descriptor_,
      tagPlayers::default_instance_,
      tagPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPlayers));
  tagDissolveRoomInfo_descriptor_ = file->message_type(6);
  static const int tagDissolveRoomInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDissolveRoomInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDissolveRoomInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDissolveRoomInfo, voters_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDissolveRoomInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDissolveRoomInfo, remain_time_),
  };
  tagDissolveRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagDissolveRoomInfo_descriptor_,
      tagDissolveRoomInfo::default_instance_,
      tagDissolveRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDissolveRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagDissolveRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagDissolveRoomInfo));
  tagGain_descriptor_ = file->message_type(7);
  static const int tagGain_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGain, score_),
  };
  tagGain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGain_descriptor_,
      tagGain::default_instance_,
      tagGain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGain));
  AckTableInfo_descriptor_ = file->message_type(8);
  static const int AckTableInfo_offsets_[83] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, operate_timer_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, left_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, banker_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, current_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, current_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, current_outcard_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, current_outcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_dispatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, card_operated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_da_niao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_first_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, huang_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, take_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, base_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, room_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, niao_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, piao_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, user_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_first_operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, perform_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, listen_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, total_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, chicard_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, stand_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, base_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, dissolve_room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, offline_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, offline_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, game_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, dong_zhang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, tian_hu_3ti5kan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_tian_hu_3ti5kan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, huxi_to_tun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, current_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, innings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_ming_xiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, repertory_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, weave_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, show_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, hands_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, dispatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, dispatch_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, tiweipao_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, wei_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, ti_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_weiti_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, pao_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, first_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, after_weave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, user_responses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, user_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, user_prerform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, chi_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, second_chi_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, third_chi_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, xiang_gong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, common_best_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, room_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, dissolve_applyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, dissovle_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_dissolved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, banker_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_piao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, video_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, cur_timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, user_dong_zhang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_with_maohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_zimo_fan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_must_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, is_hhd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, gains_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, tp_15_zhang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, b_must_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, all_num_),
  };
  AckTableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckTableInfo_descriptor_,
      AckTableInfo::default_instance_,
      AckTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckTableInfo));
  ReqBetting_descriptor_ = file->message_type(9);
  static const int ReqBetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBetting, cout_),
  };
  ReqBetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBetting_descriptor_,
      ReqBetting::default_instance_,
      ReqBetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBetting));
  AckStartBetting_descriptor_ = file->message_type(10);
  static const int AckStartBetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartBetting, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartBetting, banker_),
  };
  AckStartBetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckStartBetting_descriptor_,
      AckStartBetting::default_instance_,
      AckStartBetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartBetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartBetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckStartBetting));
  AckBettingErr_descriptor_ = file->message_type(11);
  static const int AckBettingErr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingErr, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingErr, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingErr, code_),
  };
  AckBettingErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBettingErr_descriptor_,
      AckBettingErr::default_instance_,
      AckBettingErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBettingErr));
  AckBettingSucc_descriptor_ = file->message_type(12);
  static const int AckBettingSucc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingSucc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingSucc, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingSucc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingSucc, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingSucc, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingSucc, niao_),
  };
  AckBettingSucc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBettingSucc_descriptor_,
      AckBettingSucc::default_instance_,
      AckBettingSucc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingSucc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBettingSucc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBettingSucc));
  AckStartPiao_descriptor_ = file->message_type(13);
  static const int AckStartPiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, banker_),
  };
  AckStartPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckStartPiao_descriptor_,
      AckStartPiao::default_instance_,
      AckStartPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckStartPiao));
  ReqPiao_descriptor_ = file->message_type(14);
  static const int ReqPiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPiao, cout_),
  };
  ReqPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPiao_descriptor_,
      ReqPiao::default_instance_,
      ReqPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPiao));
  AckPiaoErr_descriptor_ = file->message_type(15);
  static const int AckPiaoErr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoErr, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoErr, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoErr, code_),
  };
  AckPiaoErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPiaoErr_descriptor_,
      AckPiaoErr::default_instance_,
      AckPiaoErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPiaoErr));
  AckPiaoSucc_descriptor_ = file->message_type(16);
  static const int AckPiaoSucc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoSucc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoSucc, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoSucc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoSucc, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoSucc, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoSucc, piao_),
  };
  AckPiaoSucc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPiaoSucc_descriptor_,
      AckPiaoSucc::default_instance_,
      AckPiaoSucc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoSucc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPiaoSucc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPiaoSucc));
  AckGameStart_descriptor_ = file->message_type(17);
  static const int AckGameStart_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, banker_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, left_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, total_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, listen_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, current_num_),
  };
  AckGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameStart_descriptor_,
      AckGameStart::default_instance_,
      AckGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameStart));
  AckOperateNotify_descriptor_ = file->message_type(18);
  static const int AckOperateNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateNotify, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateNotify, operate_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateNotify, chicard_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateNotify, off_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateNotify, is_must_hu_),
  };
  AckOperateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOperateNotify_descriptor_,
      AckOperateNotify::default_instance_,
      AckOperateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOperateNotify));
  ReqPreOperate_descriptor_ = file->message_type(19);
  static const int ReqPreOperate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPreOperate, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPreOperate, chi_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPreOperate, second_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPreOperate, third_kind_),
  };
  ReqPreOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPreOperate_descriptor_,
      ReqPreOperate::default_instance_,
      ReqPreOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPreOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPreOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPreOperate));
  AckPreOperate_descriptor_ = file->message_type(20);
  static const int AckPreOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPreOperate, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPreOperate, can_operate_),
  };
  AckPreOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPreOperate_descriptor_,
      AckPreOperate::default_instance_,
      AckPreOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPreOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPreOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPreOperate));
  ReqOperateCard_descriptor_ = file->message_type(21);
  static const int ReqOperateCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateCard, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateCard, chi_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateCard, second_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateCard, third_kind_),
  };
  ReqOperateCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOperateCard_descriptor_,
      ReqOperateCard::default_instance_,
      ReqOperateCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOperateCard));
  AckOperateCard_descriptor_ = file->message_type(22);
  static const int AckOperateCard_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, ack_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, action_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, remove_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, total_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, hu_xi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, listen_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, chi_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, chou_wei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, off_count_),
  };
  AckOperateCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOperateCard_descriptor_,
      AckOperateCard::default_instance_,
      AckOperateCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOperateCard));
  AckOperateRes_descriptor_ = file->message_type(23);
  static const int AckOperateRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateRes, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateRes, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateRes, err_no_),
  };
  AckOperateRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOperateRes_descriptor_,
      AckOperateRes::default_instance_,
      AckOperateRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOperateRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOperateRes));
  AckDispatchCard_descriptor_ = file->message_type(24);
  static const int AckDispatchCard_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, left_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, to_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, total_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, listen_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, off_count_),
  };
  AckDispatchCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDispatchCard_descriptor_,
      AckDispatchCard::default_instance_,
      AckDispatchCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDispatchCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDispatchCard));
  AckOutNotify_descriptor_ = file->message_type(25);
  static const int AckOutNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutNotify, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutNotify, is_out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutNotify, off_count_),
  };
  AckOutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOutNotify_descriptor_,
      AckOutNotify::default_instance_,
      AckOutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOutNotify));
  AckXiangGong_descriptor_ = file->message_type(26);
  static const int AckXiangGong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckXiangGong, seatid_),
  };
  AckXiangGong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckXiangGong_descriptor_,
      AckXiangGong::default_instance_,
      AckXiangGong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckXiangGong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckXiangGong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckXiangGong));
  ReqOutCard_descriptor_ = file->message_type(27);
  static const int ReqOutCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, col_),
  };
  ReqOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOutCard_descriptor_,
      ReqOutCard::default_instance_,
      ReqOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOutCard));
  AckOutCard_descriptor_ = file->message_type(28);
  static const int AckOutCard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutCard, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutCard, out_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutCard, total_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutCard, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutCard, listen_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutCard, off_count_),
  };
  AckOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOutCard_descriptor_,
      AckOutCard::default_instance_,
      AckOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOutCard));
  ReqChangeCard_descriptor_ = file->message_type(29);
  static const int ReqChangeCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, hand_cards_),
  };
  ReqChangeCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChangeCard_descriptor_,
      ReqChangeCard::default_instance_,
      ReqChangeCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChangeCard));
  AckChangeCard_descriptor_ = file->message_type(30);
  static const int AckChangeCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, total_huxi_),
  };
  AckChangeCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChangeCard_descriptor_,
      AckChangeCard::default_instance_,
      AckChangeCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChangeCard));
  AckUpdateCard_descriptor_ = file->message_type(31);
  static const int AckUpdateCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCard, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCard, total_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCard, listen_cards_),
  };
  AckUpdateCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateCard_descriptor_,
      AckUpdateCard::default_instance_,
      AckUpdateCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateCard));
  AckUpdateAbandon_descriptor_ = file->message_type(32);
  static const int AckUpdateAbandon_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAbandon, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAbandon, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAbandon, abandon_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAbandon, off_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAbandon, abandon_type_),
  };
  AckUpdateAbandon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateAbandon_descriptor_,
      AckUpdateAbandon::default_instance_,
      AckUpdateAbandon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAbandon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateAbandon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateAbandon));
  tagFanInfo_descriptor_ = file->message_type(33);
  static const int tagFanInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagFanInfo, fan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagFanInfo, fan_num_),
  };
  tagFanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagFanInfo_descriptor_,
      tagFanInfo::default_instance_,
      tagFanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagFanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagFanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagFanInfo));
  AckGameEnd_descriptor_ = file->message_type(34);
  static const int AckGameEnd_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, end_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, win_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, hu_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, left_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, total_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, hu_xis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, tuns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, fans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, fan_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, weaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, off_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, dian_pao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, dian_pao_user_),
  };
  AckGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameEnd_descriptor_,
      AckGameEnd::default_instance_,
      AckGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameEnd));
  AckGameStartFail_descriptor_ = file->message_type(35);
  static const int AckGameStartFail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, can_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, ts_),
  };
  AckGameStartFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameStartFail_descriptor_,
      AckGameStartFail::default_instance_,
      AckGameStartFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameStartFail));
  AckUserReady_descriptor_ = file->message_type(36);
  static const int AckUserReady_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, uid_),
  };
  AckUserReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserReady_descriptor_,
      AckUserReady::default_instance_,
      AckUserReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserReady));
  AckDissolveErr_descriptor_ = file->message_type(37);
  static const int AckDissolveErr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveErr, code_),
  };
  AckDissolveErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDissolveErr_descriptor_,
      AckDissolveErr::default_instance_,
      AckDissolveErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDissolveErr));
  AckDissolveSucc_descriptor_ = file->message_type(38);
  static const int AckDissolveSucc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveSucc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveSucc, voters_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveSucc, remain_time_),
  };
  AckDissolveSucc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDissolveSucc_descriptor_,
      AckDissolveSucc::default_instance_,
      AckDissolveSucc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveSucc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveSucc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDissolveSucc));
  ReqDissolveAct_descriptor_ = file->message_type(39);
  static const int ReqDissolveAct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDissolveAct, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDissolveAct, action_),
  };
  ReqDissolveAct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDissolveAct_descriptor_,
      ReqDissolveAct::default_instance_,
      ReqDissolveAct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDissolveAct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDissolveAct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDissolveAct));
  AckDissolveActSucc_descriptor_ = file->message_type(40);
  static const int AckDissolveActSucc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveActSucc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveActSucc, action_),
  };
  AckDissolveActSucc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDissolveActSucc_descriptor_,
      AckDissolveActSucc::default_instance_,
      AckDissolveActSucc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveActSucc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveActSucc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDissolveActSucc));
  AckDissolveResult_descriptor_ = file->message_type(41);
  static const int AckDissolveResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveResult, result_),
  };
  AckDissolveResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDissolveResult_descriptor_,
      AckDissolveResult::default_instance_,
      AckDissolveResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDissolveResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDissolveResult));
  AckOffline_descriptor_ = file->message_type(42);
  static const int AckOffline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOffline, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOffline, seatid_),
  };
  AckOffline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOffline_descriptor_,
      AckOffline::default_instance_,
      AckOffline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOffline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOffline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOffline));
  AckFinalEnd_descriptor_ = file->message_type(43);
  static const int AckFinalEnd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFinalEnd, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFinalEnd, room_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFinalEnd, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFinalEnd, players_),
  };
  AckFinalEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFinalEnd_descriptor_,
      AckFinalEnd::default_instance_,
      AckFinalEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFinalEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFinalEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFinalEnd));
  AckHandDetail_descriptor_ = file->message_type(44);
  static const int AckHandDetail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandDetail, players_),
  };
  AckHandDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHandDetail_descriptor_,
      AckHandDetail::default_instance_,
      AckHandDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHandDetail));
  AckLastEndInfo_descriptor_ = file->message_type(45);
  static const int AckLastEndInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLastEndInfo, info_),
  };
  AckLastEndInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLastEndInfo_descriptor_,
      AckLastEndInfo::default_instance_,
      AckLastEndInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLastEndInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLastEndInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLastEndInfo));
  AckChouNotity_descriptor_ = file->message_type(46);
  static const int AckChouNotity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChouNotity, type_),
  };
  AckChouNotity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChouNotity_descriptor_,
      AckChouNotity::default_instance_,
      AckChouNotity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChouNotity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChouNotity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChouNotity));
  TableInfoVideo_descriptor_ = file->message_type(47);
  static const int TableInfoVideo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, take_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, play_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, base_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, room_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, game_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, game_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, is_with_maohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, is_zimo_fan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, is_must_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, is_hhd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, huxi_to_tun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, all_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, current_num_),
  };
  TableInfoVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableInfoVideo_descriptor_,
      TableInfoVideo::default_instance_,
      TableInfoVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableInfoVideo));
  GameStartVideo_descriptor_ = file->message_type(48);
  static const int GameStartVideo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartVideo, banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartVideo, banker_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartVideo, left_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartVideo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartVideo, current_num_),
  };
  GameStartVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStartVideo_descriptor_,
      GameStartVideo::default_instance_,
      GameStartVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStartVideo));
  OperateVideo_descriptor_ = file->message_type(49);
  static const int OperateVideo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateVideo, ack_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateVideo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateVideo, action_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateVideo, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateVideo, total_huxi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateVideo, listen_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateVideo, weaves_),
  };
  OperateVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateVideo_descriptor_,
      OperateVideo::default_instance_,
      OperateVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateVideo));
  OperateNotify_descriptor_ = file->message_type(50);
  static const int OperateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateNotify, players_),
  };
  OperateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateNotify_descriptor_,
      OperateNotify::default_instance_,
      OperateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateNotify));
  AckGains_descriptor_ = file->message_type(51);
  static const int AckGains_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGains, players_),
  };
  AckGains_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGains_descriptor_,
      AckGains::default_instance_,
      AckGains_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGains, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGains, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGains));
  AckChat_descriptor_ = file->message_type(52);
  static const int AckChat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChat, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChat, text_),
  };
  AckChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChat_descriptor_,
      AckChat::default_instance_,
      AckChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChat));
  AckFace_descriptor_ = file->message_type(53);
  static const int AckFace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFace, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFace, faceid_),
  };
  AckFace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFace_descriptor_,
      AckFace::default_instance_,
      AckFace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFace));
  ChouCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHandCards_descriptor_, &tagHandCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagWeaveCards_descriptor_, &tagWeaveCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagThirdInfo_descriptor_, &tagThirdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagSecondInfo_descriptor_, &tagSecondInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagChiCardInfo_descriptor_, &tagChiCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPlayers_descriptor_, &tagPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagDissolveRoomInfo_descriptor_, &tagDissolveRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGain_descriptor_, &tagGain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckTableInfo_descriptor_, &AckTableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBetting_descriptor_, &ReqBetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckStartBetting_descriptor_, &AckStartBetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBettingErr_descriptor_, &AckBettingErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBettingSucc_descriptor_, &AckBettingSucc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckStartPiao_descriptor_, &AckStartPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPiao_descriptor_, &ReqPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPiaoErr_descriptor_, &AckPiaoErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPiaoSucc_descriptor_, &AckPiaoSucc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameStart_descriptor_, &AckGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOperateNotify_descriptor_, &AckOperateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPreOperate_descriptor_, &ReqPreOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPreOperate_descriptor_, &AckPreOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOperateCard_descriptor_, &ReqOperateCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOperateCard_descriptor_, &AckOperateCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOperateRes_descriptor_, &AckOperateRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDispatchCard_descriptor_, &AckDispatchCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOutNotify_descriptor_, &AckOutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckXiangGong_descriptor_, &AckXiangGong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOutCard_descriptor_, &ReqOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOutCard_descriptor_, &AckOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChangeCard_descriptor_, &ReqChangeCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChangeCard_descriptor_, &AckChangeCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateCard_descriptor_, &AckUpdateCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateAbandon_descriptor_, &AckUpdateAbandon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagFanInfo_descriptor_, &tagFanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameEnd_descriptor_, &AckGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameStartFail_descriptor_, &AckGameStartFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserReady_descriptor_, &AckUserReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDissolveErr_descriptor_, &AckDissolveErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDissolveSucc_descriptor_, &AckDissolveSucc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDissolveAct_descriptor_, &ReqDissolveAct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDissolveActSucc_descriptor_, &AckDissolveActSucc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDissolveResult_descriptor_, &AckDissolveResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOffline_descriptor_, &AckOffline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFinalEnd_descriptor_, &AckFinalEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHandDetail_descriptor_, &AckHandDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLastEndInfo_descriptor_, &AckLastEndInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChouNotity_descriptor_, &AckChouNotity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableInfoVideo_descriptor_, &TableInfoVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStartVideo_descriptor_, &GameStartVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateVideo_descriptor_, &OperateVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateNotify_descriptor_, &OperateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGains_descriptor_, &AckGains::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChat_descriptor_, &AckChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFace_descriptor_, &AckFace::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameproto_2eproto() {
  delete tagHandCards::default_instance_;
  delete tagHandCards_reflection_;
  delete tagWeaveCards::default_instance_;
  delete tagWeaveCards_reflection_;
  delete tagThirdInfo::default_instance_;
  delete tagThirdInfo_reflection_;
  delete tagSecondInfo::default_instance_;
  delete tagSecondInfo_reflection_;
  delete tagChiCardInfo::default_instance_;
  delete tagChiCardInfo_reflection_;
  delete tagPlayers::default_instance_;
  delete tagPlayers_reflection_;
  delete tagDissolveRoomInfo::default_instance_;
  delete tagDissolveRoomInfo_reflection_;
  delete tagGain::default_instance_;
  delete tagGain_reflection_;
  delete AckTableInfo::default_instance_;
  delete AckTableInfo_reflection_;
  delete ReqBetting::default_instance_;
  delete ReqBetting_reflection_;
  delete AckStartBetting::default_instance_;
  delete AckStartBetting_reflection_;
  delete AckBettingErr::default_instance_;
  delete AckBettingErr_reflection_;
  delete AckBettingSucc::default_instance_;
  delete AckBettingSucc_reflection_;
  delete AckStartPiao::default_instance_;
  delete AckStartPiao_reflection_;
  delete ReqPiao::default_instance_;
  delete ReqPiao_reflection_;
  delete AckPiaoErr::default_instance_;
  delete AckPiaoErr_reflection_;
  delete AckPiaoSucc::default_instance_;
  delete AckPiaoSucc_reflection_;
  delete AckGameStart::default_instance_;
  delete AckGameStart_reflection_;
  delete AckOperateNotify::default_instance_;
  delete AckOperateNotify_reflection_;
  delete ReqPreOperate::default_instance_;
  delete ReqPreOperate_reflection_;
  delete AckPreOperate::default_instance_;
  delete AckPreOperate_reflection_;
  delete ReqOperateCard::default_instance_;
  delete ReqOperateCard_reflection_;
  delete AckOperateCard::default_instance_;
  delete AckOperateCard_reflection_;
  delete AckOperateRes::default_instance_;
  delete AckOperateRes_reflection_;
  delete AckDispatchCard::default_instance_;
  delete AckDispatchCard_reflection_;
  delete AckOutNotify::default_instance_;
  delete AckOutNotify_reflection_;
  delete AckXiangGong::default_instance_;
  delete AckXiangGong_reflection_;
  delete ReqOutCard::default_instance_;
  delete ReqOutCard_reflection_;
  delete AckOutCard::default_instance_;
  delete AckOutCard_reflection_;
  delete ReqChangeCard::default_instance_;
  delete ReqChangeCard_reflection_;
  delete AckChangeCard::default_instance_;
  delete AckChangeCard_reflection_;
  delete AckUpdateCard::default_instance_;
  delete AckUpdateCard_reflection_;
  delete AckUpdateAbandon::default_instance_;
  delete AckUpdateAbandon_reflection_;
  delete tagFanInfo::default_instance_;
  delete tagFanInfo_reflection_;
  delete AckGameEnd::default_instance_;
  delete AckGameEnd_reflection_;
  delete AckGameStartFail::default_instance_;
  delete AckGameStartFail_reflection_;
  delete AckUserReady::default_instance_;
  delete AckUserReady_reflection_;
  delete AckDissolveErr::default_instance_;
  delete AckDissolveErr_reflection_;
  delete AckDissolveSucc::default_instance_;
  delete AckDissolveSucc_reflection_;
  delete ReqDissolveAct::default_instance_;
  delete ReqDissolveAct_reflection_;
  delete AckDissolveActSucc::default_instance_;
  delete AckDissolveActSucc_reflection_;
  delete AckDissolveResult::default_instance_;
  delete AckDissolveResult_reflection_;
  delete AckOffline::default_instance_;
  delete AckOffline_reflection_;
  delete AckFinalEnd::default_instance_;
  delete AckFinalEnd_reflection_;
  delete AckHandDetail::default_instance_;
  delete AckHandDetail_reflection_;
  delete AckLastEndInfo::default_instance_;
  delete AckLastEndInfo_reflection_;
  delete AckChouNotity::default_instance_;
  delete AckChouNotity_reflection_;
  delete TableInfoVideo::default_instance_;
  delete TableInfoVideo_reflection_;
  delete GameStartVideo::default_instance_;
  delete GameStartVideo_reflection_;
  delete OperateVideo::default_instance_;
  delete OperateVideo_reflection_;
  delete OperateNotify::default_instance_;
  delete OperateNotify_reflection_;
  delete AckGains::default_instance_;
  delete AckGains_reflection_;
  delete AckChat::default_instance_;
  delete AckChat_reflection_;
  delete AckFace::default_instance_;
  delete AckFace_reflection_;
}

void protobuf_AddDesc_gameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017gameproto.proto\022\nproto.game\"\034\n\014tagHand"
    "Cards\022\014\n\004card\030\001 \003(\005\"\200\001\n\rtagWeaveCards\022\022\n"
    "\nweave_kind\030\001 \001(\005\022\022\n\ncard_count\030\002 \001(\005\022\023\n"
    "\013center_card\030\003 \001(\005\022\021\n\tcard_list\030\004 \003(\005\022\r\n"
    "\005hu_xi\030\005 \001(\005\022\020\n\010out_card\030\006 \001(\005\"D\n\014tagThi"
    "rdInfo\022\020\n\010chi_kind\030\001 \001(\005\022\023\n\013center_card\030"
    "\002 \001(\005\022\r\n\005cards\030\003 \003(\005\"s\n\rtagSecondInfo\022\020\n"
    "\010chi_kind\030\001 \001(\005\022\023\n\013center_card\030\002 \001(\005\022\r\n\005"
    "cards\030\003 \003(\005\022,\n\nthird_info\030\004 \003(\0132\030.proto."
    "game.tagThirdInfo\"v\n\016tagChiCardInfo\022\020\n\010c"
    "hi_kind\030\001 \001(\005\022\023\n\013center_card\030\002 \001(\005\022\r\n\005ca"
    "rds\030\003 \003(\005\022.\n\013second_info\030\004 \003(\0132\031.proto.g"
    "ame.tagSecondInfo\"\254\007\n\ntagPlayers\022\013\n\003uid\030"
    "\001 \001(\005\022\016\n\006seatid\030\002 \001(\005\022\r\n\005ready\030\003 \001(\005\022\r\n\005"
    "money\030\004 \001(\005\022\014\n\004name\030\005 \001(\014\022\013\n\003sex\030\006 \001(\005\022\016"
    "\n\006avatar\030\007 \001(\014\022\r\n\005hu_xi\030\010 \001(\005\022)\n\006weaves\030"
    "\t \003(\0132\031.proto.game.tagWeaveCards\022\025\n\raban"
    "don_cards\030\n \003(\005\022\024\n\014abandon_type\030\013 \003(\005\022\014\n"
    "\004niao\030\014 \001(\005\022\014\n\004piao\030\r \001(\005\022\022\n\nxiang_gong\030"
    "\016 \001(\010\022\017\n\007offline\030\017 \001(\005\022\016\n\006action\030\020 \001(\005\022,"
    "\n\nhand_cards\030\021 \003(\0132\030.proto.game.tagHandC"
    "ards\022\023\n\013total_score\030\022 \001(\005\022\022\n\ntotal_huxi\030"
    "\023 \001(\005\022\022\n\nhong_count\030\024 \001(\005\022\021\n\thei_count\030\025"
    " \001(\005\022\022\n\nhand_count\030\026 \001(\005\022\020\n\010hu_count\030\027 \001"
    "(\005\022\021\n\tbest_huxi\030\030 \001(\005\022\026\n\016dian_pao_count\030"
    "\031 \001(\005\022\022\n\nbest_score\030\032 \001(\005\022\024\n\014listen_card"
    "s\030\033 \003(\005\022\024\n\014operate_type\030\034 \001(\005\022\r\n\005gains\030!"
    " \003(\005\022\023\n\013total_gains\030\" \001(\005\022\026\n\016all_piao_sc"
    "ore\030# \001(\005\022\022\n\nzimo_count\030$ \001(\005\022\024\n\014dissolv"
    "e_cnt\030( \001(\005\022\026\n\016dissovle_state\030) \001(\005\022\013\n\003t"
    "id\030* \001(\014\022\014\n\004skey\030+ \001(\014\022\022\n\ncard_index\030, \003"
    "(\005\022-\n\013cards_weave\030- \003(\0132\030.proto.game.tag"
    "HandCards\022,\n\nbest_weave\030. \003(\0132\030.proto.ga"
    "me.tagHandCards\022\021\n\tpeng_chou\030/ \003(\010\022\020\n\010ch"
    "i_chou\0300 \003(\010\022\020\n\010chou_wei\0301 \003(\010\0220\n\014chicar"
    "d_info\0302 \003(\0132\032.proto.game.tagChiCardInfo"
    "\"\203\001\n\023tagDissolveRoomInfo\022\r\n\005state\030\001 \001(\005\022"
    "\013\n\003uid\030\002 \001(\005\022\022\n\nvoters_uid\030\003 \003(\005\022\'\n\007play"
    "ers\030\004 \003(\0132\026.proto.game.tagPlayers\022\023\n\013rem"
    "ain_time\030\005 \001(\005\"\030\n\007tagGain\022\r\n\005score\030\001 \003(\005"
    "\"\344\016\n\014AckTableInfo\022\016\n\006seatid\030\001 \001(\005\022\r\n\005sta"
    "te\030\002 \001(\005\022\033\n\023operate_timer_stamp\030\003 \001(\005\022\027\n"
    "\017left_card_count\030\004 \001(\005\022\023\n\013banker_user\030\005 "
    "\001(\005\022\024\n\014current_user\030\006 \001(\005\022\024\n\014current_car"
    "d\030\007 \001(\005\022\034\n\024current_outcard_user\030\010 \001(\005\022\027\n"
    "\017current_outcard\030\t \001(\005\022\023\n\013is_dispatch\030\n "
    "\001(\010\022\025\n\rcard_operated\030\013 \001(\010\022\022\n\nis_da_niao"
    "\030\014 \001(\010\022\023\n\013is_out_card\030\r \001(\010\022\025\n\ris_first_"
    "card\030\016 \001(\010\022\023\n\013huang_count\030\017 \001(\005\022\017\n\007take_"
    "in\030\020 \001(\005\022\017\n\007play_id\030\021 \001(\005\022\021\n\tbase_huxi\030\022"
    " \001(\005\022\024\n\014room_user_id\030\023 \001(\005\022\022\n\nniao_count"
    "\030\024 \003(\005\022\022\n\npiao_count\030\025 \003(\005\022\023\n\013user_actio"
    "n\030\026 \001(\005\022\030\n\020is_first_operate\030\027 \001(\010\022\020\n\010res"
    "ponse\030\030 \001(\010\022\026\n\016perform_action\030\031 \001(\005\022,\n\nh"
    "and_cards\030\032 \003(\0132\030.proto.game.tagHandCard"
    "s\022\024\n\014listen_cards\030\033 \003(\005\022\022\n\ntotal_huxi\030\034 "
    "\001(\005\0220\n\014chicard_info\030\035 \003(\0132\032.proto.game.t"
    "agChiCardInfo\022\023\n\013stand_money\030\036 \001(\005\022\022\n\nba"
    "se_money\030\037 \001(\005\022;\n\022dissolve_room_info\030  \001"
    "(\0132\037.proto.game.tagDissolveRoomInfo\022\'\n\007p"
    "layers\030! \003(\0132\026.proto.game.tagPlayers\022\024\n\014"
    "offline_info\030\" \003(\014\022\031\n\021offline_max_count\030"
    "# \001(\005\022\023\n\013game_player\030$ \001(\005\022\021\n\tgame_name\030"
    "% \001(\014\022\022\n\ndong_zhang\030& \001(\010\022\027\n\017tian_hu_3ti"
    "5kan\030\' \001(\010\022\032\n\022is_tian_hu_3ti5kan\030( \001(\010\022\023"
    "\n\013huxi_to_tun\0302 \001(\005\022\023\n\013current_num\0303 \001(\005"
    "\022\017\n\007innings\0304 \001(\014\022\024\n\014is_ming_xiao\0305 \001(\005\022"
    "\027\n\017repertory_cards\0306 \003(\005\022\022\n\nweave_huxi\0307"
    " \003(\005\022\021\n\tshow_huxi\0308 \003(\005\022\022\n\nhands_huxi\0309 "
    "\003(\005\022\020\n\010dispatch\030: \001(\010\022\023\n\013dispatch_hu\030; \001"
    "(\010\022\023\n\013tiweipao_hu\030< \001(\010\022\016\n\006wei_hu\030= \001(\010\022"
    "\017\n\007ti_card\030> \001(\010\022\025\n\ris_weiti_card\030\? \001(\010\022"
    "\020\n\010pao_card\030@ \001(\010\022\022\n\nfirst_card\030A \001(\010\022\023\n"
    "\013after_weave\030C \001(\010\022\026\n\016user_responses\030D \003"
    "(\010\022\024\n\014user_actions\030E \003(\005\022\025\n\ruser_prerfor"
    "m\030F \003(\005\022\020\n\010chi_kind\030G \003(\005\022\027\n\017second_chi_"
    "kind\030H \003(\005\022\026\n\016third_chi_kind\030I \003(\005\022\022\n\nxi"
    "ang_gong\030J \003(\010\022\023\n\013common_best\030K \003(\010\022\013\n\003t"
    "id\030L \001(\014\022\023\n\013room_status\030M \001(\005\022\030\n\020dissolv"
    "e_applyer\030N \001(\005\022\026\n\016dissovle_state\030O \001(\005\022"
    "\024\n\014is_dissolved\030P \001(\005\022\023\n\013banker_card\030Q \001"
    "(\005\022\017\n\007is_piao\030R \001(\005\022\021\n\tvideo_str\030S \001(\014\022\021"
    "\n\tcur_timer\030T \001(\005\022\027\n\017user_dong_zhang\030U \003"
    "(\010\022\025\n\ris_with_maohu\030V \001(\010\022\023\n\013is_zimo_fan"
    "\030W \001(\010\022\022\n\nis_must_hu\030X \001(\005\022\016\n\006is_hhd\030Y \001"
    "(\010\022\"\n\005gains\030u \003(\0132\023.proto.game.tagGain\022\023"
    "\n\013tp_15_zhang\030v \001(\010\022\021\n\tb_must_hu\030w \001(\010\022\017"
    "\n\007all_num\030x \001(\005\"\032\n\nReqBetting\022\014\n\004cout\030\001 "
    "\002(\005\"0\n\017AckStartBetting\022\r\n\005state\030\001 \002(\005\022\016\n"
    "\006banker\030\002 \001(\005\":\n\rAckBettingErr\022\013\n\003uid\030\001 "
    "\002(\005\022\016\n\006seatid\030\002 \001(\005\022\014\n\004code\030\003 \001(\005\"f\n\016Ack"
    "BettingSucc\022\013\n\003uid\030\001 \002(\005\022\016\n\006seatid\030\002 \001(\005"
    "\022\014\n\004name\030\003 \001(\014\022\013\n\003sex\030\004 \001(\005\022\016\n\006avatar\030\005 "
    "\001(\014\022\014\n\004niao\030\006 \001(\005\"-\n\014AckStartPiao\022\r\n\005sta"
    "te\030\001 \002(\005\022\016\n\006banker\030\002 \001(\005\"\027\n\007ReqPiao\022\014\n\004c"
    "out\030\001 \002(\005\"7\n\nAckPiaoErr\022\013\n\003uid\030\001 \002(\005\022\016\n\006"
    "seatid\030\002 \001(\005\022\014\n\004code\030\003 \001(\005\"c\n\013AckPiaoSuc"
    "c\022\013\n\003uid\030\001 \002(\005\022\016\n\006seatid\030\002 \001(\005\022\014\n\004name\030\003"
    " \001(\014\022\013\n\003sex\030\004 \001(\005\022\016\n\006avatar\030\005 \001(\014\022\014\n\004pia"
    "o\030\006 \001(\005\"\271\001\n\014AckGameStart\022\016\n\006banker\030\001 \002(\005"
    "\022\023\n\013banker_card\030\002 \001(\005\022\027\n\017left_card_count"
    "\030\003 \001(\005\022,\n\nhand_cards\030\004 \003(\0132\030.proto.game."
    "tagHandCards\022\022\n\ntotal_huxi\030\005 \001(\005\022\024\n\014list"
    "en_cards\030\006 \003(\005\022\023\n\013current_num\030\007 \001(\005\"\227\001\n\020"
    "AckOperateNotify\022\024\n\014operate_type\030\001 \001(\005\022\024"
    "\n\014operate_card\030\002 \001(\005\0220\n\014chicard_info\030\003 \003"
    "(\0132\032.proto.game.tagChiCardInfo\022\021\n\toff_co"
    "unt\030\004 \001(\005\022\022\n\nis_must_hu\030\005 \001(\010\"`\n\rReqPreO"
    "perate\022\024\n\014operate_type\030\001 \002(\005\022\020\n\010chi_kind"
    "\030\002 \001(\005\022\023\n\013second_kind\030\003 \001(\005\022\022\n\nthird_kin"
    "d\030\004 \001(\005\":\n\rAckPreOperate\022\024\n\014operate_type"
    "\030\001 \002(\005\022\023\n\013can_operate\030\002 \001(\010\"a\n\016ReqOperat"
    "eCard\022\024\n\014operate_type\030\001 \002(\005\022\020\n\010chi_kind\030"
    "\002 \001(\005\022\023\n\013second_kind\030\003 \001(\005\022\022\n\nthird_kind"
    "\030\004 \001(\005\"\230\002\n\016AckOperateCard\022\020\n\010ack_code\030\001 "
    "\002(\005\022\016\n\006seatid\030\002 \001(\005\022\023\n\013action_card\030\003 \001(\005"
    "\022\024\n\014remove_count\030\004 \001(\005\022,\n\nhand_cards\030\005 \003"
    "(\0132\030.proto.game.tagHandCards\022\022\n\ntotal_hu"
    "xi\030\006 \001(\005\022\r\n\005hu_xi\030\007 \001(\005\022\024\n\014listen_cards\030"
    "\010 \003(\005\022-\n\013chi_results\030\t \003(\0132\030.proto.game."
    "tagHandCards\022\020\n\010chou_wei\030\n \001(\010\022\021\n\toff_co"
    "unt\030\013 \001(\005\"E\n\rAckOperateRes\022\016\n\006seatid\030\001 \002"
    "(\005\022\024\n\014operate_type\030\002 \001(\005\022\016\n\006err_no\030\003 \001(\005"
    "\"\306\001\n\017AckDispatchCard\022\016\n\006seatid\030\001 \002(\005\022\014\n\004"
    "card\030\002 \001(\005\022\027\n\017left_card_count\030\003 \001(\005\022\021\n\tt"
    "o_seatid\030\004 \001(\005\022,\n\nhand_cards\030\005 \003(\0132\030.pro"
    "to.game.tagHandCards\022\022\n\ntotal_huxi\030\006 \001(\005"
    "\022\024\n\014listen_cards\030\007 \003(\005\022\021\n\toff_count\030\010 \001("
    "\005\"F\n\014AckOutNotify\022\016\n\006seatid\030\001 \002(\005\022\023\n\013is_"
    "out_card\030\002 \001(\010\022\021\n\toff_count\030\003 \001(\005\"\036\n\014Ack"
    "XiangGong\022\016\n\006seatid\030\001 \002(\005\"8\n\nReqOutCard\022"
    "\020\n\010out_card\030\001 \002(\005\022\013\n\003row\030\002 \001(\005\022\013\n\003col\030\003 "
    "\001(\005\"\231\001\n\nAckOutCard\022\016\n\006seatid\030\001 \002(\005\022\020\n\010ou"
    "t_card\030\002 \001(\005\022\022\n\ntotal_huxi\030\003 \001(\005\022,\n\nhand"
    "_cards\030\004 \003(\0132\030.proto.game.tagHandCards\022\024"
    "\n\014listen_cards\030\005 \003(\005\022\021\n\toff_count\030\006 \001(\005\""
    "=\n\rReqChangeCard\022,\n\nhand_cards\030\001 \003(\0132\030.p"
    "roto.game.tagHandCards\"Q\n\rAckChangeCard\022"
    ",\n\nhand_cards\030\001 \003(\0132\030.proto.game.tagHand"
    "Cards\022\022\n\ntotal_huxi\030\002 \001(\005\"g\n\rAckUpdateCa"
    "rd\022,\n\nhand_cards\030\001 \003(\0132\030.proto.game.tagH"
    "andCards\022\022\n\ntotal_huxi\030\002 \001(\005\022\024\n\014listen_c"
    "ards\030\003 \003(\005\"p\n\020AckUpdateAbandon\022\016\n\006seatid"
    "\030\001 \002(\005\022\014\n\004card\030\002 \001(\005\022\025\n\rabandon_cards\030\003 "
    "\003(\005\022\021\n\toff_count\030\004 \001(\005\022\024\n\014abandon_type\030\005"
    " \003(\005\"/\n\ntagFanInfo\022\020\n\010fan_type\030\001 \001(\005\022\017\n\007"
    "fan_num\030\002 \001(\005\"\321\002\n\nAckGameEnd\022\020\n\010end_type"
    "\030\001 \002(\005\022\022\n\nwin_seatid\030\002 \001(\005\022\017\n\007hu_card\030\003 "
    "\001(\005\022\022\n\nleft_cards\030\004 \003(\005\022\022\n\ntotal_huxi\030\005 "
    "\001(\005\022\016\n\006hu_xis\030\006 \001(\005\022\014\n\004tuns\030\007 \001(\005\022\014\n\004fan"
    "s\030\010 \001(\005\022(\n\010fan_info\030\t \003(\0132\026.proto.game.t"
    "agFanInfo\022)\n\006weaves\030\n \003(\0132\031.proto.game.t"
    "agWeaveCards\022\'\n\007players\030\013 \003(\0132\026.proto.ga"
    "me.tagPlayers\022\021\n\toff_count\030\014 \001(\005\022\020\n\010dian"
    "_pao\030\r \001(\010\022\025\n\rdian_pao_user\030\016 \001(\005\"\\\n\020Ack"
    "GameStartFail\022\013\n\003vid\030\001 \002(\005\022\016\n\006roomid\030\002 \001"
    "(\014\022\021\n\tcan_start\030\003 \001(\005\022\014\n\004code\030\004 \001(\005\022\n\n\002t"
    "s\030\005 \001(\005\"+\n\014AckUserReady\022\016\n\006seatid\030\001 \002(\005\022"
    "\013\n\003uid\030\002 \001(\005\"\036\n\016AckDissolveErr\022\014\n\004code\030\001"
    " \002(\005\"G\n\017AckDissolveSucc\022\013\n\003uid\030\001 \002(\005\022\022\n\n"
    "voters_uid\030\002 \003(\005\022\023\n\013remain_time\030\003 \001(\005\"-\n"
    "\016ReqDissolveAct\022\013\n\003uid\030\001 \002(\005\022\016\n\006action\030\002"
    " \001(\005\"1\n\022AckDissolveActSucc\022\013\n\003uid\030\001 \002(\005\022"
    "\016\n\006action\030\002 \001(\005\"#\n\021AckDissolveResult\022\016\n\006"
    "result\030\001 \002(\005\")\n\nAckOffline\022\013\n\003uid\030\001 \002(\005\022"
    "\016\n\006seatid\030\002 \001(\005\"h\n\013AckFinalEnd\022\016\n\006roomid"
    "\030\001 \002(\014\022\024\n\014room_user_id\030\002 \001(\005\022\n\n\002ts\030\003 \001(\005"
    "\022\'\n\007players\030\004 \003(\0132\026.proto.game.tagPlayer"
    "s\"8\n\rAckHandDetail\022\'\n\007players\030\001 \003(\0132\026.pr"
    "oto.game.tagPlayers\"\036\n\016AckLastEndInfo\022\014\n"
    "\004info\030\001 \002(\014\"\035\n\rAckChouNotity\022\014\n\004type\030\001 \002"
    "(\005\"\307\002\n\016TableInfoVideo\022\016\n\006banker\030\001 \001(\005\022\017\n"
    "\007take_in\030\002 \001(\005\022\017\n\007play_id\030\003 \001(\005\022\021\n\tbase_"
    "huxi\030\004 \001(\005\022\024\n\014room_user_id\030\005 \001(\005\022\'\n\007play"
    "ers\030\006 \003(\0132\026.proto.game.tagPlayers\022\023\n\013gam"
    "e_player\030\007 \001(\005\022\021\n\tgame_name\030\010 \001(\014\022\025\n\ris_"
    "with_maohu\030\t \001(\010\022\023\n\013is_zimo_fan\030\n \001(\010\022\022\n"
    "\nis_must_hu\030\013 \001(\005\022\016\n\006is_hhd\030\014 \001(\010\022\023\n\013hux"
    "i_to_tun\030\r \001(\005\022\017\n\007all_num\030\016 \001(\005\022\023\n\013curre"
    "nt_num\030\017 \001(\005\"\214\001\n\016GameStartVideo\022\016\n\006banke"
    "r\030\001 \002(\005\022\023\n\013banker_card\030\002 \001(\005\022\027\n\017left_car"
    "d_count\030\003 \001(\005\022\'\n\007players\030\004 \003(\0132\026.proto.g"
    "ame.tagPlayers\022\023\n\013current_num\030\005 \001(\005\"\310\001\n\014"
    "OperateVideo\022\020\n\010ack_code\030\001 \002(\005\022\016\n\006seatid"
    "\030\002 \001(\005\022\023\n\013action_card\030\003 \001(\005\022,\n\nhand_card"
    "s\030\004 \003(\0132\030.proto.game.tagHandCards\022\022\n\ntot"
    "al_huxi\030\005 \001(\005\022\024\n\014listen_cards\030\006 \003(\005\022)\n\006w"
    "eaves\030\007 \003(\0132\031.proto.game.tagWeaveCards\"8"
    "\n\rOperateNotify\022\'\n\007players\030\001 \003(\0132\026.proto"
    ".game.tagPlayers\"3\n\010AckGains\022\'\n\007players\030"
    "\001 \003(\0132\026.proto.game.tagPlayers\"\'\n\007AckChat"
    "\022\016\n\006seatid\030\001 \002(\005\022\014\n\004text\030\002 \001(\014\")\n\007AckFac"
    "e\022\016\n\006seatid\030\001 \002(\005\022\016\n\006faceid\030\002 \001(\005*\\\n\010Cho"
    "uCode\022\022\n\016CHOU_CODE_NULL\020\000\022\022\n\016CHOU_CODE_P"
    "ENG\020\001\022\021\n\rCHOU_CODE_CHI\020\002\022\025\n\021CHOU_CODE_CH"
    "IPENG\020\003", 7807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameproto.proto", &protobuf_RegisterTypes);
  tagHandCards::default_instance_ = new tagHandCards();
  tagWeaveCards::default_instance_ = new tagWeaveCards();
  tagThirdInfo::default_instance_ = new tagThirdInfo();
  tagSecondInfo::default_instance_ = new tagSecondInfo();
  tagChiCardInfo::default_instance_ = new tagChiCardInfo();
  tagPlayers::default_instance_ = new tagPlayers();
  tagDissolveRoomInfo::default_instance_ = new tagDissolveRoomInfo();
  tagGain::default_instance_ = new tagGain();
  AckTableInfo::default_instance_ = new AckTableInfo();
  ReqBetting::default_instance_ = new ReqBetting();
  AckStartBetting::default_instance_ = new AckStartBetting();
  AckBettingErr::default_instance_ = new AckBettingErr();
  AckBettingSucc::default_instance_ = new AckBettingSucc();
  AckStartPiao::default_instance_ = new AckStartPiao();
  ReqPiao::default_instance_ = new ReqPiao();
  AckPiaoErr::default_instance_ = new AckPiaoErr();
  AckPiaoSucc::default_instance_ = new AckPiaoSucc();
  AckGameStart::default_instance_ = new AckGameStart();
  AckOperateNotify::default_instance_ = new AckOperateNotify();
  ReqPreOperate::default_instance_ = new ReqPreOperate();
  AckPreOperate::default_instance_ = new AckPreOperate();
  ReqOperateCard::default_instance_ = new ReqOperateCard();
  AckOperateCard::default_instance_ = new AckOperateCard();
  AckOperateRes::default_instance_ = new AckOperateRes();
  AckDispatchCard::default_instance_ = new AckDispatchCard();
  AckOutNotify::default_instance_ = new AckOutNotify();
  AckXiangGong::default_instance_ = new AckXiangGong();
  ReqOutCard::default_instance_ = new ReqOutCard();
  AckOutCard::default_instance_ = new AckOutCard();
  ReqChangeCard::default_instance_ = new ReqChangeCard();
  AckChangeCard::default_instance_ = new AckChangeCard();
  AckUpdateCard::default_instance_ = new AckUpdateCard();
  AckUpdateAbandon::default_instance_ = new AckUpdateAbandon();
  tagFanInfo::default_instance_ = new tagFanInfo();
  AckGameEnd::default_instance_ = new AckGameEnd();
  AckGameStartFail::default_instance_ = new AckGameStartFail();
  AckUserReady::default_instance_ = new AckUserReady();
  AckDissolveErr::default_instance_ = new AckDissolveErr();
  AckDissolveSucc::default_instance_ = new AckDissolveSucc();
  ReqDissolveAct::default_instance_ = new ReqDissolveAct();
  AckDissolveActSucc::default_instance_ = new AckDissolveActSucc();
  AckDissolveResult::default_instance_ = new AckDissolveResult();
  AckOffline::default_instance_ = new AckOffline();
  AckFinalEnd::default_instance_ = new AckFinalEnd();
  AckHandDetail::default_instance_ = new AckHandDetail();
  AckLastEndInfo::default_instance_ = new AckLastEndInfo();
  AckChouNotity::default_instance_ = new AckChouNotity();
  TableInfoVideo::default_instance_ = new TableInfoVideo();
  GameStartVideo::default_instance_ = new GameStartVideo();
  OperateVideo::default_instance_ = new OperateVideo();
  OperateNotify::default_instance_ = new OperateNotify();
  AckGains::default_instance_ = new AckGains();
  AckChat::default_instance_ = new AckChat();
  AckFace::default_instance_ = new AckFace();
  tagHandCards::default_instance_->InitAsDefaultInstance();
  tagWeaveCards::default_instance_->InitAsDefaultInstance();
  tagThirdInfo::default_instance_->InitAsDefaultInstance();
  tagSecondInfo::default_instance_->InitAsDefaultInstance();
  tagChiCardInfo::default_instance_->InitAsDefaultInstance();
  tagPlayers::default_instance_->InitAsDefaultInstance();
  tagDissolveRoomInfo::default_instance_->InitAsDefaultInstance();
  tagGain::default_instance_->InitAsDefaultInstance();
  AckTableInfo::default_instance_->InitAsDefaultInstance();
  ReqBetting::default_instance_->InitAsDefaultInstance();
  AckStartBetting::default_instance_->InitAsDefaultInstance();
  AckBettingErr::default_instance_->InitAsDefaultInstance();
  AckBettingSucc::default_instance_->InitAsDefaultInstance();
  AckStartPiao::default_instance_->InitAsDefaultInstance();
  ReqPiao::default_instance_->InitAsDefaultInstance();
  AckPiaoErr::default_instance_->InitAsDefaultInstance();
  AckPiaoSucc::default_instance_->InitAsDefaultInstance();
  AckGameStart::default_instance_->InitAsDefaultInstance();
  AckOperateNotify::default_instance_->InitAsDefaultInstance();
  ReqPreOperate::default_instance_->InitAsDefaultInstance();
  AckPreOperate::default_instance_->InitAsDefaultInstance();
  ReqOperateCard::default_instance_->InitAsDefaultInstance();
  AckOperateCard::default_instance_->InitAsDefaultInstance();
  AckOperateRes::default_instance_->InitAsDefaultInstance();
  AckDispatchCard::default_instance_->InitAsDefaultInstance();
  AckOutNotify::default_instance_->InitAsDefaultInstance();
  AckXiangGong::default_instance_->InitAsDefaultInstance();
  ReqOutCard::default_instance_->InitAsDefaultInstance();
  AckOutCard::default_instance_->InitAsDefaultInstance();
  ReqChangeCard::default_instance_->InitAsDefaultInstance();
  AckChangeCard::default_instance_->InitAsDefaultInstance();
  AckUpdateCard::default_instance_->InitAsDefaultInstance();
  AckUpdateAbandon::default_instance_->InitAsDefaultInstance();
  tagFanInfo::default_instance_->InitAsDefaultInstance();
  AckGameEnd::default_instance_->InitAsDefaultInstance();
  AckGameStartFail::default_instance_->InitAsDefaultInstance();
  AckUserReady::default_instance_->InitAsDefaultInstance();
  AckDissolveErr::default_instance_->InitAsDefaultInstance();
  AckDissolveSucc::default_instance_->InitAsDefaultInstance();
  ReqDissolveAct::default_instance_->InitAsDefaultInstance();
  AckDissolveActSucc::default_instance_->InitAsDefaultInstance();
  AckDissolveResult::default_instance_->InitAsDefaultInstance();
  AckOffline::default_instance_->InitAsDefaultInstance();
  AckFinalEnd::default_instance_->InitAsDefaultInstance();
  AckHandDetail::default_instance_->InitAsDefaultInstance();
  AckLastEndInfo::default_instance_->InitAsDefaultInstance();
  AckChouNotity::default_instance_->InitAsDefaultInstance();
  TableInfoVideo::default_instance_->InitAsDefaultInstance();
  GameStartVideo::default_instance_->InitAsDefaultInstance();
  OperateVideo::default_instance_->InitAsDefaultInstance();
  OperateNotify::default_instance_->InitAsDefaultInstance();
  AckGains::default_instance_->InitAsDefaultInstance();
  AckChat::default_instance_->InitAsDefaultInstance();
  AckFace::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameproto_2eproto {
  StaticDescriptorInitializer_gameproto_2eproto() {
    protobuf_AddDesc_gameproto_2eproto();
  }
} static_descriptor_initializer_gameproto_2eproto_;
const ::google::protobuf::EnumDescriptor* ChouCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChouCode_descriptor_;
}
bool ChouCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int tagHandCards::kCardFieldNumber;
#endif  // !_MSC_VER

tagHandCards::tagHandCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagHandCards::InitAsDefaultInstance() {
}

tagHandCards::tagHandCards(const tagHandCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagHandCards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHandCards::~tagHandCards() {
  SharedDtor();
}

void tagHandCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHandCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHandCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHandCards_descriptor_;
}

const tagHandCards& tagHandCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagHandCards* tagHandCards::default_instance_ = NULL;

tagHandCards* tagHandCards::New() const {
  return new tagHandCards;
}

void tagHandCards::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHandCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagHandCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagHandCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagHandCards::ByteSize() const {
  int total_size = 0;

  // repeated int32 card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHandCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHandCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHandCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHandCards::MergeFrom(const tagHandCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHandCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHandCards::CopyFrom(const tagHandCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHandCards::IsInitialized() const {

  return true;
}

void tagHandCards::Swap(tagHandCards* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHandCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHandCards_descriptor_;
  metadata.reflection = tagHandCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagWeaveCards::kWeaveKindFieldNumber;
const int tagWeaveCards::kCardCountFieldNumber;
const int tagWeaveCards::kCenterCardFieldNumber;
const int tagWeaveCards::kCardListFieldNumber;
const int tagWeaveCards::kHuXiFieldNumber;
const int tagWeaveCards::kOutCardFieldNumber;
#endif  // !_MSC_VER

tagWeaveCards::tagWeaveCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagWeaveCards::InitAsDefaultInstance() {
}

tagWeaveCards::tagWeaveCards(const tagWeaveCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagWeaveCards::SharedCtor() {
  _cached_size_ = 0;
  weave_kind_ = 0;
  card_count_ = 0;
  center_card_ = 0;
  hu_xi_ = 0;
  out_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagWeaveCards::~tagWeaveCards() {
  SharedDtor();
}

void tagWeaveCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagWeaveCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagWeaveCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagWeaveCards_descriptor_;
}

const tagWeaveCards& tagWeaveCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagWeaveCards* tagWeaveCards::default_instance_ = NULL;

tagWeaveCards* tagWeaveCards::New() const {
  return new tagWeaveCards;
}

void tagWeaveCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weave_kind_ = 0;
    card_count_ = 0;
    center_card_ = 0;
    hu_xi_ = 0;
    out_card_ = 0;
  }
  card_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagWeaveCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weave_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weave_kind_)));
          set_has_weave_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_count;
        break;
      }

      // optional int32 card_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_count_)));
          set_has_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_center_card;
        break;
      }

      // optional int32 center_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_card_)));
          set_has_center_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_card_list;
        break;
      }

      // repeated int32 card_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_card_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_card_list;
        if (input->ExpectTag(40)) goto parse_hu_xi;
        break;
      }

      // optional int32 hu_xi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_xi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_xi_)));
          set_has_hu_xi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_out_card;
        break;
      }

      // optional int32 out_card = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_card_)));
          set_has_out_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagWeaveCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weave_kind = 1;
  if (has_weave_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weave_kind(), output);
  }

  // optional int32 card_count = 2;
  if (has_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_count(), output);
  }

  // optional int32 center_card = 3;
  if (has_center_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->center_card(), output);
  }

  // repeated int32 card_list = 4;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->card_list(i), output);
  }

  // optional int32 hu_xi = 5;
  if (has_hu_xi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hu_xi(), output);
  }

  // optional int32 out_card = 6;
  if (has_out_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->out_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagWeaveCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 weave_kind = 1;
  if (has_weave_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weave_kind(), target);
  }

  // optional int32 card_count = 2;
  if (has_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_count(), target);
  }

  // optional int32 center_card = 3;
  if (has_center_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->center_card(), target);
  }

  // repeated int32 card_list = 4;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->card_list(i), target);
  }

  // optional int32 hu_xi = 5;
  if (has_hu_xi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hu_xi(), target);
  }

  // optional int32 out_card = 6;
  if (has_out_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->out_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagWeaveCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weave_kind = 1;
    if (has_weave_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weave_kind());
    }

    // optional int32 card_count = 2;
    if (has_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_count());
    }

    // optional int32 center_card = 3;
    if (has_center_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_card());
    }

    // optional int32 hu_xi = 5;
    if (has_hu_xi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_xi());
    }

    // optional int32 out_card = 6;
    if (has_out_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_card());
    }

  }
  // repeated int32 card_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_list(i));
    }
    total_size += 1 * this->card_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagWeaveCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagWeaveCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagWeaveCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagWeaveCards::MergeFrom(const tagWeaveCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_list_.MergeFrom(from.card_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weave_kind()) {
      set_weave_kind(from.weave_kind());
    }
    if (from.has_card_count()) {
      set_card_count(from.card_count());
    }
    if (from.has_center_card()) {
      set_center_card(from.center_card());
    }
    if (from.has_hu_xi()) {
      set_hu_xi(from.hu_xi());
    }
    if (from.has_out_card()) {
      set_out_card(from.out_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagWeaveCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagWeaveCards::CopyFrom(const tagWeaveCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagWeaveCards::IsInitialized() const {

  return true;
}

void tagWeaveCards::Swap(tagWeaveCards* other) {
  if (other != this) {
    std::swap(weave_kind_, other->weave_kind_);
    std::swap(card_count_, other->card_count_);
    std::swap(center_card_, other->center_card_);
    card_list_.Swap(&other->card_list_);
    std::swap(hu_xi_, other->hu_xi_);
    std::swap(out_card_, other->out_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagWeaveCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagWeaveCards_descriptor_;
  metadata.reflection = tagWeaveCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagThirdInfo::kChiKindFieldNumber;
const int tagThirdInfo::kCenterCardFieldNumber;
const int tagThirdInfo::kCardsFieldNumber;
#endif  // !_MSC_VER

tagThirdInfo::tagThirdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagThirdInfo::InitAsDefaultInstance() {
}

tagThirdInfo::tagThirdInfo(const tagThirdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagThirdInfo::SharedCtor() {
  _cached_size_ = 0;
  chi_kind_ = 0;
  center_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagThirdInfo::~tagThirdInfo() {
  SharedDtor();
}

void tagThirdInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagThirdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagThirdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagThirdInfo_descriptor_;
}

const tagThirdInfo& tagThirdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagThirdInfo* tagThirdInfo::default_instance_ = NULL;

tagThirdInfo* tagThirdInfo::New() const {
  return new tagThirdInfo;
}

void tagThirdInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chi_kind_ = 0;
    center_card_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagThirdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chi_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_kind_)));
          set_has_chi_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_center_card;
        break;
      }

      // optional int32 center_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_card_)));
          set_has_center_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagThirdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chi_kind = 1;
  if (has_chi_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chi_kind(), output);
  }

  // optional int32 center_card = 2;
  if (has_center_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->center_card(), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagThirdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chi_kind = 1;
  if (has_chi_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chi_kind(), target);
  }

  // optional int32 center_card = 2;
  if (has_center_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->center_card(), target);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagThirdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chi_kind = 1;
    if (has_chi_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_kind());
    }

    // optional int32 center_card = 2;
    if (has_center_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_card());
    }

  }
  // repeated int32 cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagThirdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagThirdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagThirdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagThirdInfo::MergeFrom(const tagThirdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chi_kind()) {
      set_chi_kind(from.chi_kind());
    }
    if (from.has_center_card()) {
      set_center_card(from.center_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagThirdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagThirdInfo::CopyFrom(const tagThirdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagThirdInfo::IsInitialized() const {

  return true;
}

void tagThirdInfo::Swap(tagThirdInfo* other) {
  if (other != this) {
    std::swap(chi_kind_, other->chi_kind_);
    std::swap(center_card_, other->center_card_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagThirdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagThirdInfo_descriptor_;
  metadata.reflection = tagThirdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagSecondInfo::kChiKindFieldNumber;
const int tagSecondInfo::kCenterCardFieldNumber;
const int tagSecondInfo::kCardsFieldNumber;
const int tagSecondInfo::kThirdInfoFieldNumber;
#endif  // !_MSC_VER

tagSecondInfo::tagSecondInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagSecondInfo::InitAsDefaultInstance() {
}

tagSecondInfo::tagSecondInfo(const tagSecondInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagSecondInfo::SharedCtor() {
  _cached_size_ = 0;
  chi_kind_ = 0;
  center_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagSecondInfo::~tagSecondInfo() {
  SharedDtor();
}

void tagSecondInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagSecondInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagSecondInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagSecondInfo_descriptor_;
}

const tagSecondInfo& tagSecondInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagSecondInfo* tagSecondInfo::default_instance_ = NULL;

tagSecondInfo* tagSecondInfo::New() const {
  return new tagSecondInfo;
}

void tagSecondInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chi_kind_ = 0;
    center_card_ = 0;
  }
  cards_.Clear();
  third_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagSecondInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chi_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_kind_)));
          set_has_chi_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_center_card;
        break;
      }

      // optional int32 center_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_card_)));
          set_has_center_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        if (input->ExpectTag(34)) goto parse_third_info;
        break;
      }

      // repeated .proto.game.tagThirdInfo third_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_third_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_third_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_third_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagSecondInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chi_kind = 1;
  if (has_chi_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chi_kind(), output);
  }

  // optional int32 center_card = 2;
  if (has_center_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->center_card(), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  // repeated .proto.game.tagThirdInfo third_info = 4;
  for (int i = 0; i < this->third_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->third_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagSecondInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chi_kind = 1;
  if (has_chi_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chi_kind(), target);
  }

  // optional int32 center_card = 2;
  if (has_center_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->center_card(), target);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cards(i), target);
  }

  // repeated .proto.game.tagThirdInfo third_info = 4;
  for (int i = 0; i < this->third_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->third_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagSecondInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chi_kind = 1;
    if (has_chi_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_kind());
    }

    // optional int32 center_card = 2;
    if (has_center_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_card());
    }

  }
  // repeated int32 cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated .proto.game.tagThirdInfo third_info = 4;
  total_size += 1 * this->third_info_size();
  for (int i = 0; i < this->third_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->third_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagSecondInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagSecondInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagSecondInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagSecondInfo::MergeFrom(const tagSecondInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  third_info_.MergeFrom(from.third_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chi_kind()) {
      set_chi_kind(from.chi_kind());
    }
    if (from.has_center_card()) {
      set_center_card(from.center_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagSecondInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagSecondInfo::CopyFrom(const tagSecondInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagSecondInfo::IsInitialized() const {

  return true;
}

void tagSecondInfo::Swap(tagSecondInfo* other) {
  if (other != this) {
    std::swap(chi_kind_, other->chi_kind_);
    std::swap(center_card_, other->center_card_);
    cards_.Swap(&other->cards_);
    third_info_.Swap(&other->third_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagSecondInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagSecondInfo_descriptor_;
  metadata.reflection = tagSecondInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagChiCardInfo::kChiKindFieldNumber;
const int tagChiCardInfo::kCenterCardFieldNumber;
const int tagChiCardInfo::kCardsFieldNumber;
const int tagChiCardInfo::kSecondInfoFieldNumber;
#endif  // !_MSC_VER

tagChiCardInfo::tagChiCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagChiCardInfo::InitAsDefaultInstance() {
}

tagChiCardInfo::tagChiCardInfo(const tagChiCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagChiCardInfo::SharedCtor() {
  _cached_size_ = 0;
  chi_kind_ = 0;
  center_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagChiCardInfo::~tagChiCardInfo() {
  SharedDtor();
}

void tagChiCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagChiCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagChiCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagChiCardInfo_descriptor_;
}

const tagChiCardInfo& tagChiCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagChiCardInfo* tagChiCardInfo::default_instance_ = NULL;

tagChiCardInfo* tagChiCardInfo::New() const {
  return new tagChiCardInfo;
}

void tagChiCardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chi_kind_ = 0;
    center_card_ = 0;
  }
  cards_.Clear();
  second_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagChiCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chi_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_kind_)));
          set_has_chi_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_center_card;
        break;
      }

      // optional int32 center_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_card_)));
          set_has_center_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        if (input->ExpectTag(34)) goto parse_second_info;
        break;
      }

      // repeated .proto.game.tagSecondInfo second_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_second_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_second_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_second_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagChiCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chi_kind = 1;
  if (has_chi_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chi_kind(), output);
  }

  // optional int32 center_card = 2;
  if (has_center_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->center_card(), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  // repeated .proto.game.tagSecondInfo second_info = 4;
  for (int i = 0; i < this->second_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->second_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagChiCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chi_kind = 1;
  if (has_chi_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chi_kind(), target);
  }

  // optional int32 center_card = 2;
  if (has_center_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->center_card(), target);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cards(i), target);
  }

  // repeated .proto.game.tagSecondInfo second_info = 4;
  for (int i = 0; i < this->second_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->second_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagChiCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chi_kind = 1;
    if (has_chi_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_kind());
    }

    // optional int32 center_card = 2;
    if (has_center_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_card());
    }

  }
  // repeated int32 cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated .proto.game.tagSecondInfo second_info = 4;
  total_size += 1 * this->second_info_size();
  for (int i = 0; i < this->second_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->second_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagChiCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagChiCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagChiCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagChiCardInfo::MergeFrom(const tagChiCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  second_info_.MergeFrom(from.second_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chi_kind()) {
      set_chi_kind(from.chi_kind());
    }
    if (from.has_center_card()) {
      set_center_card(from.center_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagChiCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagChiCardInfo::CopyFrom(const tagChiCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagChiCardInfo::IsInitialized() const {

  return true;
}

void tagChiCardInfo::Swap(tagChiCardInfo* other) {
  if (other != this) {
    std::swap(chi_kind_, other->chi_kind_);
    std::swap(center_card_, other->center_card_);
    cards_.Swap(&other->cards_);
    second_info_.Swap(&other->second_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagChiCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagChiCardInfo_descriptor_;
  metadata.reflection = tagChiCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPlayers::kUidFieldNumber;
const int tagPlayers::kSeatidFieldNumber;
const int tagPlayers::kReadyFieldNumber;
const int tagPlayers::kMoneyFieldNumber;
const int tagPlayers::kNameFieldNumber;
const int tagPlayers::kSexFieldNumber;
const int tagPlayers::kAvatarFieldNumber;
const int tagPlayers::kHuXiFieldNumber;
const int tagPlayers::kWeavesFieldNumber;
const int tagPlayers::kAbandonCardsFieldNumber;
const int tagPlayers::kAbandonTypeFieldNumber;
const int tagPlayers::kNiaoFieldNumber;
const int tagPlayers::kPiaoFieldNumber;
const int tagPlayers::kXiangGongFieldNumber;
const int tagPlayers::kOfflineFieldNumber;
const int tagPlayers::kActionFieldNumber;
const int tagPlayers::kHandCardsFieldNumber;
const int tagPlayers::kTotalScoreFieldNumber;
const int tagPlayers::kTotalHuxiFieldNumber;
const int tagPlayers::kHongCountFieldNumber;
const int tagPlayers::kHeiCountFieldNumber;
const int tagPlayers::kHandCountFieldNumber;
const int tagPlayers::kHuCountFieldNumber;
const int tagPlayers::kBestHuxiFieldNumber;
const int tagPlayers::kDianPaoCountFieldNumber;
const int tagPlayers::kBestScoreFieldNumber;
const int tagPlayers::kListenCardsFieldNumber;
const int tagPlayers::kOperateTypeFieldNumber;
const int tagPlayers::kGainsFieldNumber;
const int tagPlayers::kTotalGainsFieldNumber;
const int tagPlayers::kAllPiaoScoreFieldNumber;
const int tagPlayers::kZimoCountFieldNumber;
const int tagPlayers::kDissolveCntFieldNumber;
const int tagPlayers::kDissovleStateFieldNumber;
const int tagPlayers::kTidFieldNumber;
const int tagPlayers::kSkeyFieldNumber;
const int tagPlayers::kCardIndexFieldNumber;
const int tagPlayers::kCardsWeaveFieldNumber;
const int tagPlayers::kBestWeaveFieldNumber;
const int tagPlayers::kPengChouFieldNumber;
const int tagPlayers::kChiChouFieldNumber;
const int tagPlayers::kChouWeiFieldNumber;
const int tagPlayers::kChicardInfoFieldNumber;
#endif  // !_MSC_VER

tagPlayers::tagPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagPlayers::InitAsDefaultInstance() {
}

tagPlayers::tagPlayers(const tagPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagPlayers::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  ready_ = 0;
  money_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hu_xi_ = 0;
  niao_ = 0;
  piao_ = 0;
  xiang_gong_ = false;
  offline_ = 0;
  action_ = 0;
  total_score_ = 0;
  total_huxi_ = 0;
  hong_count_ = 0;
  hei_count_ = 0;
  hand_count_ = 0;
  hu_count_ = 0;
  best_huxi_ = 0;
  dian_pao_count_ = 0;
  best_score_ = 0;
  operate_type_ = 0;
  total_gains_ = 0;
  all_piao_score_ = 0;
  zimo_count_ = 0;
  dissolve_cnt_ = 0;
  dissovle_state_ = 0;
  tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPlayers::~tagPlayers() {
  SharedDtor();
}

void tagPlayers::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (skey_ != &::google::protobuf::internal::kEmptyString) {
    delete skey_;
  }
  if (this != default_instance_) {
  }
}

void tagPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPlayers_descriptor_;
}

const tagPlayers& tagPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagPlayers* tagPlayers::default_instance_ = NULL;

tagPlayers* tagPlayers::New() const {
  return new tagPlayers;
}

void tagPlayers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    seatid_ = 0;
    ready_ = 0;
    money_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    hu_xi_ = 0;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    niao_ = 0;
    piao_ = 0;
    xiang_gong_ = false;
    offline_ = 0;
    action_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    total_score_ = 0;
    total_huxi_ = 0;
    hong_count_ = 0;
    hei_count_ = 0;
    hand_count_ = 0;
    hu_count_ = 0;
    best_huxi_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    dian_pao_count_ = 0;
    best_score_ = 0;
    operate_type_ = 0;
    total_gains_ = 0;
    all_piao_score_ = 0;
    zimo_count_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    dissolve_cnt_ = 0;
    dissovle_state_ = 0;
    if (has_tid()) {
      if (tid_ != &::google::protobuf::internal::kEmptyString) {
        tid_->clear();
      }
    }
    if (has_skey()) {
      if (skey_ != &::google::protobuf::internal::kEmptyString) {
        skey_->clear();
      }
    }
  }
  weaves_.Clear();
  abandon_cards_.Clear();
  abandon_type_.Clear();
  hand_cards_.Clear();
  listen_cards_.Clear();
  gains_.Clear();
  card_index_.Clear();
  cards_weave_.Clear();
  best_weave_.Clear();
  peng_chou_.Clear();
  chi_chou_.Clear();
  chou_wei_.Clear();
  chicard_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ready;
        break;
      }

      // optional int32 ready = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hu_xi;
        break;
      }

      // optional int32 hu_xi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_xi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_xi_)));
          set_has_hu_xi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_weaves;
        break;
      }

      // repeated .proto.game.tagWeaveCards weaves = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_weaves;
        if (input->ExpectTag(80)) goto parse_abandon_cards;
        break;
      }

      // repeated int32 abandon_cards = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abandon_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_abandon_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_abandon_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_abandon_cards;
        if (input->ExpectTag(88)) goto parse_abandon_type;
        break;
      }

      // repeated int32 abandon_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abandon_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_abandon_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_abandon_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_abandon_type;
        if (input->ExpectTag(96)) goto parse_niao;
        break;
      }

      // optional int32 niao = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_niao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &niao_)));
          set_has_niao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_piao;
        break;
      }

      // optional int32 piao = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piao_)));
          set_has_piao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_xiang_gong;
        break;
      }

      // optional bool xiang_gong = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xiang_gong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xiang_gong_)));
          set_has_xiang_gong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_offline;
        break;
      }

      // optional int32 offline = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offline_)));
          set_has_offline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_action;
        break;
      }

      // optional int32 action = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_hand_cards;
        break;
      }

      // repeated .proto.game.tagHandCards hand_cards = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_hand_cards;
        if (input->ExpectTag(144)) goto parse_total_score;
        break;
      }

      // optional int32 total_score = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_hong_count;
        break;
      }

      // optional int32 hong_count = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hong_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hong_count_)));
          set_has_hong_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_hei_count;
        break;
      }

      // optional int32 hei_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hei_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hei_count_)));
          set_has_hei_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_hand_count;
        break;
      }

      // optional int32 hand_count = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hand_count_)));
          set_has_hand_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_hu_count;
        break;
      }

      // optional int32 hu_count = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_count_)));
          set_has_hu_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_best_huxi;
        break;
      }

      // optional int32 best_huxi = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_huxi_)));
          set_has_best_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_dian_pao_count;
        break;
      }

      // optional int32 dian_pao_count = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dian_pao_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dian_pao_count_)));
          set_has_dian_pao_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_best_score;
        break;
      }

      // optional int32 best_score = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_score_)));
          set_has_best_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_listen_cards;
        break;
      }

      // repeated int32 listen_cards = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216, input, this->mutable_listen_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listen_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_listen_cards;
        if (input->ExpectTag(224)) goto parse_operate_type;
        break;
      }

      // optional int32 operate_type = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_gains;
        break;
      }

      // repeated int32 gains = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gains:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 264, input, this->mutable_gains())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gains())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_gains;
        if (input->ExpectTag(272)) goto parse_total_gains;
        break;
      }

      // optional int32 total_gains = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_gains:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_gains_)));
          set_has_total_gains();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_all_piao_score;
        break;
      }

      // optional int32 all_piao_score = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_piao_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_piao_score_)));
          set_has_all_piao_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_zimo_count;
        break;
      }

      // optional int32 zimo_count = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zimo_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zimo_count_)));
          set_has_zimo_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_dissolve_cnt;
        break;
      }

      // optional int32 dissolve_cnt = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolve_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissolve_cnt_)));
          set_has_dissolve_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_dissovle_state;
        break;
      }

      // optional int32 dissovle_state = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissovle_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissovle_state_)));
          set_has_dissovle_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_tid;
        break;
      }

      // optional bytes tid = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_skey;
        break;
      }

      // optional bytes skey = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_card_index;
        break;
      }

      // repeated int32 card_index = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 352, input, this->mutable_card_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_card_index;
        if (input->ExpectTag(362)) goto parse_cards_weave;
        break;
      }

      // repeated .proto.game.tagHandCards cards_weave = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards_weave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards_weave()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_cards_weave;
        if (input->ExpectTag(370)) goto parse_best_weave;
        break;
      }

      // repeated .proto.game.tagHandCards best_weave = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_best_weave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_best_weave()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_best_weave;
        if (input->ExpectTag(376)) goto parse_peng_chou;
        break;
      }

      // repeated bool peng_chou = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peng_chou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 376, input, this->mutable_peng_chou())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_peng_chou())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_peng_chou;
        if (input->ExpectTag(384)) goto parse_chi_chou;
        break;
      }

      // repeated bool chi_chou = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_chou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 384, input, this->mutable_chi_chou())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_chi_chou())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_chi_chou;
        if (input->ExpectTag(392)) goto parse_chou_wei;
        break;
      }

      // repeated bool chou_wei = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chou_wei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 392, input, this->mutable_chou_wei())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_chou_wei())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_chou_wei;
        if (input->ExpectTag(402)) goto parse_chicard_info;
        break;
      }

      // repeated .proto.game.tagChiCardInfo chicard_info = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chicard_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chicard_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_chicard_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ready(), output);
  }

  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional bytes avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->avatar(), output);
  }

  // optional int32 hu_xi = 8;
  if (has_hu_xi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hu_xi(), output);
  }

  // repeated .proto.game.tagWeaveCards weaves = 9;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->weaves(i), output);
  }

  // repeated int32 abandon_cards = 10;
  for (int i = 0; i < this->abandon_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->abandon_cards(i), output);
  }

  // repeated int32 abandon_type = 11;
  for (int i = 0; i < this->abandon_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->abandon_type(i), output);
  }

  // optional int32 niao = 12;
  if (has_niao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->niao(), output);
  }

  // optional int32 piao = 13;
  if (has_piao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->piao(), output);
  }

  // optional bool xiang_gong = 14;
  if (has_xiang_gong()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->xiang_gong(), output);
  }

  // optional int32 offline = 15;
  if (has_offline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->offline(), output);
  }

  // optional int32 action = 16;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->action(), output);
  }

  // repeated .proto.game.tagHandCards hand_cards = 17;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->hand_cards(i), output);
  }

  // optional int32 total_score = 18;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->total_score(), output);
  }

  // optional int32 total_huxi = 19;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->total_huxi(), output);
  }

  // optional int32 hong_count = 20;
  if (has_hong_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->hong_count(), output);
  }

  // optional int32 hei_count = 21;
  if (has_hei_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->hei_count(), output);
  }

  // optional int32 hand_count = 22;
  if (has_hand_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->hand_count(), output);
  }

  // optional int32 hu_count = 23;
  if (has_hu_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->hu_count(), output);
  }

  // optional int32 best_huxi = 24;
  if (has_best_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->best_huxi(), output);
  }

  // optional int32 dian_pao_count = 25;
  if (has_dian_pao_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->dian_pao_count(), output);
  }

  // optional int32 best_score = 26;
  if (has_best_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->best_score(), output);
  }

  // repeated int32 listen_cards = 27;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->listen_cards(i), output);
  }

  // optional int32 operate_type = 28;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->operate_type(), output);
  }

  // repeated int32 gains = 33;
  for (int i = 0; i < this->gains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      33, this->gains(i), output);
  }

  // optional int32 total_gains = 34;
  if (has_total_gains()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->total_gains(), output);
  }

  // optional int32 all_piao_score = 35;
  if (has_all_piao_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->all_piao_score(), output);
  }

  // optional int32 zimo_count = 36;
  if (has_zimo_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->zimo_count(), output);
  }

  // optional int32 dissolve_cnt = 40;
  if (has_dissolve_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->dissolve_cnt(), output);
  }

  // optional int32 dissovle_state = 41;
  if (has_dissovle_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->dissovle_state(), output);
  }

  // optional bytes tid = 42;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      42, this->tid(), output);
  }

  // optional bytes skey = 43;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      43, this->skey(), output);
  }

  // repeated int32 card_index = 44;
  for (int i = 0; i < this->card_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      44, this->card_index(i), output);
  }

  // repeated .proto.game.tagHandCards cards_weave = 45;
  for (int i = 0; i < this->cards_weave_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->cards_weave(i), output);
  }

  // repeated .proto.game.tagHandCards best_weave = 46;
  for (int i = 0; i < this->best_weave_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->best_weave(i), output);
  }

  // repeated bool peng_chou = 47;
  for (int i = 0; i < this->peng_chou_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      47, this->peng_chou(i), output);
  }

  // repeated bool chi_chou = 48;
  for (int i = 0; i < this->chi_chou_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      48, this->chi_chou(i), output);
  }

  // repeated bool chou_wei = 49;
  for (int i = 0; i < this->chou_wei_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      49, this->chou_wei(i), output);
  }

  // repeated .proto.game.tagChiCardInfo chicard_info = 50;
  for (int i = 0; i < this->chicard_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->chicard_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ready(), target);
  }

  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // optional bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional bytes avatar = 7;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->avatar(), target);
  }

  // optional int32 hu_xi = 8;
  if (has_hu_xi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hu_xi(), target);
  }

  // repeated .proto.game.tagWeaveCards weaves = 9;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->weaves(i), target);
  }

  // repeated int32 abandon_cards = 10;
  for (int i = 0; i < this->abandon_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->abandon_cards(i), target);
  }

  // repeated int32 abandon_type = 11;
  for (int i = 0; i < this->abandon_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->abandon_type(i), target);
  }

  // optional int32 niao = 12;
  if (has_niao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->niao(), target);
  }

  // optional int32 piao = 13;
  if (has_piao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->piao(), target);
  }

  // optional bool xiang_gong = 14;
  if (has_xiang_gong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->xiang_gong(), target);
  }

  // optional int32 offline = 15;
  if (has_offline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->offline(), target);
  }

  // optional int32 action = 16;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->action(), target);
  }

  // repeated .proto.game.tagHandCards hand_cards = 17;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->hand_cards(i), target);
  }

  // optional int32 total_score = 18;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->total_score(), target);
  }

  // optional int32 total_huxi = 19;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->total_huxi(), target);
  }

  // optional int32 hong_count = 20;
  if (has_hong_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->hong_count(), target);
  }

  // optional int32 hei_count = 21;
  if (has_hei_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->hei_count(), target);
  }

  // optional int32 hand_count = 22;
  if (has_hand_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->hand_count(), target);
  }

  // optional int32 hu_count = 23;
  if (has_hu_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->hu_count(), target);
  }

  // optional int32 best_huxi = 24;
  if (has_best_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->best_huxi(), target);
  }

  // optional int32 dian_pao_count = 25;
  if (has_dian_pao_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->dian_pao_count(), target);
  }

  // optional int32 best_score = 26;
  if (has_best_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->best_score(), target);
  }

  // repeated int32 listen_cards = 27;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(27, this->listen_cards(i), target);
  }

  // optional int32 operate_type = 28;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->operate_type(), target);
  }

  // repeated int32 gains = 33;
  for (int i = 0; i < this->gains_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(33, this->gains(i), target);
  }

  // optional int32 total_gains = 34;
  if (has_total_gains()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->total_gains(), target);
  }

  // optional int32 all_piao_score = 35;
  if (has_all_piao_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->all_piao_score(), target);
  }

  // optional int32 zimo_count = 36;
  if (has_zimo_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->zimo_count(), target);
  }

  // optional int32 dissolve_cnt = 40;
  if (has_dissolve_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->dissolve_cnt(), target);
  }

  // optional int32 dissovle_state = 41;
  if (has_dissovle_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->dissovle_state(), target);
  }

  // optional bytes tid = 42;
  if (has_tid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        42, this->tid(), target);
  }

  // optional bytes skey = 43;
  if (has_skey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        43, this->skey(), target);
  }

  // repeated int32 card_index = 44;
  for (int i = 0; i < this->card_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(44, this->card_index(i), target);
  }

  // repeated .proto.game.tagHandCards cards_weave = 45;
  for (int i = 0; i < this->cards_weave_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->cards_weave(i), target);
  }

  // repeated .proto.game.tagHandCards best_weave = 46;
  for (int i = 0; i < this->best_weave_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->best_weave(i), target);
  }

  // repeated bool peng_chou = 47;
  for (int i = 0; i < this->peng_chou_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(47, this->peng_chou(i), target);
  }

  // repeated bool chi_chou = 48;
  for (int i = 0; i < this->chi_chou_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(48, this->chi_chou(i), target);
  }

  // repeated bool chou_wei = 49;
  for (int i = 0; i < this->chou_wei_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(49, this->chou_wei(i), target);
  }

  // repeated .proto.game.tagChiCardInfo chicard_info = 50;
  for (int i = 0; i < this->chicard_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->chicard_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 ready = 3;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready());
    }

    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional bytes avatar = 7;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional int32 hu_xi = 8;
    if (has_hu_xi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_xi());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional int32 niao = 12;
    if (has_niao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->niao());
    }

    // optional int32 piao = 13;
    if (has_piao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piao());
    }

    // optional bool xiang_gong = 14;
    if (has_xiang_gong()) {
      total_size += 1 + 1;
    }

    // optional int32 offline = 15;
    if (has_offline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offline());
    }

    // optional int32 action = 16;
    if (has_action()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 total_score = 18;
    if (has_total_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_score());
    }

    // optional int32 total_huxi = 19;
    if (has_total_huxi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

    // optional int32 hong_count = 20;
    if (has_hong_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hong_count());
    }

    // optional int32 hei_count = 21;
    if (has_hei_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hei_count());
    }

    // optional int32 hand_count = 22;
    if (has_hand_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hand_count());
    }

    // optional int32 hu_count = 23;
    if (has_hu_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_count());
    }

    // optional int32 best_huxi = 24;
    if (has_best_huxi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_huxi());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 dian_pao_count = 25;
    if (has_dian_pao_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dian_pao_count());
    }

    // optional int32 best_score = 26;
    if (has_best_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_score());
    }

    // optional int32 operate_type = 28;
    if (has_operate_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

    // optional int32 total_gains = 34;
    if (has_total_gains()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_gains());
    }

    // optional int32 all_piao_score = 35;
    if (has_all_piao_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_piao_score());
    }

    // optional int32 zimo_count = 36;
    if (has_zimo_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zimo_count());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 dissolve_cnt = 40;
    if (has_dissolve_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissolve_cnt());
    }

    // optional int32 dissovle_state = 41;
    if (has_dissovle_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissovle_state());
    }

    // optional bytes tid = 42;
    if (has_tid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tid());
    }

    // optional bytes skey = 43;
    if (has_skey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->skey());
    }

  }
  // repeated .proto.game.tagWeaveCards weaves = 9;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  // repeated int32 abandon_cards = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->abandon_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->abandon_cards(i));
    }
    total_size += 1 * this->abandon_cards_size() + data_size;
  }

  // repeated int32 abandon_type = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->abandon_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->abandon_type(i));
    }
    total_size += 1 * this->abandon_type_size() + data_size;
  }

  // repeated .proto.game.tagHandCards hand_cards = 17;
  total_size += 2 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated int32 listen_cards = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listen_cards(i));
    }
    total_size += 2 * this->listen_cards_size() + data_size;
  }

  // repeated int32 gains = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->gains_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gains(i));
    }
    total_size += 2 * this->gains_size() + data_size;
  }

  // repeated int32 card_index = 44;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_index(i));
    }
    total_size += 2 * this->card_index_size() + data_size;
  }

  // repeated .proto.game.tagHandCards cards_weave = 45;
  total_size += 2 * this->cards_weave_size();
  for (int i = 0; i < this->cards_weave_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards_weave(i));
  }

  // repeated .proto.game.tagHandCards best_weave = 46;
  total_size += 2 * this->best_weave_size();
  for (int i = 0; i < this->best_weave_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->best_weave(i));
  }

  // repeated bool peng_chou = 47;
  {
    int data_size = 0;
    data_size = 1 * this->peng_chou_size();
    total_size += 2 * this->peng_chou_size() + data_size;
  }

  // repeated bool chi_chou = 48;
  {
    int data_size = 0;
    data_size = 1 * this->chi_chou_size();
    total_size += 2 * this->chi_chou_size() + data_size;
  }

  // repeated bool chou_wei = 49;
  {
    int data_size = 0;
    data_size = 1 * this->chou_wei_size();
    total_size += 2 * this->chou_wei_size() + data_size;
  }

  // repeated .proto.game.tagChiCardInfo chicard_info = 50;
  total_size += 2 * this->chicard_info_size();
  for (int i = 0; i < this->chicard_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chicard_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPlayers::MergeFrom(const tagPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaves_.MergeFrom(from.weaves_);
  abandon_cards_.MergeFrom(from.abandon_cards_);
  abandon_type_.MergeFrom(from.abandon_type_);
  hand_cards_.MergeFrom(from.hand_cards_);
  listen_cards_.MergeFrom(from.listen_cards_);
  gains_.MergeFrom(from.gains_);
  card_index_.MergeFrom(from.card_index_);
  cards_weave_.MergeFrom(from.cards_weave_);
  best_weave_.MergeFrom(from.best_weave_);
  peng_chou_.MergeFrom(from.peng_chou_);
  chi_chou_.MergeFrom(from.chi_chou_);
  chou_wei_.MergeFrom(from.chou_wei_);
  chicard_info_.MergeFrom(from.chicard_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_hu_xi()) {
      set_hu_xi(from.hu_xi());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_niao()) {
      set_niao(from.niao());
    }
    if (from.has_piao()) {
      set_piao(from.piao());
    }
    if (from.has_xiang_gong()) {
      set_xiang_gong(from.xiang_gong());
    }
    if (from.has_offline()) {
      set_offline(from.offline());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
    if (from.has_hong_count()) {
      set_hong_count(from.hong_count());
    }
    if (from.has_hei_count()) {
      set_hei_count(from.hei_count());
    }
    if (from.has_hand_count()) {
      set_hand_count(from.hand_count());
    }
    if (from.has_hu_count()) {
      set_hu_count(from.hu_count());
    }
    if (from.has_best_huxi()) {
      set_best_huxi(from.best_huxi());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_dian_pao_count()) {
      set_dian_pao_count(from.dian_pao_count());
    }
    if (from.has_best_score()) {
      set_best_score(from.best_score());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_total_gains()) {
      set_total_gains(from.total_gains());
    }
    if (from.has_all_piao_score()) {
      set_all_piao_score(from.all_piao_score());
    }
    if (from.has_zimo_count()) {
      set_zimo_count(from.zimo_count());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_dissolve_cnt()) {
      set_dissolve_cnt(from.dissolve_cnt());
    }
    if (from.has_dissovle_state()) {
      set_dissovle_state(from.dissovle_state());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_skey()) {
      set_skey(from.skey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPlayers::CopyFrom(const tagPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPlayers::IsInitialized() const {

  return true;
}

void tagPlayers::Swap(tagPlayers* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(ready_, other->ready_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(avatar_, other->avatar_);
    std::swap(hu_xi_, other->hu_xi_);
    weaves_.Swap(&other->weaves_);
    abandon_cards_.Swap(&other->abandon_cards_);
    abandon_type_.Swap(&other->abandon_type_);
    std::swap(niao_, other->niao_);
    std::swap(piao_, other->piao_);
    std::swap(xiang_gong_, other->xiang_gong_);
    std::swap(offline_, other->offline_);
    std::swap(action_, other->action_);
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(total_score_, other->total_score_);
    std::swap(total_huxi_, other->total_huxi_);
    std::swap(hong_count_, other->hong_count_);
    std::swap(hei_count_, other->hei_count_);
    std::swap(hand_count_, other->hand_count_);
    std::swap(hu_count_, other->hu_count_);
    std::swap(best_huxi_, other->best_huxi_);
    std::swap(dian_pao_count_, other->dian_pao_count_);
    std::swap(best_score_, other->best_score_);
    listen_cards_.Swap(&other->listen_cards_);
    std::swap(operate_type_, other->operate_type_);
    gains_.Swap(&other->gains_);
    std::swap(total_gains_, other->total_gains_);
    std::swap(all_piao_score_, other->all_piao_score_);
    std::swap(zimo_count_, other->zimo_count_);
    std::swap(dissolve_cnt_, other->dissolve_cnt_);
    std::swap(dissovle_state_, other->dissovle_state_);
    std::swap(tid_, other->tid_);
    std::swap(skey_, other->skey_);
    card_index_.Swap(&other->card_index_);
    cards_weave_.Swap(&other->cards_weave_);
    best_weave_.Swap(&other->best_weave_);
    peng_chou_.Swap(&other->peng_chou_);
    chi_chou_.Swap(&other->chi_chou_);
    chou_wei_.Swap(&other->chou_wei_);
    chicard_info_.Swap(&other->chicard_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPlayers_descriptor_;
  metadata.reflection = tagPlayers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagDissolveRoomInfo::kStateFieldNumber;
const int tagDissolveRoomInfo::kUidFieldNumber;
const int tagDissolveRoomInfo::kVotersUidFieldNumber;
const int tagDissolveRoomInfo::kPlayersFieldNumber;
const int tagDissolveRoomInfo::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

tagDissolveRoomInfo::tagDissolveRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagDissolveRoomInfo::InitAsDefaultInstance() {
}

tagDissolveRoomInfo::tagDissolveRoomInfo(const tagDissolveRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagDissolveRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  uid_ = 0;
  remain_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagDissolveRoomInfo::~tagDissolveRoomInfo() {
  SharedDtor();
}

void tagDissolveRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagDissolveRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagDissolveRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagDissolveRoomInfo_descriptor_;
}

const tagDissolveRoomInfo& tagDissolveRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagDissolveRoomInfo* tagDissolveRoomInfo::default_instance_ = NULL;

tagDissolveRoomInfo* tagDissolveRoomInfo::New() const {
  return new tagDissolveRoomInfo;
}

void tagDissolveRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    uid_ = 0;
    remain_time_ = 0;
  }
  voters_uid_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagDissolveRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_voters_uid;
        break;
      }

      // repeated int32 voters_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voters_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_voters_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_voters_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_voters_uid;
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated .proto.game.tagPlayers players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        if (input->ExpectTag(40)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagDissolveRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // repeated int32 voters_uid = 3;
  for (int i = 0; i < this->voters_uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->voters_uid(i), output);
  }

  // repeated .proto.game.tagPlayers players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  // optional int32 remain_time = 5;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagDissolveRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // repeated int32 voters_uid = 3;
  for (int i = 0; i < this->voters_uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->voters_uid(i), target);
  }

  // repeated .proto.game.tagPlayers players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->players(i), target);
  }

  // optional int32 remain_time = 5;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagDissolveRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 remain_time = 5;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

  }
  // repeated int32 voters_uid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->voters_uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->voters_uid(i));
    }
    total_size += 1 * this->voters_uid_size() + data_size;
  }

  // repeated .proto.game.tagPlayers players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagDissolveRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagDissolveRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagDissolveRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagDissolveRoomInfo::MergeFrom(const tagDissolveRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  voters_uid_.MergeFrom(from.voters_uid_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagDissolveRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagDissolveRoomInfo::CopyFrom(const tagDissolveRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagDissolveRoomInfo::IsInitialized() const {

  return true;
}

void tagDissolveRoomInfo::Swap(tagDissolveRoomInfo* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(uid_, other->uid_);
    voters_uid_.Swap(&other->voters_uid_);
    players_.Swap(&other->players_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagDissolveRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagDissolveRoomInfo_descriptor_;
  metadata.reflection = tagDissolveRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGain::kScoreFieldNumber;
#endif  // !_MSC_VER

tagGain::tagGain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagGain::InitAsDefaultInstance() {
}

tagGain::tagGain(const tagGain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagGain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGain::~tagGain() {
  SharedDtor();
}

void tagGain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGain_descriptor_;
}

const tagGain& tagGain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagGain* tagGain::default_instance_ = NULL;

tagGain* tagGain::New() const {
  return new tagGain;
}

void tagGain::Clear() {
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagGain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagGain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagGain::ByteSize() const {
  int total_size = 0;

  // repeated int32 score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGain::MergeFrom(const tagGain& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGain::CopyFrom(const tagGain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGain::IsInitialized() const {

  return true;
}

void tagGain::Swap(tagGain* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGain_descriptor_;
  metadata.reflection = tagGain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckTableInfo::kSeatidFieldNumber;
const int AckTableInfo::kStateFieldNumber;
const int AckTableInfo::kOperateTimerStampFieldNumber;
const int AckTableInfo::kLeftCardCountFieldNumber;
const int AckTableInfo::kBankerUserFieldNumber;
const int AckTableInfo::kCurrentUserFieldNumber;
const int AckTableInfo::kCurrentCardFieldNumber;
const int AckTableInfo::kCurrentOutcardUserFieldNumber;
const int AckTableInfo::kCurrentOutcardFieldNumber;
const int AckTableInfo::kIsDispatchFieldNumber;
const int AckTableInfo::kCardOperatedFieldNumber;
const int AckTableInfo::kIsDaNiaoFieldNumber;
const int AckTableInfo::kIsOutCardFieldNumber;
const int AckTableInfo::kIsFirstCardFieldNumber;
const int AckTableInfo::kHuangCountFieldNumber;
const int AckTableInfo::kTakeInFieldNumber;
const int AckTableInfo::kPlayIdFieldNumber;
const int AckTableInfo::kBaseHuxiFieldNumber;
const int AckTableInfo::kRoomUserIdFieldNumber;
const int AckTableInfo::kNiaoCountFieldNumber;
const int AckTableInfo::kPiaoCountFieldNumber;
const int AckTableInfo::kUserActionFieldNumber;
const int AckTableInfo::kIsFirstOperateFieldNumber;
const int AckTableInfo::kResponseFieldNumber;
const int AckTableInfo::kPerformActionFieldNumber;
const int AckTableInfo::kHandCardsFieldNumber;
const int AckTableInfo::kListenCardsFieldNumber;
const int AckTableInfo::kTotalHuxiFieldNumber;
const int AckTableInfo::kChicardInfoFieldNumber;
const int AckTableInfo::kStandMoneyFieldNumber;
const int AckTableInfo::kBaseMoneyFieldNumber;
const int AckTableInfo::kDissolveRoomInfoFieldNumber;
const int AckTableInfo::kPlayersFieldNumber;
const int AckTableInfo::kOfflineInfoFieldNumber;
const int AckTableInfo::kOfflineMaxCountFieldNumber;
const int AckTableInfo::kGamePlayerFieldNumber;
const int AckTableInfo::kGameNameFieldNumber;
const int AckTableInfo::kDongZhangFieldNumber;
const int AckTableInfo::kTianHu3Ti5KanFieldNumber;
const int AckTableInfo::kIsTianHu3Ti5KanFieldNumber;
const int AckTableInfo::kHuxiToTunFieldNumber;
const int AckTableInfo::kCurrentNumFieldNumber;
const int AckTableInfo::kInningsFieldNumber;
const int AckTableInfo::kIsMingXiaoFieldNumber;
const int AckTableInfo::kRepertoryCardsFieldNumber;
const int AckTableInfo::kWeaveHuxiFieldNumber;
const int AckTableInfo::kShowHuxiFieldNumber;
const int AckTableInfo::kHandsHuxiFieldNumber;
const int AckTableInfo::kDispatchFieldNumber;
const int AckTableInfo::kDispatchHuFieldNumber;
const int AckTableInfo::kTiweipaoHuFieldNumber;
const int AckTableInfo::kWeiHuFieldNumber;
const int AckTableInfo::kTiCardFieldNumber;
const int AckTableInfo::kIsWeitiCardFieldNumber;
const int AckTableInfo::kPaoCardFieldNumber;
const int AckTableInfo::kFirstCardFieldNumber;
const int AckTableInfo::kAfterWeaveFieldNumber;
const int AckTableInfo::kUserResponsesFieldNumber;
const int AckTableInfo::kUserActionsFieldNumber;
const int AckTableInfo::kUserPrerformFieldNumber;
const int AckTableInfo::kChiKindFieldNumber;
const int AckTableInfo::kSecondChiKindFieldNumber;
const int AckTableInfo::kThirdChiKindFieldNumber;
const int AckTableInfo::kXiangGongFieldNumber;
const int AckTableInfo::kCommonBestFieldNumber;
const int AckTableInfo::kTidFieldNumber;
const int AckTableInfo::kRoomStatusFieldNumber;
const int AckTableInfo::kDissolveApplyerFieldNumber;
const int AckTableInfo::kDissovleStateFieldNumber;
const int AckTableInfo::kIsDissolvedFieldNumber;
const int AckTableInfo::kBankerCardFieldNumber;
const int AckTableInfo::kIsPiaoFieldNumber;
const int AckTableInfo::kVideoStrFieldNumber;
const int AckTableInfo::kCurTimerFieldNumber;
const int AckTableInfo::kUserDongZhangFieldNumber;
const int AckTableInfo::kIsWithMaohuFieldNumber;
const int AckTableInfo::kIsZimoFanFieldNumber;
const int AckTableInfo::kIsMustHuFieldNumber;
const int AckTableInfo::kIsHhdFieldNumber;
const int AckTableInfo::kGainsFieldNumber;
const int AckTableInfo::kTp15ZhangFieldNumber;
const int AckTableInfo::kBMustHuFieldNumber;
const int AckTableInfo::kAllNumFieldNumber;
#endif  // !_MSC_VER

AckTableInfo::AckTableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckTableInfo::InitAsDefaultInstance() {
  dissolve_room_info_ = const_cast< ::proto::game::tagDissolveRoomInfo*>(&::proto::game::tagDissolveRoomInfo::default_instance());
}

AckTableInfo::AckTableInfo(const AckTableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckTableInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  state_ = 0;
  operate_timer_stamp_ = 0;
  left_card_count_ = 0;
  banker_user_ = 0;
  current_user_ = 0;
  current_card_ = 0;
  current_outcard_user_ = 0;
  current_outcard_ = 0;
  is_dispatch_ = false;
  card_operated_ = false;
  is_da_niao_ = false;
  is_out_card_ = false;
  is_first_card_ = false;
  huang_count_ = 0;
  take_in_ = 0;
  play_id_ = 0;
  base_huxi_ = 0;
  room_user_id_ = 0;
  user_action_ = 0;
  is_first_operate_ = false;
  response_ = false;
  perform_action_ = 0;
  total_huxi_ = 0;
  stand_money_ = 0;
  base_money_ = 0;
  dissolve_room_info_ = NULL;
  offline_max_count_ = 0;
  game_player_ = 0;
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dong_zhang_ = false;
  tian_hu_3ti5kan_ = false;
  is_tian_hu_3ti5kan_ = false;
  huxi_to_tun_ = 0;
  current_num_ = 0;
  innings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_ming_xiao_ = 0;
  dispatch_ = false;
  dispatch_hu_ = false;
  tiweipao_hu_ = false;
  wei_hu_ = false;
  ti_card_ = false;
  is_weiti_card_ = false;
  pao_card_ = false;
  first_card_ = false;
  after_weave_ = false;
  tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_status_ = 0;
  dissolve_applyer_ = 0;
  dissovle_state_ = 0;
  is_dissolved_ = 0;
  banker_card_ = 0;
  is_piao_ = 0;
  video_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cur_timer_ = 0;
  is_with_maohu_ = false;
  is_zimo_fan_ = false;
  is_must_hu_ = 0;
  is_hhd_ = false;
  tp_15_zhang_ = false;
  b_must_hu_ = false;
  all_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckTableInfo::~AckTableInfo() {
  SharedDtor();
}

void AckTableInfo::SharedDtor() {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (innings_ != &::google::protobuf::internal::kEmptyString) {
    delete innings_;
  }
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (video_str_ != &::google::protobuf::internal::kEmptyString) {
    delete video_str_;
  }
  if (this != default_instance_) {
    delete dissolve_room_info_;
  }
}

void AckTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckTableInfo_descriptor_;
}

const AckTableInfo& AckTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckTableInfo* AckTableInfo::default_instance_ = NULL;

AckTableInfo* AckTableInfo::New() const {
  return new AckTableInfo;
}

void AckTableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    state_ = 0;
    operate_timer_stamp_ = 0;
    left_card_count_ = 0;
    banker_user_ = 0;
    current_user_ = 0;
    current_card_ = 0;
    current_outcard_user_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    current_outcard_ = 0;
    is_dispatch_ = false;
    card_operated_ = false;
    is_da_niao_ = false;
    is_out_card_ = false;
    is_first_card_ = false;
    huang_count_ = 0;
    take_in_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    play_id_ = 0;
    base_huxi_ = 0;
    room_user_id_ = 0;
    user_action_ = 0;
    is_first_operate_ = false;
    response_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    perform_action_ = 0;
    total_huxi_ = 0;
    stand_money_ = 0;
    base_money_ = 0;
    if (has_dissolve_room_info()) {
      if (dissolve_room_info_ != NULL) dissolve_room_info_->::proto::game::tagDissolveRoomInfo::Clear();
    }
  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    offline_max_count_ = 0;
    game_player_ = 0;
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::kEmptyString) {
        game_name_->clear();
      }
    }
    dong_zhang_ = false;
    tian_hu_3ti5kan_ = false;
    is_tian_hu_3ti5kan_ = false;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    huxi_to_tun_ = 0;
    current_num_ = 0;
    if (has_innings()) {
      if (innings_ != &::google::protobuf::internal::kEmptyString) {
        innings_->clear();
      }
    }
    is_ming_xiao_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    dispatch_ = false;
    dispatch_hu_ = false;
    tiweipao_hu_ = false;
    wei_hu_ = false;
    ti_card_ = false;
    is_weiti_card_ = false;
    pao_card_ = false;
    first_card_ = false;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    after_weave_ = false;
  }
  if (_has_bits_[65 / 32] & (0xffu << (65 % 32))) {
    if (has_tid()) {
      if (tid_ != &::google::protobuf::internal::kEmptyString) {
        tid_->clear();
      }
    }
    room_status_ = 0;
    dissolve_applyer_ = 0;
    dissovle_state_ = 0;
    is_dissolved_ = 0;
    banker_card_ = 0;
    is_piao_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (has_video_str()) {
      if (video_str_ != &::google::protobuf::internal::kEmptyString) {
        video_str_->clear();
      }
    }
    cur_timer_ = 0;
    is_with_maohu_ = false;
    is_zimo_fan_ = false;
    is_must_hu_ = 0;
    is_hhd_ = false;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    tp_15_zhang_ = false;
    b_must_hu_ = false;
    all_num_ = 0;
  }
  niao_count_.Clear();
  piao_count_.Clear();
  hand_cards_.Clear();
  listen_cards_.Clear();
  chicard_info_.Clear();
  players_.Clear();
  offline_info_.Clear();
  repertory_cards_.Clear();
  weave_huxi_.Clear();
  show_huxi_.Clear();
  hands_huxi_.Clear();
  user_responses_.Clear();
  user_actions_.Clear();
  user_prerform_.Clear();
  chi_kind_.Clear();
  second_chi_kind_.Clear();
  third_chi_kind_.Clear();
  xiang_gong_.Clear();
  common_best_.Clear();
  user_dong_zhang_.Clear();
  gains_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_timer_stamp;
        break;
      }

      // optional int32 operate_timer_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_timer_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_timer_stamp_)));
          set_has_operate_timer_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_card_count;
        break;
      }

      // optional int32 left_card_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_banker_user;
        break;
      }

      // optional int32 banker_user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_user_)));
          set_has_banker_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_current_user;
        break;
      }

      // optional int32 current_user = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_user_)));
          set_has_current_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_current_card;
        break;
      }

      // optional int32 current_card = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_card_)));
          set_has_current_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_current_outcard_user;
        break;
      }

      // optional int32 current_outcard_user = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_outcard_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_outcard_user_)));
          set_has_current_outcard_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_current_outcard;
        break;
      }

      // optional int32 current_outcard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_outcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_outcard_)));
          set_has_current_outcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_dispatch;
        break;
      }

      // optional bool is_dispatch = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dispatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dispatch_)));
          set_has_is_dispatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_operated;
        break;
      }

      // optional bool card_operated = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_operated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &card_operated_)));
          set_has_card_operated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_da_niao;
        break;
      }

      // optional bool is_da_niao = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_da_niao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_da_niao_)));
          set_has_is_da_niao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_out_card;
        break;
      }

      // optional bool is_out_card = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_out_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_card_)));
          set_has_is_out_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_first_card;
        break;
      }

      // optional bool is_first_card = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_first_card_)));
          set_has_is_first_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_huang_count;
        break;
      }

      // optional int32 huang_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huang_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huang_count_)));
          set_has_huang_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_take_in;
        break;
      }

      // optional int32 take_in = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &take_in_)));
          set_has_take_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_play_id;
        break;
      }

      // optional int32 play_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
          set_has_play_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_base_huxi;
        break;
      }

      // optional int32 base_huxi = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_huxi_)));
          set_has_base_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_room_user_id;
        break;
      }

      // optional int32 room_user_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_user_id_)));
          set_has_room_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_niao_count;
        break;
      }

      // repeated int32 niao_count = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_niao_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_niao_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_niao_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_niao_count;
        if (input->ExpectTag(168)) goto parse_piao_count;
        break;
      }

      // repeated int32 piao_count = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piao_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_piao_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piao_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_piao_count;
        if (input->ExpectTag(176)) goto parse_user_action;
        break;
      }

      // optional int32 user_action = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_action_)));
          set_has_user_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_is_first_operate;
        break;
      }

      // optional bool is_first_operate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_first_operate_)));
          set_has_is_first_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_response;
        break;
      }

      // optional bool response = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_perform_action;
        break;
      }

      // optional int32 perform_action = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perform_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perform_action_)));
          set_has_perform_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_hand_cards;
        break;
      }

      // repeated .proto.game.tagHandCards hand_cards = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_hand_cards;
        if (input->ExpectTag(216)) goto parse_listen_cards;
        break;
      }

      // repeated int32 listen_cards = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216, input, this->mutable_listen_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listen_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_listen_cards;
        if (input->ExpectTag(224)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_chicard_info;
        break;
      }

      // repeated .proto.game.tagChiCardInfo chicard_info = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chicard_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chicard_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_chicard_info;
        if (input->ExpectTag(240)) goto parse_stand_money;
        break;
      }

      // optional int32 stand_money = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stand_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stand_money_)));
          set_has_stand_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_base_money;
        break;
      }

      // optional int32 base_money = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_money_)));
          set_has_base_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_dissolve_room_info;
        break;
      }

      // optional .proto.game.tagDissolveRoomInfo dissolve_room_info = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dissolve_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dissolve_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_players;
        break;
      }

      // repeated .proto.game.tagPlayers players = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_players;
        if (input->ExpectTag(274)) goto parse_offline_info;
        break;
      }

      // repeated bytes offline_info = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offline_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_offline_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_offline_info;
        if (input->ExpectTag(280)) goto parse_offline_max_count;
        break;
      }

      // optional int32 offline_max_count = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offline_max_count_)));
          set_has_offline_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_game_player;
        break;
      }

      // optional int32 game_player = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_player_)));
          set_has_game_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_game_name;
        break;
      }

      // optional bytes game_name = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_dong_zhang;
        break;
      }

      // optional bool dong_zhang = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dong_zhang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dong_zhang_)));
          set_has_dong_zhang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_tian_hu_3ti5kan;
        break;
      }

      // optional bool tian_hu_3ti5kan = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tian_hu_3ti5kan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tian_hu_3ti5kan_)));
          set_has_tian_hu_3ti5kan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_is_tian_hu_3ti5kan;
        break;
      }

      // optional bool is_tian_hu_3ti5kan = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_tian_hu_3ti5kan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tian_hu_3ti5kan_)));
          set_has_is_tian_hu_3ti5kan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_huxi_to_tun;
        break;
      }

      // optional int32 huxi_to_tun = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huxi_to_tun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huxi_to_tun_)));
          set_has_huxi_to_tun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_current_num;
        break;
      }

      // optional int32 current_num = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_num_)));
          set_has_current_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_innings;
        break;
      }

      // optional bytes innings = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_innings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_innings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_is_ming_xiao;
        break;
      }

      // optional int32 is_ming_xiao = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ming_xiao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_ming_xiao_)));
          set_has_is_ming_xiao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_repertory_cards;
        break;
      }

      // repeated int32 repertory_cards = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repertory_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 432, input, this->mutable_repertory_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_repertory_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_repertory_cards;
        if (input->ExpectTag(440)) goto parse_weave_huxi;
        break;
      }

      // repeated int32 weave_huxi = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weave_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 440, input, this->mutable_weave_huxi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weave_huxi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_weave_huxi;
        if (input->ExpectTag(448)) goto parse_show_huxi;
        break;
      }

      // repeated int32 show_huxi = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 448, input, this->mutable_show_huxi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_show_huxi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_show_huxi;
        if (input->ExpectTag(456)) goto parse_hands_huxi;
        break;
      }

      // repeated int32 hands_huxi = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hands_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 456, input, this->mutable_hands_huxi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hands_huxi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_hands_huxi;
        if (input->ExpectTag(464)) goto parse_dispatch;
        break;
      }

      // optional bool dispatch = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dispatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dispatch_)));
          set_has_dispatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_dispatch_hu;
        break;
      }

      // optional bool dispatch_hu = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dispatch_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dispatch_hu_)));
          set_has_dispatch_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_tiweipao_hu;
        break;
      }

      // optional bool tiweipao_hu = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiweipao_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tiweipao_hu_)));
          set_has_tiweipao_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_wei_hu;
        break;
      }

      // optional bool wei_hu = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wei_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wei_hu_)));
          set_has_wei_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_ti_card;
        break;
      }

      // optional bool ti_card = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ti_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ti_card_)));
          set_has_ti_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_is_weiti_card;
        break;
      }

      // optional bool is_weiti_card = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_weiti_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_weiti_card_)));
          set_has_is_weiti_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_pao_card;
        break;
      }

      // optional bool pao_card = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pao_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pao_card_)));
          set_has_pao_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_first_card;
        break;
      }

      // optional bool first_card = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_card_)));
          set_has_first_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_after_weave;
        break;
      }

      // optional bool after_weave = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_after_weave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &after_weave_)));
          set_has_after_weave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_user_responses;
        break;
      }

      // repeated bool user_responses = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_responses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 544, input, this->mutable_user_responses())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_user_responses())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_user_responses;
        if (input->ExpectTag(552)) goto parse_user_actions;
        break;
      }

      // repeated int32 user_actions = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 552, input, this->mutable_user_actions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_actions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_user_actions;
        if (input->ExpectTag(560)) goto parse_user_prerform;
        break;
      }

      // repeated int32 user_prerform = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_prerform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 560, input, this->mutable_user_prerform())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_prerform())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_user_prerform;
        if (input->ExpectTag(568)) goto parse_chi_kind;
        break;
      }

      // repeated int32 chi_kind = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 568, input, this->mutable_chi_kind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chi_kind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_chi_kind;
        if (input->ExpectTag(576)) goto parse_second_chi_kind;
        break;
      }

      // repeated int32 second_chi_kind = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_chi_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 576, input, this->mutable_second_chi_kind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_second_chi_kind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_second_chi_kind;
        if (input->ExpectTag(584)) goto parse_third_chi_kind;
        break;
      }

      // repeated int32 third_chi_kind = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_third_chi_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 584, input, this->mutable_third_chi_kind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_third_chi_kind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_third_chi_kind;
        if (input->ExpectTag(592)) goto parse_xiang_gong;
        break;
      }

      // repeated bool xiang_gong = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xiang_gong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 592, input, this->mutable_xiang_gong())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_xiang_gong())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_xiang_gong;
        if (input->ExpectTag(600)) goto parse_common_best;
        break;
      }

      // repeated bool common_best = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_common_best:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 600, input, this->mutable_common_best())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_common_best())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_common_best;
        if (input->ExpectTag(610)) goto parse_tid;
        break;
      }

      // optional bytes tid = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_room_status;
        break;
      }

      // optional int32 room_status = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_status_)));
          set_has_room_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_dissolve_applyer;
        break;
      }

      // optional int32 dissolve_applyer = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolve_applyer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissolve_applyer_)));
          set_has_dissolve_applyer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_dissovle_state;
        break;
      }

      // optional int32 dissovle_state = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissovle_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissovle_state_)));
          set_has_dissovle_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_is_dissolved;
        break;
      }

      // optional int32 is_dissolved = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dissolved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_dissolved_)));
          set_has_is_dissolved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_banker_card;
        break;
      }

      // optional int32 banker_card = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_card_)));
          set_has_banker_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_is_piao;
        break;
      }

      // optional int32 is_piao = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_piao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_piao_)));
          set_has_is_piao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(666)) goto parse_video_str;
        break;
      }

      // optional bytes video_str = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_video_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_cur_timer;
        break;
      }

      // optional int32 cur_timer = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_timer_)));
          set_has_cur_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_user_dong_zhang;
        break;
      }

      // repeated bool user_dong_zhang = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_dong_zhang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 680, input, this->mutable_user_dong_zhang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_user_dong_zhang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_user_dong_zhang;
        if (input->ExpectTag(688)) goto parse_is_with_maohu;
        break;
      }

      // optional bool is_with_maohu = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_with_maohu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_with_maohu_)));
          set_has_is_with_maohu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(696)) goto parse_is_zimo_fan;
        break;
      }

      // optional bool is_zimo_fan = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_zimo_fan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_zimo_fan_)));
          set_has_is_zimo_fan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_is_must_hu;
        break;
      }

      // optional int32 is_must_hu = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_must_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_must_hu_)));
          set_has_is_must_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(712)) goto parse_is_hhd;
        break;
      }

      // optional bool is_hhd = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hhd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hhd_)));
          set_has_is_hhd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(938)) goto parse_gains;
        break;
      }

      // repeated .proto.game.tagGain gains = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gains:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gains()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(938)) goto parse_gains;
        if (input->ExpectTag(944)) goto parse_tp_15_zhang;
        break;
      }

      // optional bool tp_15_zhang = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tp_15_zhang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tp_15_zhang_)));
          set_has_tp_15_zhang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(952)) goto parse_b_must_hu;
        break;
      }

      // optional bool b_must_hu = 119;
      case 119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_must_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_must_hu_)));
          set_has_b_must_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(960)) goto parse_all_num;
        break;
      }

      // optional int32 all_num = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_num_)));
          set_has_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 operate_timer_stamp = 3;
  if (has_operate_timer_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operate_timer_stamp(), output);
  }

  // optional int32 left_card_count = 4;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_card_count(), output);
  }

  // optional int32 banker_user = 5;
  if (has_banker_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->banker_user(), output);
  }

  // optional int32 current_user = 6;
  if (has_current_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->current_user(), output);
  }

  // optional int32 current_card = 7;
  if (has_current_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_card(), output);
  }

  // optional int32 current_outcard_user = 8;
  if (has_current_outcard_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->current_outcard_user(), output);
  }

  // optional int32 current_outcard = 9;
  if (has_current_outcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->current_outcard(), output);
  }

  // optional bool is_dispatch = 10;
  if (has_is_dispatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_dispatch(), output);
  }

  // optional bool card_operated = 11;
  if (has_card_operated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->card_operated(), output);
  }

  // optional bool is_da_niao = 12;
  if (has_is_da_niao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_da_niao(), output);
  }

  // optional bool is_out_card = 13;
  if (has_is_out_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_out_card(), output);
  }

  // optional bool is_first_card = 14;
  if (has_is_first_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_first_card(), output);
  }

  // optional int32 huang_count = 15;
  if (has_huang_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->huang_count(), output);
  }

  // optional int32 take_in = 16;
  if (has_take_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->take_in(), output);
  }

  // optional int32 play_id = 17;
  if (has_play_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->play_id(), output);
  }

  // optional int32 base_huxi = 18;
  if (has_base_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->base_huxi(), output);
  }

  // optional int32 room_user_id = 19;
  if (has_room_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->room_user_id(), output);
  }

  // repeated int32 niao_count = 20;
  for (int i = 0; i < this->niao_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->niao_count(i), output);
  }

  // repeated int32 piao_count = 21;
  for (int i = 0; i < this->piao_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->piao_count(i), output);
  }

  // optional int32 user_action = 22;
  if (has_user_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->user_action(), output);
  }

  // optional bool is_first_operate = 23;
  if (has_is_first_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_first_operate(), output);
  }

  // optional bool response = 24;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->response(), output);
  }

  // optional int32 perform_action = 25;
  if (has_perform_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->perform_action(), output);
  }

  // repeated .proto.game.tagHandCards hand_cards = 26;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->hand_cards(i), output);
  }

  // repeated int32 listen_cards = 27;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->listen_cards(i), output);
  }

  // optional int32 total_huxi = 28;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->total_huxi(), output);
  }

  // repeated .proto.game.tagChiCardInfo chicard_info = 29;
  for (int i = 0; i < this->chicard_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->chicard_info(i), output);
  }

  // optional int32 stand_money = 30;
  if (has_stand_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->stand_money(), output);
  }

  // optional int32 base_money = 31;
  if (has_base_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->base_money(), output);
  }

  // optional .proto.game.tagDissolveRoomInfo dissolve_room_info = 32;
  if (has_dissolve_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->dissolve_room_info(), output);
  }

  // repeated .proto.game.tagPlayers players = 33;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->players(i), output);
  }

  // repeated bytes offline_info = 34;
  for (int i = 0; i < this->offline_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      34, this->offline_info(i), output);
  }

  // optional int32 offline_max_count = 35;
  if (has_offline_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->offline_max_count(), output);
  }

  // optional int32 game_player = 36;
  if (has_game_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->game_player(), output);
  }

  // optional bytes game_name = 37;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      37, this->game_name(), output);
  }

  // optional bool dong_zhang = 38;
  if (has_dong_zhang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->dong_zhang(), output);
  }

  // optional bool tian_hu_3ti5kan = 39;
  if (has_tian_hu_3ti5kan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->tian_hu_3ti5kan(), output);
  }

  // optional bool is_tian_hu_3ti5kan = 40;
  if (has_is_tian_hu_3ti5kan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->is_tian_hu_3ti5kan(), output);
  }

  // optional int32 huxi_to_tun = 50;
  if (has_huxi_to_tun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->huxi_to_tun(), output);
  }

  // optional int32 current_num = 51;
  if (has_current_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->current_num(), output);
  }

  // optional bytes innings = 52;
  if (has_innings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      52, this->innings(), output);
  }

  // optional int32 is_ming_xiao = 53;
  if (has_is_ming_xiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->is_ming_xiao(), output);
  }

  // repeated int32 repertory_cards = 54;
  for (int i = 0; i < this->repertory_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      54, this->repertory_cards(i), output);
  }

  // repeated int32 weave_huxi = 55;
  for (int i = 0; i < this->weave_huxi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      55, this->weave_huxi(i), output);
  }

  // repeated int32 show_huxi = 56;
  for (int i = 0; i < this->show_huxi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      56, this->show_huxi(i), output);
  }

  // repeated int32 hands_huxi = 57;
  for (int i = 0; i < this->hands_huxi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      57, this->hands_huxi(i), output);
  }

  // optional bool dispatch = 58;
  if (has_dispatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->dispatch(), output);
  }

  // optional bool dispatch_hu = 59;
  if (has_dispatch_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->dispatch_hu(), output);
  }

  // optional bool tiweipao_hu = 60;
  if (has_tiweipao_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->tiweipao_hu(), output);
  }

  // optional bool wei_hu = 61;
  if (has_wei_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->wei_hu(), output);
  }

  // optional bool ti_card = 62;
  if (has_ti_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->ti_card(), output);
  }

  // optional bool is_weiti_card = 63;
  if (has_is_weiti_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->is_weiti_card(), output);
  }

  // optional bool pao_card = 64;
  if (has_pao_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->pao_card(), output);
  }

  // optional bool first_card = 65;
  if (has_first_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->first_card(), output);
  }

  // optional bool after_weave = 67;
  if (has_after_weave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->after_weave(), output);
  }

  // repeated bool user_responses = 68;
  for (int i = 0; i < this->user_responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      68, this->user_responses(i), output);
  }

  // repeated int32 user_actions = 69;
  for (int i = 0; i < this->user_actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      69, this->user_actions(i), output);
  }

  // repeated int32 user_prerform = 70;
  for (int i = 0; i < this->user_prerform_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      70, this->user_prerform(i), output);
  }

  // repeated int32 chi_kind = 71;
  for (int i = 0; i < this->chi_kind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      71, this->chi_kind(i), output);
  }

  // repeated int32 second_chi_kind = 72;
  for (int i = 0; i < this->second_chi_kind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      72, this->second_chi_kind(i), output);
  }

  // repeated int32 third_chi_kind = 73;
  for (int i = 0; i < this->third_chi_kind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      73, this->third_chi_kind(i), output);
  }

  // repeated bool xiang_gong = 74;
  for (int i = 0; i < this->xiang_gong_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      74, this->xiang_gong(i), output);
  }

  // repeated bool common_best = 75;
  for (int i = 0; i < this->common_best_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      75, this->common_best(i), output);
  }

  // optional bytes tid = 76;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      76, this->tid(), output);
  }

  // optional int32 room_status = 77;
  if (has_room_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->room_status(), output);
  }

  // optional int32 dissolve_applyer = 78;
  if (has_dissolve_applyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->dissolve_applyer(), output);
  }

  // optional int32 dissovle_state = 79;
  if (has_dissovle_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->dissovle_state(), output);
  }

  // optional int32 is_dissolved = 80;
  if (has_is_dissolved()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->is_dissolved(), output);
  }

  // optional int32 banker_card = 81;
  if (has_banker_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(81, this->banker_card(), output);
  }

  // optional int32 is_piao = 82;
  if (has_is_piao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->is_piao(), output);
  }

  // optional bytes video_str = 83;
  if (has_video_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      83, this->video_str(), output);
  }

  // optional int32 cur_timer = 84;
  if (has_cur_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(84, this->cur_timer(), output);
  }

  // repeated bool user_dong_zhang = 85;
  for (int i = 0; i < this->user_dong_zhang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      85, this->user_dong_zhang(i), output);
  }

  // optional bool is_with_maohu = 86;
  if (has_is_with_maohu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->is_with_maohu(), output);
  }

  // optional bool is_zimo_fan = 87;
  if (has_is_zimo_fan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(87, this->is_zimo_fan(), output);
  }

  // optional int32 is_must_hu = 88;
  if (has_is_must_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(88, this->is_must_hu(), output);
  }

  // optional bool is_hhd = 89;
  if (has_is_hhd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->is_hhd(), output);
  }

  // repeated .proto.game.tagGain gains = 117;
  for (int i = 0; i < this->gains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      117, this->gains(i), output);
  }

  // optional bool tp_15_zhang = 118;
  if (has_tp_15_zhang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(118, this->tp_15_zhang(), output);
  }

  // optional bool b_must_hu = 119;
  if (has_b_must_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(119, this->b_must_hu(), output);
  }

  // optional int32 all_num = 120;
  if (has_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(120, this->all_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckTableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 operate_timer_stamp = 3;
  if (has_operate_timer_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operate_timer_stamp(), target);
  }

  // optional int32 left_card_count = 4;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_card_count(), target);
  }

  // optional int32 banker_user = 5;
  if (has_banker_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->banker_user(), target);
  }

  // optional int32 current_user = 6;
  if (has_current_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->current_user(), target);
  }

  // optional int32 current_card = 7;
  if (has_current_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_card(), target);
  }

  // optional int32 current_outcard_user = 8;
  if (has_current_outcard_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->current_outcard_user(), target);
  }

  // optional int32 current_outcard = 9;
  if (has_current_outcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->current_outcard(), target);
  }

  // optional bool is_dispatch = 10;
  if (has_is_dispatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_dispatch(), target);
  }

  // optional bool card_operated = 11;
  if (has_card_operated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->card_operated(), target);
  }

  // optional bool is_da_niao = 12;
  if (has_is_da_niao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_da_niao(), target);
  }

  // optional bool is_out_card = 13;
  if (has_is_out_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_out_card(), target);
  }

  // optional bool is_first_card = 14;
  if (has_is_first_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_first_card(), target);
  }

  // optional int32 huang_count = 15;
  if (has_huang_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->huang_count(), target);
  }

  // optional int32 take_in = 16;
  if (has_take_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->take_in(), target);
  }

  // optional int32 play_id = 17;
  if (has_play_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->play_id(), target);
  }

  // optional int32 base_huxi = 18;
  if (has_base_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->base_huxi(), target);
  }

  // optional int32 room_user_id = 19;
  if (has_room_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->room_user_id(), target);
  }

  // repeated int32 niao_count = 20;
  for (int i = 0; i < this->niao_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->niao_count(i), target);
  }

  // repeated int32 piao_count = 21;
  for (int i = 0; i < this->piao_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->piao_count(i), target);
  }

  // optional int32 user_action = 22;
  if (has_user_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->user_action(), target);
  }

  // optional bool is_first_operate = 23;
  if (has_is_first_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_first_operate(), target);
  }

  // optional bool response = 24;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->response(), target);
  }

  // optional int32 perform_action = 25;
  if (has_perform_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->perform_action(), target);
  }

  // repeated .proto.game.tagHandCards hand_cards = 26;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->hand_cards(i), target);
  }

  // repeated int32 listen_cards = 27;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(27, this->listen_cards(i), target);
  }

  // optional int32 total_huxi = 28;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->total_huxi(), target);
  }

  // repeated .proto.game.tagChiCardInfo chicard_info = 29;
  for (int i = 0; i < this->chicard_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->chicard_info(i), target);
  }

  // optional int32 stand_money = 30;
  if (has_stand_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->stand_money(), target);
  }

  // optional int32 base_money = 31;
  if (has_base_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->base_money(), target);
  }

  // optional .proto.game.tagDissolveRoomInfo dissolve_room_info = 32;
  if (has_dissolve_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->dissolve_room_info(), target);
  }

  // repeated .proto.game.tagPlayers players = 33;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->players(i), target);
  }

  // repeated bytes offline_info = 34;
  for (int i = 0; i < this->offline_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(34, this->offline_info(i), target);
  }

  // optional int32 offline_max_count = 35;
  if (has_offline_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->offline_max_count(), target);
  }

  // optional int32 game_player = 36;
  if (has_game_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->game_player(), target);
  }

  // optional bytes game_name = 37;
  if (has_game_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        37, this->game_name(), target);
  }

  // optional bool dong_zhang = 38;
  if (has_dong_zhang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->dong_zhang(), target);
  }

  // optional bool tian_hu_3ti5kan = 39;
  if (has_tian_hu_3ti5kan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->tian_hu_3ti5kan(), target);
  }

  // optional bool is_tian_hu_3ti5kan = 40;
  if (has_is_tian_hu_3ti5kan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->is_tian_hu_3ti5kan(), target);
  }

  // optional int32 huxi_to_tun = 50;
  if (has_huxi_to_tun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->huxi_to_tun(), target);
  }

  // optional int32 current_num = 51;
  if (has_current_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->current_num(), target);
  }

  // optional bytes innings = 52;
  if (has_innings()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        52, this->innings(), target);
  }

  // optional int32 is_ming_xiao = 53;
  if (has_is_ming_xiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->is_ming_xiao(), target);
  }

  // repeated int32 repertory_cards = 54;
  for (int i = 0; i < this->repertory_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(54, this->repertory_cards(i), target);
  }

  // repeated int32 weave_huxi = 55;
  for (int i = 0; i < this->weave_huxi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(55, this->weave_huxi(i), target);
  }

  // repeated int32 show_huxi = 56;
  for (int i = 0; i < this->show_huxi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(56, this->show_huxi(i), target);
  }

  // repeated int32 hands_huxi = 57;
  for (int i = 0; i < this->hands_huxi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(57, this->hands_huxi(i), target);
  }

  // optional bool dispatch = 58;
  if (has_dispatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->dispatch(), target);
  }

  // optional bool dispatch_hu = 59;
  if (has_dispatch_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->dispatch_hu(), target);
  }

  // optional bool tiweipao_hu = 60;
  if (has_tiweipao_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->tiweipao_hu(), target);
  }

  // optional bool wei_hu = 61;
  if (has_wei_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->wei_hu(), target);
  }

  // optional bool ti_card = 62;
  if (has_ti_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->ti_card(), target);
  }

  // optional bool is_weiti_card = 63;
  if (has_is_weiti_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->is_weiti_card(), target);
  }

  // optional bool pao_card = 64;
  if (has_pao_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->pao_card(), target);
  }

  // optional bool first_card = 65;
  if (has_first_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->first_card(), target);
  }

  // optional bool after_weave = 67;
  if (has_after_weave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->after_weave(), target);
  }

  // repeated bool user_responses = 68;
  for (int i = 0; i < this->user_responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(68, this->user_responses(i), target);
  }

  // repeated int32 user_actions = 69;
  for (int i = 0; i < this->user_actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(69, this->user_actions(i), target);
  }

  // repeated int32 user_prerform = 70;
  for (int i = 0; i < this->user_prerform_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(70, this->user_prerform(i), target);
  }

  // repeated int32 chi_kind = 71;
  for (int i = 0; i < this->chi_kind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(71, this->chi_kind(i), target);
  }

  // repeated int32 second_chi_kind = 72;
  for (int i = 0; i < this->second_chi_kind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(72, this->second_chi_kind(i), target);
  }

  // repeated int32 third_chi_kind = 73;
  for (int i = 0; i < this->third_chi_kind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(73, this->third_chi_kind(i), target);
  }

  // repeated bool xiang_gong = 74;
  for (int i = 0; i < this->xiang_gong_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(74, this->xiang_gong(i), target);
  }

  // repeated bool common_best = 75;
  for (int i = 0; i < this->common_best_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(75, this->common_best(i), target);
  }

  // optional bytes tid = 76;
  if (has_tid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        76, this->tid(), target);
  }

  // optional int32 room_status = 77;
  if (has_room_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(77, this->room_status(), target);
  }

  // optional int32 dissolve_applyer = 78;
  if (has_dissolve_applyer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(78, this->dissolve_applyer(), target);
  }

  // optional int32 dissovle_state = 79;
  if (has_dissovle_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(79, this->dissovle_state(), target);
  }

  // optional int32 is_dissolved = 80;
  if (has_is_dissolved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->is_dissolved(), target);
  }

  // optional int32 banker_card = 81;
  if (has_banker_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(81, this->banker_card(), target);
  }

  // optional int32 is_piao = 82;
  if (has_is_piao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->is_piao(), target);
  }

  // optional bytes video_str = 83;
  if (has_video_str()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        83, this->video_str(), target);
  }

  // optional int32 cur_timer = 84;
  if (has_cur_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(84, this->cur_timer(), target);
  }

  // repeated bool user_dong_zhang = 85;
  for (int i = 0; i < this->user_dong_zhang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(85, this->user_dong_zhang(i), target);
  }

  // optional bool is_with_maohu = 86;
  if (has_is_with_maohu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->is_with_maohu(), target);
  }

  // optional bool is_zimo_fan = 87;
  if (has_is_zimo_fan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(87, this->is_zimo_fan(), target);
  }

  // optional int32 is_must_hu = 88;
  if (has_is_must_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(88, this->is_must_hu(), target);
  }

  // optional bool is_hhd = 89;
  if (has_is_hhd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(89, this->is_hhd(), target);
  }

  // repeated .proto.game.tagGain gains = 117;
  for (int i = 0; i < this->gains_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->gains(i), target);
  }

  // optional bool tp_15_zhang = 118;
  if (has_tp_15_zhang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(118, this->tp_15_zhang(), target);
  }

  // optional bool b_must_hu = 119;
  if (has_b_must_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(119, this->b_must_hu(), target);
  }

  // optional int32 all_num = 120;
  if (has_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(120, this->all_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckTableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 operate_timer_stamp = 3;
    if (has_operate_timer_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_timer_stamp());
    }

    // optional int32 left_card_count = 4;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card_count());
    }

    // optional int32 banker_user = 5;
    if (has_banker_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_user());
    }

    // optional int32 current_user = 6;
    if (has_current_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_user());
    }

    // optional int32 current_card = 7;
    if (has_current_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_card());
    }

    // optional int32 current_outcard_user = 8;
    if (has_current_outcard_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_outcard_user());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 current_outcard = 9;
    if (has_current_outcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_outcard());
    }

    // optional bool is_dispatch = 10;
    if (has_is_dispatch()) {
      total_size += 1 + 1;
    }

    // optional bool card_operated = 11;
    if (has_card_operated()) {
      total_size += 1 + 1;
    }

    // optional bool is_da_niao = 12;
    if (has_is_da_niao()) {
      total_size += 1 + 1;
    }

    // optional bool is_out_card = 13;
    if (has_is_out_card()) {
      total_size += 1 + 1;
    }

    // optional bool is_first_card = 14;
    if (has_is_first_card()) {
      total_size += 1 + 1;
    }

    // optional int32 huang_count = 15;
    if (has_huang_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huang_count());
    }

    // optional int32 take_in = 16;
    if (has_take_in()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->take_in());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 play_id = 17;
    if (has_play_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_id());
    }

    // optional int32 base_huxi = 18;
    if (has_base_huxi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_huxi());
    }

    // optional int32 room_user_id = 19;
    if (has_room_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_user_id());
    }

    // optional int32 user_action = 22;
    if (has_user_action()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_action());
    }

    // optional bool is_first_operate = 23;
    if (has_is_first_operate()) {
      total_size += 2 + 1;
    }

    // optional bool response = 24;
    if (has_response()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 perform_action = 25;
    if (has_perform_action()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perform_action());
    }

    // optional int32 total_huxi = 28;
    if (has_total_huxi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

    // optional int32 stand_money = 30;
    if (has_stand_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stand_money());
    }

    // optional int32 base_money = 31;
    if (has_base_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_money());
    }

    // optional .proto.game.tagDissolveRoomInfo dissolve_room_info = 32;
    if (has_dissolve_room_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dissolve_room_info());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional int32 offline_max_count = 35;
    if (has_offline_max_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offline_max_count());
    }

    // optional int32 game_player = 36;
    if (has_game_player()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_player());
    }

    // optional bytes game_name = 37;
    if (has_game_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_name());
    }

    // optional bool dong_zhang = 38;
    if (has_dong_zhang()) {
      total_size += 2 + 1;
    }

    // optional bool tian_hu_3ti5kan = 39;
    if (has_tian_hu_3ti5kan()) {
      total_size += 2 + 1;
    }

    // optional bool is_tian_hu_3ti5kan = 40;
    if (has_is_tian_hu_3ti5kan()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 huxi_to_tun = 50;
    if (has_huxi_to_tun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huxi_to_tun());
    }

    // optional int32 current_num = 51;
    if (has_current_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_num());
    }

    // optional bytes innings = 52;
    if (has_innings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->innings());
    }

    // optional int32 is_ming_xiao = 53;
    if (has_is_ming_xiao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_ming_xiao());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool dispatch = 58;
    if (has_dispatch()) {
      total_size += 2 + 1;
    }

    // optional bool dispatch_hu = 59;
    if (has_dispatch_hu()) {
      total_size += 2 + 1;
    }

    // optional bool tiweipao_hu = 60;
    if (has_tiweipao_hu()) {
      total_size += 2 + 1;
    }

    // optional bool wei_hu = 61;
    if (has_wei_hu()) {
      total_size += 2 + 1;
    }

    // optional bool ti_card = 62;
    if (has_ti_card()) {
      total_size += 2 + 1;
    }

    // optional bool is_weiti_card = 63;
    if (has_is_weiti_card()) {
      total_size += 2 + 1;
    }

    // optional bool pao_card = 64;
    if (has_pao_card()) {
      total_size += 2 + 1;
    }

    // optional bool first_card = 65;
    if (has_first_card()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional bool after_weave = 67;
    if (has_after_weave()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[65 / 32] & (0xffu << (65 % 32))) {
    // optional bytes tid = 76;
    if (has_tid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tid());
    }

    // optional int32 room_status = 77;
    if (has_room_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_status());
    }

    // optional int32 dissolve_applyer = 78;
    if (has_dissolve_applyer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissolve_applyer());
    }

    // optional int32 dissovle_state = 79;
    if (has_dissovle_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissovle_state());
    }

    // optional int32 is_dissolved = 80;
    if (has_is_dissolved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_dissolved());
    }

    // optional int32 banker_card = 81;
    if (has_banker_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_card());
    }

    // optional int32 is_piao = 82;
    if (has_is_piao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_piao());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional bytes video_str = 83;
    if (has_video_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->video_str());
    }

    // optional int32 cur_timer = 84;
    if (has_cur_timer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_timer());
    }

    // optional bool is_with_maohu = 86;
    if (has_is_with_maohu()) {
      total_size += 2 + 1;
    }

    // optional bool is_zimo_fan = 87;
    if (has_is_zimo_fan()) {
      total_size += 2 + 1;
    }

    // optional int32 is_must_hu = 88;
    if (has_is_must_hu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_must_hu());
    }

    // optional bool is_hhd = 89;
    if (has_is_hhd()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional bool tp_15_zhang = 118;
    if (has_tp_15_zhang()) {
      total_size += 2 + 1;
    }

    // optional bool b_must_hu = 119;
    if (has_b_must_hu()) {
      total_size += 2 + 1;
    }

    // optional int32 all_num = 120;
    if (has_all_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_num());
    }

  }
  // repeated int32 niao_count = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->niao_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->niao_count(i));
    }
    total_size += 2 * this->niao_count_size() + data_size;
  }

  // repeated int32 piao_count = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->piao_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piao_count(i));
    }
    total_size += 2 * this->piao_count_size() + data_size;
  }

  // repeated .proto.game.tagHandCards hand_cards = 26;
  total_size += 2 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated int32 listen_cards = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listen_cards(i));
    }
    total_size += 2 * this->listen_cards_size() + data_size;
  }

  // repeated .proto.game.tagChiCardInfo chicard_info = 29;
  total_size += 2 * this->chicard_info_size();
  for (int i = 0; i < this->chicard_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chicard_info(i));
  }

  // repeated .proto.game.tagPlayers players = 33;
  total_size += 2 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated bytes offline_info = 34;
  total_size += 2 * this->offline_info_size();
  for (int i = 0; i < this->offline_info_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->offline_info(i));
  }

  // repeated int32 repertory_cards = 54;
  {
    int data_size = 0;
    for (int i = 0; i < this->repertory_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->repertory_cards(i));
    }
    total_size += 2 * this->repertory_cards_size() + data_size;
  }

  // repeated int32 weave_huxi = 55;
  {
    int data_size = 0;
    for (int i = 0; i < this->weave_huxi_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weave_huxi(i));
    }
    total_size += 2 * this->weave_huxi_size() + data_size;
  }

  // repeated int32 show_huxi = 56;
  {
    int data_size = 0;
    for (int i = 0; i < this->show_huxi_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->show_huxi(i));
    }
    total_size += 2 * this->show_huxi_size() + data_size;
  }

  // repeated int32 hands_huxi = 57;
  {
    int data_size = 0;
    for (int i = 0; i < this->hands_huxi_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hands_huxi(i));
    }
    total_size += 2 * this->hands_huxi_size() + data_size;
  }

  // repeated bool user_responses = 68;
  {
    int data_size = 0;
    data_size = 1 * this->user_responses_size();
    total_size += 2 * this->user_responses_size() + data_size;
  }

  // repeated int32 user_actions = 69;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_actions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user_actions(i));
    }
    total_size += 2 * this->user_actions_size() + data_size;
  }

  // repeated int32 user_prerform = 70;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_prerform_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user_prerform(i));
    }
    total_size += 2 * this->user_prerform_size() + data_size;
  }

  // repeated int32 chi_kind = 71;
  {
    int data_size = 0;
    for (int i = 0; i < this->chi_kind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chi_kind(i));
    }
    total_size += 2 * this->chi_kind_size() + data_size;
  }

  // repeated int32 second_chi_kind = 72;
  {
    int data_size = 0;
    for (int i = 0; i < this->second_chi_kind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->second_chi_kind(i));
    }
    total_size += 2 * this->second_chi_kind_size() + data_size;
  }

  // repeated int32 third_chi_kind = 73;
  {
    int data_size = 0;
    for (int i = 0; i < this->third_chi_kind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->third_chi_kind(i));
    }
    total_size += 2 * this->third_chi_kind_size() + data_size;
  }

  // repeated bool xiang_gong = 74;
  {
    int data_size = 0;
    data_size = 1 * this->xiang_gong_size();
    total_size += 2 * this->xiang_gong_size() + data_size;
  }

  // repeated bool common_best = 75;
  {
    int data_size = 0;
    data_size = 1 * this->common_best_size();
    total_size += 2 * this->common_best_size() + data_size;
  }

  // repeated bool user_dong_zhang = 85;
  {
    int data_size = 0;
    data_size = 1 * this->user_dong_zhang_size();
    total_size += 2 * this->user_dong_zhang_size() + data_size;
  }

  // repeated .proto.game.tagGain gains = 117;
  total_size += 2 * this->gains_size();
  for (int i = 0; i < this->gains_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gains(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckTableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckTableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckTableInfo::MergeFrom(const AckTableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  niao_count_.MergeFrom(from.niao_count_);
  piao_count_.MergeFrom(from.piao_count_);
  hand_cards_.MergeFrom(from.hand_cards_);
  listen_cards_.MergeFrom(from.listen_cards_);
  chicard_info_.MergeFrom(from.chicard_info_);
  players_.MergeFrom(from.players_);
  offline_info_.MergeFrom(from.offline_info_);
  repertory_cards_.MergeFrom(from.repertory_cards_);
  weave_huxi_.MergeFrom(from.weave_huxi_);
  show_huxi_.MergeFrom(from.show_huxi_);
  hands_huxi_.MergeFrom(from.hands_huxi_);
  user_responses_.MergeFrom(from.user_responses_);
  user_actions_.MergeFrom(from.user_actions_);
  user_prerform_.MergeFrom(from.user_prerform_);
  chi_kind_.MergeFrom(from.chi_kind_);
  second_chi_kind_.MergeFrom(from.second_chi_kind_);
  third_chi_kind_.MergeFrom(from.third_chi_kind_);
  xiang_gong_.MergeFrom(from.xiang_gong_);
  common_best_.MergeFrom(from.common_best_);
  user_dong_zhang_.MergeFrom(from.user_dong_zhang_);
  gains_.MergeFrom(from.gains_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_operate_timer_stamp()) {
      set_operate_timer_stamp(from.operate_timer_stamp());
    }
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
    if (from.has_banker_user()) {
      set_banker_user(from.banker_user());
    }
    if (from.has_current_user()) {
      set_current_user(from.current_user());
    }
    if (from.has_current_card()) {
      set_current_card(from.current_card());
    }
    if (from.has_current_outcard_user()) {
      set_current_outcard_user(from.current_outcard_user());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_current_outcard()) {
      set_current_outcard(from.current_outcard());
    }
    if (from.has_is_dispatch()) {
      set_is_dispatch(from.is_dispatch());
    }
    if (from.has_card_operated()) {
      set_card_operated(from.card_operated());
    }
    if (from.has_is_da_niao()) {
      set_is_da_niao(from.is_da_niao());
    }
    if (from.has_is_out_card()) {
      set_is_out_card(from.is_out_card());
    }
    if (from.has_is_first_card()) {
      set_is_first_card(from.is_first_card());
    }
    if (from.has_huang_count()) {
      set_huang_count(from.huang_count());
    }
    if (from.has_take_in()) {
      set_take_in(from.take_in());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_play_id()) {
      set_play_id(from.play_id());
    }
    if (from.has_base_huxi()) {
      set_base_huxi(from.base_huxi());
    }
    if (from.has_room_user_id()) {
      set_room_user_id(from.room_user_id());
    }
    if (from.has_user_action()) {
      set_user_action(from.user_action());
    }
    if (from.has_is_first_operate()) {
      set_is_first_operate(from.is_first_operate());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_perform_action()) {
      set_perform_action(from.perform_action());
    }
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
    if (from.has_stand_money()) {
      set_stand_money(from.stand_money());
    }
    if (from.has_base_money()) {
      set_base_money(from.base_money());
    }
    if (from.has_dissolve_room_info()) {
      mutable_dissolve_room_info()->::proto::game::tagDissolveRoomInfo::MergeFrom(from.dissolve_room_info());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_offline_max_count()) {
      set_offline_max_count(from.offline_max_count());
    }
    if (from.has_game_player()) {
      set_game_player(from.game_player());
    }
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
    if (from.has_dong_zhang()) {
      set_dong_zhang(from.dong_zhang());
    }
    if (from.has_tian_hu_3ti5kan()) {
      set_tian_hu_3ti5kan(from.tian_hu_3ti5kan());
    }
    if (from.has_is_tian_hu_3ti5kan()) {
      set_is_tian_hu_3ti5kan(from.is_tian_hu_3ti5kan());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_huxi_to_tun()) {
      set_huxi_to_tun(from.huxi_to_tun());
    }
    if (from.has_current_num()) {
      set_current_num(from.current_num());
    }
    if (from.has_innings()) {
      set_innings(from.innings());
    }
    if (from.has_is_ming_xiao()) {
      set_is_ming_xiao(from.is_ming_xiao());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_dispatch()) {
      set_dispatch(from.dispatch());
    }
    if (from.has_dispatch_hu()) {
      set_dispatch_hu(from.dispatch_hu());
    }
    if (from.has_tiweipao_hu()) {
      set_tiweipao_hu(from.tiweipao_hu());
    }
    if (from.has_wei_hu()) {
      set_wei_hu(from.wei_hu());
    }
    if (from.has_ti_card()) {
      set_ti_card(from.ti_card());
    }
    if (from.has_is_weiti_card()) {
      set_is_weiti_card(from.is_weiti_card());
    }
    if (from.has_pao_card()) {
      set_pao_card(from.pao_card());
    }
    if (from.has_first_card()) {
      set_first_card(from.first_card());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_after_weave()) {
      set_after_weave(from.after_weave());
    }
  }
  if (from._has_bits_[65 / 32] & (0xffu << (65 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_room_status()) {
      set_room_status(from.room_status());
    }
    if (from.has_dissolve_applyer()) {
      set_dissolve_applyer(from.dissolve_applyer());
    }
    if (from.has_dissovle_state()) {
      set_dissovle_state(from.dissovle_state());
    }
    if (from.has_is_dissolved()) {
      set_is_dissolved(from.is_dissolved());
    }
    if (from.has_banker_card()) {
      set_banker_card(from.banker_card());
    }
    if (from.has_is_piao()) {
      set_is_piao(from.is_piao());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_video_str()) {
      set_video_str(from.video_str());
    }
    if (from.has_cur_timer()) {
      set_cur_timer(from.cur_timer());
    }
    if (from.has_is_with_maohu()) {
      set_is_with_maohu(from.is_with_maohu());
    }
    if (from.has_is_zimo_fan()) {
      set_is_zimo_fan(from.is_zimo_fan());
    }
    if (from.has_is_must_hu()) {
      set_is_must_hu(from.is_must_hu());
    }
    if (from.has_is_hhd()) {
      set_is_hhd(from.is_hhd());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_tp_15_zhang()) {
      set_tp_15_zhang(from.tp_15_zhang());
    }
    if (from.has_b_must_hu()) {
      set_b_must_hu(from.b_must_hu());
    }
    if (from.has_all_num()) {
      set_all_num(from.all_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTableInfo::CopyFrom(const AckTableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTableInfo::IsInitialized() const {

  return true;
}

void AckTableInfo::Swap(AckTableInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(state_, other->state_);
    std::swap(operate_timer_stamp_, other->operate_timer_stamp_);
    std::swap(left_card_count_, other->left_card_count_);
    std::swap(banker_user_, other->banker_user_);
    std::swap(current_user_, other->current_user_);
    std::swap(current_card_, other->current_card_);
    std::swap(current_outcard_user_, other->current_outcard_user_);
    std::swap(current_outcard_, other->current_outcard_);
    std::swap(is_dispatch_, other->is_dispatch_);
    std::swap(card_operated_, other->card_operated_);
    std::swap(is_da_niao_, other->is_da_niao_);
    std::swap(is_out_card_, other->is_out_card_);
    std::swap(is_first_card_, other->is_first_card_);
    std::swap(huang_count_, other->huang_count_);
    std::swap(take_in_, other->take_in_);
    std::swap(play_id_, other->play_id_);
    std::swap(base_huxi_, other->base_huxi_);
    std::swap(room_user_id_, other->room_user_id_);
    niao_count_.Swap(&other->niao_count_);
    piao_count_.Swap(&other->piao_count_);
    std::swap(user_action_, other->user_action_);
    std::swap(is_first_operate_, other->is_first_operate_);
    std::swap(response_, other->response_);
    std::swap(perform_action_, other->perform_action_);
    hand_cards_.Swap(&other->hand_cards_);
    listen_cards_.Swap(&other->listen_cards_);
    std::swap(total_huxi_, other->total_huxi_);
    chicard_info_.Swap(&other->chicard_info_);
    std::swap(stand_money_, other->stand_money_);
    std::swap(base_money_, other->base_money_);
    std::swap(dissolve_room_info_, other->dissolve_room_info_);
    players_.Swap(&other->players_);
    offline_info_.Swap(&other->offline_info_);
    std::swap(offline_max_count_, other->offline_max_count_);
    std::swap(game_player_, other->game_player_);
    std::swap(game_name_, other->game_name_);
    std::swap(dong_zhang_, other->dong_zhang_);
    std::swap(tian_hu_3ti5kan_, other->tian_hu_3ti5kan_);
    std::swap(is_tian_hu_3ti5kan_, other->is_tian_hu_3ti5kan_);
    std::swap(huxi_to_tun_, other->huxi_to_tun_);
    std::swap(current_num_, other->current_num_);
    std::swap(innings_, other->innings_);
    std::swap(is_ming_xiao_, other->is_ming_xiao_);
    repertory_cards_.Swap(&other->repertory_cards_);
    weave_huxi_.Swap(&other->weave_huxi_);
    show_huxi_.Swap(&other->show_huxi_);
    hands_huxi_.Swap(&other->hands_huxi_);
    std::swap(dispatch_, other->dispatch_);
    std::swap(dispatch_hu_, other->dispatch_hu_);
    std::swap(tiweipao_hu_, other->tiweipao_hu_);
    std::swap(wei_hu_, other->wei_hu_);
    std::swap(ti_card_, other->ti_card_);
    std::swap(is_weiti_card_, other->is_weiti_card_);
    std::swap(pao_card_, other->pao_card_);
    std::swap(first_card_, other->first_card_);
    std::swap(after_weave_, other->after_weave_);
    user_responses_.Swap(&other->user_responses_);
    user_actions_.Swap(&other->user_actions_);
    user_prerform_.Swap(&other->user_prerform_);
    chi_kind_.Swap(&other->chi_kind_);
    second_chi_kind_.Swap(&other->second_chi_kind_);
    third_chi_kind_.Swap(&other->third_chi_kind_);
    xiang_gong_.Swap(&other->xiang_gong_);
    common_best_.Swap(&other->common_best_);
    std::swap(tid_, other->tid_);
    std::swap(room_status_, other->room_status_);
    std::swap(dissolve_applyer_, other->dissolve_applyer_);
    std::swap(dissovle_state_, other->dissovle_state_);
    std::swap(is_dissolved_, other->is_dissolved_);
    std::swap(banker_card_, other->banker_card_);
    std::swap(is_piao_, other->is_piao_);
    std::swap(video_str_, other->video_str_);
    std::swap(cur_timer_, other->cur_timer_);
    user_dong_zhang_.Swap(&other->user_dong_zhang_);
    std::swap(is_with_maohu_, other->is_with_maohu_);
    std::swap(is_zimo_fan_, other->is_zimo_fan_);
    std::swap(is_must_hu_, other->is_must_hu_);
    std::swap(is_hhd_, other->is_hhd_);
    gains_.Swap(&other->gains_);
    std::swap(tp_15_zhang_, other->tp_15_zhang_);
    std::swap(b_must_hu_, other->b_must_hu_);
    std::swap(all_num_, other->all_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckTableInfo_descriptor_;
  metadata.reflection = AckTableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBetting::kCoutFieldNumber;
#endif  // !_MSC_VER

ReqBetting::ReqBetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBetting::InitAsDefaultInstance() {
}

ReqBetting::ReqBetting(const ReqBetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBetting::SharedCtor() {
  _cached_size_ = 0;
  cout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBetting::~ReqBetting() {
  SharedDtor();
}

void ReqBetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBetting_descriptor_;
}

const ReqBetting& ReqBetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqBetting* ReqBetting::default_instance_ = NULL;

ReqBetting* ReqBetting::New() const {
  return new ReqBetting;
}

void ReqBetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cout_)));
          set_has_cout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cout = 1;
  if (has_cout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cout = 1;
  if (has_cout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cout = 1;
    if (has_cout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBetting::MergeFrom(const ReqBetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cout()) {
      set_cout(from.cout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBetting::CopyFrom(const ReqBetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqBetting::Swap(ReqBetting* other) {
  if (other != this) {
    std::swap(cout_, other->cout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBetting_descriptor_;
  metadata.reflection = ReqBetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckStartBetting::kStateFieldNumber;
const int AckStartBetting::kBankerFieldNumber;
#endif  // !_MSC_VER

AckStartBetting::AckStartBetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckStartBetting::InitAsDefaultInstance() {
}

AckStartBetting::AckStartBetting(const AckStartBetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckStartBetting::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  banker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckStartBetting::~AckStartBetting() {
  SharedDtor();
}

void AckStartBetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckStartBetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckStartBetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckStartBetting_descriptor_;
}

const AckStartBetting& AckStartBetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckStartBetting* AckStartBetting::default_instance_ = NULL;

AckStartBetting* AckStartBetting::New() const {
  return new AckStartBetting;
}

void AckStartBetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    banker_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckStartBetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker;
        break;
      }

      // optional int32 banker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_)));
          set_has_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckStartBetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 banker = 2;
  if (has_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->banker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckStartBetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int32 banker = 2;
  if (has_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->banker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckStartBetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 banker = 2;
    if (has_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckStartBetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckStartBetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckStartBetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckStartBetting::MergeFrom(const AckStartBetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_banker()) {
      set_banker(from.banker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckStartBetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartBetting::CopyFrom(const AckStartBetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartBetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckStartBetting::Swap(AckStartBetting* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(banker_, other->banker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckStartBetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckStartBetting_descriptor_;
  metadata.reflection = AckStartBetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBettingErr::kUidFieldNumber;
const int AckBettingErr::kSeatidFieldNumber;
const int AckBettingErr::kCodeFieldNumber;
#endif  // !_MSC_VER

AckBettingErr::AckBettingErr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBettingErr::InitAsDefaultInstance() {
}

AckBettingErr::AckBettingErr(const AckBettingErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBettingErr::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBettingErr::~AckBettingErr() {
  SharedDtor();
}

void AckBettingErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBettingErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBettingErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBettingErr_descriptor_;
}

const AckBettingErr& AckBettingErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckBettingErr* AckBettingErr::default_instance_ = NULL;

AckBettingErr* AckBettingErr::New() const {
  return new AckBettingErr;
}

void AckBettingErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    seatid_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBettingErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional int32 code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBettingErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBettingErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBettingErr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBettingErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBettingErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBettingErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBettingErr::MergeFrom(const AckBettingErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBettingErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBettingErr::CopyFrom(const AckBettingErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBettingErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckBettingErr::Swap(AckBettingErr* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBettingErr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBettingErr_descriptor_;
  metadata.reflection = AckBettingErr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBettingSucc::kUidFieldNumber;
const int AckBettingSucc::kSeatidFieldNumber;
const int AckBettingSucc::kNameFieldNumber;
const int AckBettingSucc::kSexFieldNumber;
const int AckBettingSucc::kAvatarFieldNumber;
const int AckBettingSucc::kNiaoFieldNumber;
#endif  // !_MSC_VER

AckBettingSucc::AckBettingSucc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBettingSucc::InitAsDefaultInstance() {
}

AckBettingSucc::AckBettingSucc(const AckBettingSucc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBettingSucc::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  niao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBettingSucc::~AckBettingSucc() {
  SharedDtor();
}

void AckBettingSucc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void AckBettingSucc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBettingSucc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBettingSucc_descriptor_;
}

const AckBettingSucc& AckBettingSucc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckBettingSucc* AckBettingSucc::default_instance_ = NULL;

AckBettingSucc* AckBettingSucc::New() const {
  return new AckBettingSucc;
}

void AckBettingSucc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    seatid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    niao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBettingSucc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_niao;
        break;
      }

      // optional int32 niao = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_niao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &niao_)));
          set_has_niao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBettingSucc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional bytes avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->avatar(), output);
  }

  // optional int32 niao = 6;
  if (has_niao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->niao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBettingSucc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional bytes avatar = 5;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->avatar(), target);
  }

  // optional int32 niao = 6;
  if (has_niao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->niao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBettingSucc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional bytes avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional int32 niao = 6;
    if (has_niao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->niao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBettingSucc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBettingSucc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBettingSucc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBettingSucc::MergeFrom(const AckBettingSucc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_niao()) {
      set_niao(from.niao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBettingSucc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBettingSucc::CopyFrom(const AckBettingSucc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBettingSucc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckBettingSucc::Swap(AckBettingSucc* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(avatar_, other->avatar_);
    std::swap(niao_, other->niao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBettingSucc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBettingSucc_descriptor_;
  metadata.reflection = AckBettingSucc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckStartPiao::kStateFieldNumber;
const int AckStartPiao::kBankerFieldNumber;
#endif  // !_MSC_VER

AckStartPiao::AckStartPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckStartPiao::InitAsDefaultInstance() {
}

AckStartPiao::AckStartPiao(const AckStartPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckStartPiao::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  banker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckStartPiao::~AckStartPiao() {
  SharedDtor();
}

void AckStartPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckStartPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckStartPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckStartPiao_descriptor_;
}

const AckStartPiao& AckStartPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckStartPiao* AckStartPiao::default_instance_ = NULL;

AckStartPiao* AckStartPiao::New() const {
  return new AckStartPiao;
}

void AckStartPiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    banker_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckStartPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker;
        break;
      }

      // optional int32 banker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_)));
          set_has_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckStartPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 banker = 2;
  if (has_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->banker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckStartPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int32 banker = 2;
  if (has_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->banker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckStartPiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 banker = 2;
    if (has_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckStartPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckStartPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckStartPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckStartPiao::MergeFrom(const AckStartPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_banker()) {
      set_banker(from.banker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckStartPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartPiao::CopyFrom(const AckStartPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartPiao::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckStartPiao::Swap(AckStartPiao* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(banker_, other->banker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckStartPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckStartPiao_descriptor_;
  metadata.reflection = AckStartPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPiao::kCoutFieldNumber;
#endif  // !_MSC_VER

ReqPiao::ReqPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPiao::InitAsDefaultInstance() {
}

ReqPiao::ReqPiao(const ReqPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPiao::SharedCtor() {
  _cached_size_ = 0;
  cout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPiao::~ReqPiao() {
  SharedDtor();
}

void ReqPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPiao_descriptor_;
}

const ReqPiao& ReqPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqPiao* ReqPiao::default_instance_ = NULL;

ReqPiao* ReqPiao::New() const {
  return new ReqPiao;
}

void ReqPiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cout_)));
          set_has_cout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cout = 1;
  if (has_cout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cout = 1;
  if (has_cout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cout = 1;
    if (has_cout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPiao::MergeFrom(const ReqPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cout()) {
      set_cout(from.cout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPiao::CopyFrom(const ReqPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPiao::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqPiao::Swap(ReqPiao* other) {
  if (other != this) {
    std::swap(cout_, other->cout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPiao_descriptor_;
  metadata.reflection = ReqPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPiaoErr::kUidFieldNumber;
const int AckPiaoErr::kSeatidFieldNumber;
const int AckPiaoErr::kCodeFieldNumber;
#endif  // !_MSC_VER

AckPiaoErr::AckPiaoErr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPiaoErr::InitAsDefaultInstance() {
}

AckPiaoErr::AckPiaoErr(const AckPiaoErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPiaoErr::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPiaoErr::~AckPiaoErr() {
  SharedDtor();
}

void AckPiaoErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPiaoErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPiaoErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPiaoErr_descriptor_;
}

const AckPiaoErr& AckPiaoErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckPiaoErr* AckPiaoErr::default_instance_ = NULL;

AckPiaoErr* AckPiaoErr::New() const {
  return new AckPiaoErr;
}

void AckPiaoErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    seatid_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPiaoErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional int32 code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPiaoErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPiaoErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPiaoErr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPiaoErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPiaoErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPiaoErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPiaoErr::MergeFrom(const AckPiaoErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPiaoErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPiaoErr::CopyFrom(const AckPiaoErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPiaoErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckPiaoErr::Swap(AckPiaoErr* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPiaoErr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPiaoErr_descriptor_;
  metadata.reflection = AckPiaoErr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPiaoSucc::kUidFieldNumber;
const int AckPiaoSucc::kSeatidFieldNumber;
const int AckPiaoSucc::kNameFieldNumber;
const int AckPiaoSucc::kSexFieldNumber;
const int AckPiaoSucc::kAvatarFieldNumber;
const int AckPiaoSucc::kPiaoFieldNumber;
#endif  // !_MSC_VER

AckPiaoSucc::AckPiaoSucc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPiaoSucc::InitAsDefaultInstance() {
}

AckPiaoSucc::AckPiaoSucc(const AckPiaoSucc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPiaoSucc::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  piao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPiaoSucc::~AckPiaoSucc() {
  SharedDtor();
}

void AckPiaoSucc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void AckPiaoSucc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPiaoSucc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPiaoSucc_descriptor_;
}

const AckPiaoSucc& AckPiaoSucc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckPiaoSucc* AckPiaoSucc::default_instance_ = NULL;

AckPiaoSucc* AckPiaoSucc::New() const {
  return new AckPiaoSucc;
}

void AckPiaoSucc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    seatid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    piao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPiaoSucc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional bytes avatar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_piao;
        break;
      }

      // optional int32 piao = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piao_)));
          set_has_piao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPiaoSucc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional bytes avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->avatar(), output);
  }

  // optional int32 piao = 6;
  if (has_piao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->piao(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPiaoSucc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional bytes avatar = 5;
  if (has_avatar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->avatar(), target);
  }

  // optional int32 piao = 6;
  if (has_piao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->piao(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPiaoSucc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional bytes avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar());
    }

    // optional int32 piao = 6;
    if (has_piao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piao());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPiaoSucc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPiaoSucc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPiaoSucc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPiaoSucc::MergeFrom(const AckPiaoSucc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_piao()) {
      set_piao(from.piao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPiaoSucc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPiaoSucc::CopyFrom(const AckPiaoSucc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPiaoSucc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckPiaoSucc::Swap(AckPiaoSucc* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(avatar_, other->avatar_);
    std::swap(piao_, other->piao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPiaoSucc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPiaoSucc_descriptor_;
  metadata.reflection = AckPiaoSucc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameStart::kBankerFieldNumber;
const int AckGameStart::kBankerCardFieldNumber;
const int AckGameStart::kLeftCardCountFieldNumber;
const int AckGameStart::kHandCardsFieldNumber;
const int AckGameStart::kTotalHuxiFieldNumber;
const int AckGameStart::kListenCardsFieldNumber;
const int AckGameStart::kCurrentNumFieldNumber;
#endif  // !_MSC_VER

AckGameStart::AckGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameStart::InitAsDefaultInstance() {
}

AckGameStart::AckGameStart(const AckGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameStart::SharedCtor() {
  _cached_size_ = 0;
  banker_ = 0;
  banker_card_ = 0;
  left_card_count_ = 0;
  total_huxi_ = 0;
  current_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameStart::~AckGameStart() {
  SharedDtor();
}

void AckGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameStart_descriptor_;
}

const AckGameStart& AckGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameStart* AckGameStart::default_instance_ = NULL;

AckGameStart* AckGameStart::New() const {
  return new AckGameStart;
}

void AckGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_ = 0;
    banker_card_ = 0;
    left_card_count_ = 0;
    total_huxi_ = 0;
    current_num_ = 0;
  }
  hand_cards_.Clear();
  listen_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 banker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_)));
          set_has_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_card;
        break;
      }

      // optional int32 banker_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_card_)));
          set_has_banker_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_card_count;
        break;
      }

      // optional int32 left_card_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hand_cards;
        break;
      }

      // repeated .proto.game.tagHandCards hand_cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hand_cards;
        if (input->ExpectTag(40)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_listen_cards;
        break;
      }

      // repeated int32 listen_cards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_listen_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listen_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_listen_cards;
        if (input->ExpectTag(56)) goto parse_current_num;
        break;
      }

      // optional int32 current_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_num_)));
          set_has_current_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 banker = 1;
  if (has_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker(), output);
  }

  // optional int32 banker_card = 2;
  if (has_banker_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->banker_card(), output);
  }

  // optional int32 left_card_count = 3;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_card_count(), output);
  }

  // repeated .proto.game.tagHandCards hand_cards = 4;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hand_cards(i), output);
  }

  // optional int32 total_huxi = 5;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_huxi(), output);
  }

  // repeated int32 listen_cards = 6;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->listen_cards(i), output);
  }

  // optional int32 current_num = 7;
  if (has_current_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 banker = 1;
  if (has_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker(), target);
  }

  // optional int32 banker_card = 2;
  if (has_banker_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->banker_card(), target);
  }

  // optional int32 left_card_count = 3;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_card_count(), target);
  }

  // repeated .proto.game.tagHandCards hand_cards = 4;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hand_cards(i), target);
  }

  // optional int32 total_huxi = 5;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_huxi(), target);
  }

  // repeated int32 listen_cards = 6;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->listen_cards(i), target);
  }

  // optional int32 current_num = 7;
  if (has_current_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 banker = 1;
    if (has_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker());
    }

    // optional int32 banker_card = 2;
    if (has_banker_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_card());
    }

    // optional int32 left_card_count = 3;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card_count());
    }

    // optional int32 total_huxi = 5;
    if (has_total_huxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

    // optional int32 current_num = 7;
    if (has_current_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_num());
    }

  }
  // repeated .proto.game.tagHandCards hand_cards = 4;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated int32 listen_cards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listen_cards(i));
    }
    total_size += 1 * this->listen_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameStart::MergeFrom(const AckGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  listen_cards_.MergeFrom(from.listen_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker()) {
      set_banker(from.banker());
    }
    if (from.has_banker_card()) {
      set_banker_card(from.banker_card());
    }
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
    if (from.has_current_num()) {
      set_current_num(from.current_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameStart::CopyFrom(const AckGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameStart::Swap(AckGameStart* other) {
  if (other != this) {
    std::swap(banker_, other->banker_);
    std::swap(banker_card_, other->banker_card_);
    std::swap(left_card_count_, other->left_card_count_);
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(total_huxi_, other->total_huxi_);
    listen_cards_.Swap(&other->listen_cards_);
    std::swap(current_num_, other->current_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameStart_descriptor_;
  metadata.reflection = AckGameStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOperateNotify::kOperateTypeFieldNumber;
const int AckOperateNotify::kOperateCardFieldNumber;
const int AckOperateNotify::kChicardInfoFieldNumber;
const int AckOperateNotify::kOffCountFieldNumber;
const int AckOperateNotify::kIsMustHuFieldNumber;
#endif  // !_MSC_VER

AckOperateNotify::AckOperateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOperateNotify::InitAsDefaultInstance() {
}

AckOperateNotify::AckOperateNotify(const AckOperateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOperateNotify::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0;
  operate_card_ = 0;
  off_count_ = 0;
  is_must_hu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOperateNotify::~AckOperateNotify() {
  SharedDtor();
}

void AckOperateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOperateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOperateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOperateNotify_descriptor_;
}

const AckOperateNotify& AckOperateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckOperateNotify* AckOperateNotify::default_instance_ = NULL;

AckOperateNotify* AckOperateNotify::New() const {
  return new AckOperateNotify;
}

void AckOperateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0;
    operate_card_ = 0;
    off_count_ = 0;
    is_must_hu_ = false;
  }
  chicard_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOperateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_card;
        break;
      }

      // optional int32 operate_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_card_)));
          set_has_operate_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chicard_info;
        break;
      }

      // repeated .proto.game.tagChiCardInfo chicard_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chicard_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chicard_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chicard_info;
        if (input->ExpectTag(32)) goto parse_off_count;
        break;
      }

      // optional int32 off_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_off_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &off_count_)));
          set_has_off_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_must_hu;
        break;
      }

      // optional bool is_must_hu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_must_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_must_hu_)));
          set_has_is_must_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOperateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate_type(), output);
  }

  // optional int32 operate_card = 2;
  if (has_operate_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate_card(), output);
  }

  // repeated .proto.game.tagChiCardInfo chicard_info = 3;
  for (int i = 0; i < this->chicard_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chicard_info(i), output);
  }

  // optional int32 off_count = 4;
  if (has_off_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->off_count(), output);
  }

  // optional bool is_must_hu = 5;
  if (has_is_must_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_must_hu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOperateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate_type(), target);
  }

  // optional int32 operate_card = 2;
  if (has_operate_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate_card(), target);
  }

  // repeated .proto.game.tagChiCardInfo chicard_info = 3;
  for (int i = 0; i < this->chicard_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chicard_info(i), target);
  }

  // optional int32 off_count = 4;
  if (has_off_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->off_count(), target);
  }

  // optional bool is_must_hu = 5;
  if (has_is_must_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_must_hu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOperateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

    // optional int32 operate_card = 2;
    if (has_operate_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_card());
    }

    // optional int32 off_count = 4;
    if (has_off_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->off_count());
    }

    // optional bool is_must_hu = 5;
    if (has_is_must_hu()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto.game.tagChiCardInfo chicard_info = 3;
  total_size += 1 * this->chicard_info_size();
  for (int i = 0; i < this->chicard_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chicard_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOperateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOperateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOperateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOperateNotify::MergeFrom(const AckOperateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  chicard_info_.MergeFrom(from.chicard_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_operate_card()) {
      set_operate_card(from.operate_card());
    }
    if (from.has_off_count()) {
      set_off_count(from.off_count());
    }
    if (from.has_is_must_hu()) {
      set_is_must_hu(from.is_must_hu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOperateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOperateNotify::CopyFrom(const AckOperateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOperateNotify::IsInitialized() const {

  return true;
}

void AckOperateNotify::Swap(AckOperateNotify* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    std::swap(operate_card_, other->operate_card_);
    chicard_info_.Swap(&other->chicard_info_);
    std::swap(off_count_, other->off_count_);
    std::swap(is_must_hu_, other->is_must_hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOperateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOperateNotify_descriptor_;
  metadata.reflection = AckOperateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPreOperate::kOperateTypeFieldNumber;
const int ReqPreOperate::kChiKindFieldNumber;
const int ReqPreOperate::kSecondKindFieldNumber;
const int ReqPreOperate::kThirdKindFieldNumber;
#endif  // !_MSC_VER

ReqPreOperate::ReqPreOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPreOperate::InitAsDefaultInstance() {
}

ReqPreOperate::ReqPreOperate(const ReqPreOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPreOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0;
  chi_kind_ = 0;
  second_kind_ = 0;
  third_kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPreOperate::~ReqPreOperate() {
  SharedDtor();
}

void ReqPreOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPreOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPreOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPreOperate_descriptor_;
}

const ReqPreOperate& ReqPreOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqPreOperate* ReqPreOperate::default_instance_ = NULL;

ReqPreOperate* ReqPreOperate::New() const {
  return new ReqPreOperate;
}

void ReqPreOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0;
    chi_kind_ = 0;
    second_kind_ = 0;
    third_kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPreOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chi_kind;
        break;
      }

      // optional int32 chi_kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_kind_)));
          set_has_chi_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_second_kind;
        break;
      }

      // optional int32 second_kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_kind_)));
          set_has_second_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_third_kind;
        break;
      }

      // optional int32 third_kind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_third_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &third_kind_)));
          set_has_third_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPreOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate_type(), output);
  }

  // optional int32 chi_kind = 2;
  if (has_chi_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chi_kind(), output);
  }

  // optional int32 second_kind = 3;
  if (has_second_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->second_kind(), output);
  }

  // optional int32 third_kind = 4;
  if (has_third_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->third_kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPreOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate_type(), target);
  }

  // optional int32 chi_kind = 2;
  if (has_chi_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chi_kind(), target);
  }

  // optional int32 second_kind = 3;
  if (has_second_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->second_kind(), target);
  }

  // optional int32 third_kind = 4;
  if (has_third_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->third_kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPreOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

    // optional int32 chi_kind = 2;
    if (has_chi_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_kind());
    }

    // optional int32 second_kind = 3;
    if (has_second_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_kind());
    }

    // optional int32 third_kind = 4;
    if (has_third_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->third_kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPreOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPreOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPreOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPreOperate::MergeFrom(const ReqPreOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_chi_kind()) {
      set_chi_kind(from.chi_kind());
    }
    if (from.has_second_kind()) {
      set_second_kind(from.second_kind());
    }
    if (from.has_third_kind()) {
      set_third_kind(from.third_kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPreOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPreOperate::CopyFrom(const ReqPreOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPreOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqPreOperate::Swap(ReqPreOperate* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    std::swap(chi_kind_, other->chi_kind_);
    std::swap(second_kind_, other->second_kind_);
    std::swap(third_kind_, other->third_kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPreOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPreOperate_descriptor_;
  metadata.reflection = ReqPreOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPreOperate::kOperateTypeFieldNumber;
const int AckPreOperate::kCanOperateFieldNumber;
#endif  // !_MSC_VER

AckPreOperate::AckPreOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPreOperate::InitAsDefaultInstance() {
}

AckPreOperate::AckPreOperate(const AckPreOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPreOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0;
  can_operate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPreOperate::~AckPreOperate() {
  SharedDtor();
}

void AckPreOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPreOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPreOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPreOperate_descriptor_;
}

const AckPreOperate& AckPreOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckPreOperate* AckPreOperate::default_instance_ = NULL;

AckPreOperate* AckPreOperate::New() const {
  return new AckPreOperate;
}

void AckPreOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0;
    can_operate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPreOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_operate;
        break;
      }

      // optional bool can_operate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_operate_)));
          set_has_can_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPreOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate_type(), output);
  }

  // optional bool can_operate = 2;
  if (has_can_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPreOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate_type(), target);
  }

  // optional bool can_operate = 2;
  if (has_can_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPreOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

    // optional bool can_operate = 2;
    if (has_can_operate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPreOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPreOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPreOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPreOperate::MergeFrom(const AckPreOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_can_operate()) {
      set_can_operate(from.can_operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPreOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPreOperate::CopyFrom(const AckPreOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPreOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckPreOperate::Swap(AckPreOperate* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    std::swap(can_operate_, other->can_operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPreOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPreOperate_descriptor_;
  metadata.reflection = AckPreOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOperateCard::kOperateTypeFieldNumber;
const int ReqOperateCard::kChiKindFieldNumber;
const int ReqOperateCard::kSecondKindFieldNumber;
const int ReqOperateCard::kThirdKindFieldNumber;
#endif  // !_MSC_VER

ReqOperateCard::ReqOperateCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOperateCard::InitAsDefaultInstance() {
}

ReqOperateCard::ReqOperateCard(const ReqOperateCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOperateCard::SharedCtor() {
  _cached_size_ = 0;
  operate_type_ = 0;
  chi_kind_ = 0;
  second_kind_ = 0;
  third_kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOperateCard::~ReqOperateCard() {
  SharedDtor();
}

void ReqOperateCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOperateCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOperateCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOperateCard_descriptor_;
}

const ReqOperateCard& ReqOperateCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqOperateCard* ReqOperateCard::default_instance_ = NULL;

ReqOperateCard* ReqOperateCard::New() const {
  return new ReqOperateCard;
}

void ReqOperateCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_type_ = 0;
    chi_kind_ = 0;
    second_kind_ = 0;
    third_kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOperateCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 operate_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chi_kind;
        break;
      }

      // optional int32 chi_kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chi_kind_)));
          set_has_chi_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_second_kind;
        break;
      }

      // optional int32 second_kind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_kind_)));
          set_has_second_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_third_kind;
        break;
      }

      // optional int32 third_kind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_third_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &third_kind_)));
          set_has_third_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOperateCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 operate_type = 1;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate_type(), output);
  }

  // optional int32 chi_kind = 2;
  if (has_chi_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chi_kind(), output);
  }

  // optional int32 second_kind = 3;
  if (has_second_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->second_kind(), output);
  }

  // optional int32 third_kind = 4;
  if (has_third_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->third_kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOperateCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 operate_type = 1;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate_type(), target);
  }

  // optional int32 chi_kind = 2;
  if (has_chi_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chi_kind(), target);
  }

  // optional int32 second_kind = 3;
  if (has_second_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->second_kind(), target);
  }

  // optional int32 third_kind = 4;
  if (has_third_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->third_kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOperateCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 operate_type = 1;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

    // optional int32 chi_kind = 2;
    if (has_chi_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chi_kind());
    }

    // optional int32 second_kind = 3;
    if (has_second_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_kind());
    }

    // optional int32 third_kind = 4;
    if (has_third_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->third_kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOperateCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOperateCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOperateCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOperateCard::MergeFrom(const ReqOperateCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_chi_kind()) {
      set_chi_kind(from.chi_kind());
    }
    if (from.has_second_kind()) {
      set_second_kind(from.second_kind());
    }
    if (from.has_third_kind()) {
      set_third_kind(from.third_kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOperateCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOperateCard::CopyFrom(const ReqOperateCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOperateCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOperateCard::Swap(ReqOperateCard* other) {
  if (other != this) {
    std::swap(operate_type_, other->operate_type_);
    std::swap(chi_kind_, other->chi_kind_);
    std::swap(second_kind_, other->second_kind_);
    std::swap(third_kind_, other->third_kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOperateCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOperateCard_descriptor_;
  metadata.reflection = ReqOperateCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOperateCard::kAckCodeFieldNumber;
const int AckOperateCard::kSeatidFieldNumber;
const int AckOperateCard::kActionCardFieldNumber;
const int AckOperateCard::kRemoveCountFieldNumber;
const int AckOperateCard::kHandCardsFieldNumber;
const int AckOperateCard::kTotalHuxiFieldNumber;
const int AckOperateCard::kHuXiFieldNumber;
const int AckOperateCard::kListenCardsFieldNumber;
const int AckOperateCard::kChiResultsFieldNumber;
const int AckOperateCard::kChouWeiFieldNumber;
const int AckOperateCard::kOffCountFieldNumber;
#endif  // !_MSC_VER

AckOperateCard::AckOperateCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOperateCard::InitAsDefaultInstance() {
}

AckOperateCard::AckOperateCard(const AckOperateCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOperateCard::SharedCtor() {
  _cached_size_ = 0;
  ack_code_ = 0;
  seatid_ = 0;
  action_card_ = 0;
  remove_count_ = 0;
  total_huxi_ = 0;
  hu_xi_ = 0;
  chou_wei_ = false;
  off_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOperateCard::~AckOperateCard() {
  SharedDtor();
}

void AckOperateCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOperateCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOperateCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOperateCard_descriptor_;
}

const AckOperateCard& AckOperateCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckOperateCard* AckOperateCard::default_instance_ = NULL;

AckOperateCard* AckOperateCard::New() const {
  return new AckOperateCard;
}

void AckOperateCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ack_code_ = 0;
    seatid_ = 0;
    action_card_ = 0;
    remove_count_ = 0;
    total_huxi_ = 0;
    hu_xi_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    chou_wei_ = false;
    off_count_ = 0;
  }
  hand_cards_.Clear();
  listen_cards_.Clear();
  chi_results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOperateCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ack_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_code_)));
          set_has_ack_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_card;
        break;
      }

      // optional int32 action_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_card_)));
          set_has_action_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remove_count;
        break;
      }

      // optional int32 remove_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remove_count_)));
          set_has_remove_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hand_cards;
        break;
      }

      // repeated .proto.game.tagHandCards hand_cards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hand_cards;
        if (input->ExpectTag(48)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hu_xi;
        break;
      }

      // optional int32 hu_xi = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_xi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_xi_)));
          set_has_hu_xi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_listen_cards;
        break;
      }

      // repeated int32 listen_cards = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_listen_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listen_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_listen_cards;
        if (input->ExpectTag(74)) goto parse_chi_results;
        break;
      }

      // repeated .proto.game.tagHandCards chi_results = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chi_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chi_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_chi_results;
        if (input->ExpectTag(80)) goto parse_chou_wei;
        break;
      }

      // optional bool chou_wei = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chou_wei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chou_wei_)));
          set_has_chou_wei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_off_count;
        break;
      }

      // optional int32 off_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_off_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &off_count_)));
          set_has_off_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOperateCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ack_code = 1;
  if (has_ack_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ack_code(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 action_card = 3;
  if (has_action_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_card(), output);
  }

  // optional int32 remove_count = 4;
  if (has_remove_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remove_count(), output);
  }

  // repeated .proto.game.tagHandCards hand_cards = 5;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hand_cards(i), output);
  }

  // optional int32 total_huxi = 6;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_huxi(), output);
  }

  // optional int32 hu_xi = 7;
  if (has_hu_xi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hu_xi(), output);
  }

  // repeated int32 listen_cards = 8;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->listen_cards(i), output);
  }

  // repeated .proto.game.tagHandCards chi_results = 9;
  for (int i = 0; i < this->chi_results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->chi_results(i), output);
  }

  // optional bool chou_wei = 10;
  if (has_chou_wei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->chou_wei(), output);
  }

  // optional int32 off_count = 11;
  if (has_off_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->off_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOperateCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ack_code = 1;
  if (has_ack_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ack_code(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 action_card = 3;
  if (has_action_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_card(), target);
  }

  // optional int32 remove_count = 4;
  if (has_remove_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remove_count(), target);
  }

  // repeated .proto.game.tagHandCards hand_cards = 5;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hand_cards(i), target);
  }

  // optional int32 total_huxi = 6;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_huxi(), target);
  }

  // optional int32 hu_xi = 7;
  if (has_hu_xi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hu_xi(), target);
  }

  // repeated int32 listen_cards = 8;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->listen_cards(i), target);
  }

  // repeated .proto.game.tagHandCards chi_results = 9;
  for (int i = 0; i < this->chi_results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->chi_results(i), target);
  }

  // optional bool chou_wei = 10;
  if (has_chou_wei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->chou_wei(), target);
  }

  // optional int32 off_count = 11;
  if (has_off_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->off_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOperateCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ack_code = 1;
    if (has_ack_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ack_code());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 action_card = 3;
    if (has_action_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_card());
    }

    // optional int32 remove_count = 4;
    if (has_remove_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remove_count());
    }

    // optional int32 total_huxi = 6;
    if (has_total_huxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

    // optional int32 hu_xi = 7;
    if (has_hu_xi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_xi());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool chou_wei = 10;
    if (has_chou_wei()) {
      total_size += 1 + 1;
    }

    // optional int32 off_count = 11;
    if (has_off_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->off_count());
    }

  }
  // repeated .proto.game.tagHandCards hand_cards = 5;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated int32 listen_cards = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listen_cards(i));
    }
    total_size += 1 * this->listen_cards_size() + data_size;
  }

  // repeated .proto.game.tagHandCards chi_results = 9;
  total_size += 1 * this->chi_results_size();
  for (int i = 0; i < this->chi_results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chi_results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOperateCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOperateCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOperateCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOperateCard::MergeFrom(const AckOperateCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  listen_cards_.MergeFrom(from.listen_cards_);
  chi_results_.MergeFrom(from.chi_results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ack_code()) {
      set_ack_code(from.ack_code());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_action_card()) {
      set_action_card(from.action_card());
    }
    if (from.has_remove_count()) {
      set_remove_count(from.remove_count());
    }
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
    if (from.has_hu_xi()) {
      set_hu_xi(from.hu_xi());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_chou_wei()) {
      set_chou_wei(from.chou_wei());
    }
    if (from.has_off_count()) {
      set_off_count(from.off_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOperateCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOperateCard::CopyFrom(const AckOperateCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOperateCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckOperateCard::Swap(AckOperateCard* other) {
  if (other != this) {
    std::swap(ack_code_, other->ack_code_);
    std::swap(seatid_, other->seatid_);
    std::swap(action_card_, other->action_card_);
    std::swap(remove_count_, other->remove_count_);
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(total_huxi_, other->total_huxi_);
    std::swap(hu_xi_, other->hu_xi_);
    listen_cards_.Swap(&other->listen_cards_);
    chi_results_.Swap(&other->chi_results_);
    std::swap(chou_wei_, other->chou_wei_);
    std::swap(off_count_, other->off_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOperateCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOperateCard_descriptor_;
  metadata.reflection = AckOperateCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOperateRes::kSeatidFieldNumber;
const int AckOperateRes::kOperateTypeFieldNumber;
const int AckOperateRes::kErrNoFieldNumber;
#endif  // !_MSC_VER

AckOperateRes::AckOperateRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOperateRes::InitAsDefaultInstance() {
}

AckOperateRes::AckOperateRes(const AckOperateRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOperateRes::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  operate_type_ = 0;
  err_no_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOperateRes::~AckOperateRes() {
  SharedDtor();
}

void AckOperateRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOperateRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOperateRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOperateRes_descriptor_;
}

const AckOperateRes& AckOperateRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckOperateRes* AckOperateRes::default_instance_ = NULL;

AckOperateRes* AckOperateRes::New() const {
  return new AckOperateRes;
}

void AckOperateRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    operate_type_ = 0;
    err_no_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOperateRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_type;
        break;
      }

      // optional int32 operate_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOperateRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 operate_type = 2;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate_type(), output);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOperateRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 operate_type = 2;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate_type(), target);
  }

  // optional int32 err_no = 3;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOperateRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 operate_type = 2;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_type());
    }

    // optional int32 err_no = 3;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOperateRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOperateRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOperateRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOperateRes::MergeFrom(const AckOperateRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOperateRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOperateRes::CopyFrom(const AckOperateRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOperateRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckOperateRes::Swap(AckOperateRes* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(err_no_, other->err_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOperateRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOperateRes_descriptor_;
  metadata.reflection = AckOperateRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDispatchCard::kSeatidFieldNumber;
const int AckDispatchCard::kCardFieldNumber;
const int AckDispatchCard::kLeftCardCountFieldNumber;
const int AckDispatchCard::kToSeatidFieldNumber;
const int AckDispatchCard::kHandCardsFieldNumber;
const int AckDispatchCard::kTotalHuxiFieldNumber;
const int AckDispatchCard::kListenCardsFieldNumber;
const int AckDispatchCard::kOffCountFieldNumber;
#endif  // !_MSC_VER

AckDispatchCard::AckDispatchCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDispatchCard::InitAsDefaultInstance() {
}

AckDispatchCard::AckDispatchCard(const AckDispatchCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDispatchCard::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  card_ = 0;
  left_card_count_ = 0;
  to_seatid_ = 0;
  total_huxi_ = 0;
  off_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDispatchCard::~AckDispatchCard() {
  SharedDtor();
}

void AckDispatchCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDispatchCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDispatchCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDispatchCard_descriptor_;
}

const AckDispatchCard& AckDispatchCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDispatchCard* AckDispatchCard::default_instance_ = NULL;

AckDispatchCard* AckDispatchCard::New() const {
  return new AckDispatchCard;
}

void AckDispatchCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    card_ = 0;
    left_card_count_ = 0;
    to_seatid_ = 0;
    total_huxi_ = 0;
    off_count_ = 0;
  }
  hand_cards_.Clear();
  listen_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDispatchCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional int32 card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_card_count;
        break;
      }

      // optional int32 left_card_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_seatid;
        break;
      }

      // optional int32 to_seatid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_seatid_)));
          set_has_to_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hand_cards;
        break;
      }

      // repeated .proto.game.tagHandCards hand_cards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hand_cards;
        if (input->ExpectTag(48)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_listen_cards;
        break;
      }

      // repeated int32 listen_cards = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_listen_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listen_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_listen_cards;
        if (input->ExpectTag(64)) goto parse_off_count;
        break;
      }

      // optional int32 off_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_off_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &off_count_)));
          set_has_off_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDispatchCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  // optional int32 left_card_count = 3;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_card_count(), output);
  }

  // optional int32 to_seatid = 4;
  if (has_to_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->to_seatid(), output);
  }

  // repeated .proto.game.tagHandCards hand_cards = 5;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hand_cards(i), output);
  }

  // optional int32 total_huxi = 6;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_huxi(), output);
  }

  // repeated int32 listen_cards = 7;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->listen_cards(i), output);
  }

  // optional int32 off_count = 8;
  if (has_off_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->off_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDispatchCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  // optional int32 left_card_count = 3;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_card_count(), target);
  }

  // optional int32 to_seatid = 4;
  if (has_to_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->to_seatid(), target);
  }

  // repeated .proto.game.tagHandCards hand_cards = 5;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hand_cards(i), target);
  }

  // optional int32 total_huxi = 6;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_huxi(), target);
  }

  // repeated int32 listen_cards = 7;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->listen_cards(i), target);
  }

  // optional int32 off_count = 8;
  if (has_off_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->off_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDispatchCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 left_card_count = 3;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card_count());
    }

    // optional int32 to_seatid = 4;
    if (has_to_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_seatid());
    }

    // optional int32 total_huxi = 6;
    if (has_total_huxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

    // optional int32 off_count = 8;
    if (has_off_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->off_count());
    }

  }
  // repeated .proto.game.tagHandCards hand_cards = 5;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated int32 listen_cards = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listen_cards(i));
    }
    total_size += 1 * this->listen_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDispatchCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDispatchCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDispatchCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDispatchCard::MergeFrom(const AckDispatchCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  listen_cards_.MergeFrom(from.listen_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
    if (from.has_to_seatid()) {
      set_to_seatid(from.to_seatid());
    }
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
    if (from.has_off_count()) {
      set_off_count(from.off_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDispatchCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDispatchCard::CopyFrom(const AckDispatchCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDispatchCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDispatchCard::Swap(AckDispatchCard* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(card_, other->card_);
    std::swap(left_card_count_, other->left_card_count_);
    std::swap(to_seatid_, other->to_seatid_);
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(total_huxi_, other->total_huxi_);
    listen_cards_.Swap(&other->listen_cards_);
    std::swap(off_count_, other->off_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDispatchCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDispatchCard_descriptor_;
  metadata.reflection = AckDispatchCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOutNotify::kSeatidFieldNumber;
const int AckOutNotify::kIsOutCardFieldNumber;
const int AckOutNotify::kOffCountFieldNumber;
#endif  // !_MSC_VER

AckOutNotify::AckOutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOutNotify::InitAsDefaultInstance() {
}

AckOutNotify::AckOutNotify(const AckOutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOutNotify::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  is_out_card_ = false;
  off_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOutNotify::~AckOutNotify() {
  SharedDtor();
}

void AckOutNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOutNotify_descriptor_;
}

const AckOutNotify& AckOutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckOutNotify* AckOutNotify::default_instance_ = NULL;

AckOutNotify* AckOutNotify::New() const {
  return new AckOutNotify;
}

void AckOutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    is_out_card_ = false;
    off_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_out_card;
        break;
      }

      // optional bool is_out_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_out_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_card_)));
          set_has_is_out_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_off_count;
        break;
      }

      // optional int32 off_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_off_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &off_count_)));
          set_has_off_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional bool is_out_card = 2;
  if (has_is_out_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_out_card(), output);
  }

  // optional int32 off_count = 3;
  if (has_off_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->off_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional bool is_out_card = 2;
  if (has_is_out_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_out_card(), target);
  }

  // optional int32 off_count = 3;
  if (has_off_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->off_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOutNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional bool is_out_card = 2;
    if (has_is_out_card()) {
      total_size += 1 + 1;
    }

    // optional int32 off_count = 3;
    if (has_off_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->off_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOutNotify::MergeFrom(const AckOutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_is_out_card()) {
      set_is_out_card(from.is_out_card());
    }
    if (from.has_off_count()) {
      set_off_count(from.off_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOutNotify::CopyFrom(const AckOutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOutNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckOutNotify::Swap(AckOutNotify* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(is_out_card_, other->is_out_card_);
    std::swap(off_count_, other->off_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOutNotify_descriptor_;
  metadata.reflection = AckOutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckXiangGong::kSeatidFieldNumber;
#endif  // !_MSC_VER

AckXiangGong::AckXiangGong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckXiangGong::InitAsDefaultInstance() {
}

AckXiangGong::AckXiangGong(const AckXiangGong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckXiangGong::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckXiangGong::~AckXiangGong() {
  SharedDtor();
}

void AckXiangGong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckXiangGong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckXiangGong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckXiangGong_descriptor_;
}

const AckXiangGong& AckXiangGong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckXiangGong* AckXiangGong::default_instance_ = NULL;

AckXiangGong* AckXiangGong::New() const {
  return new AckXiangGong;
}

void AckXiangGong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckXiangGong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckXiangGong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckXiangGong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckXiangGong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckXiangGong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckXiangGong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckXiangGong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckXiangGong::MergeFrom(const AckXiangGong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckXiangGong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckXiangGong::CopyFrom(const AckXiangGong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckXiangGong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckXiangGong::Swap(AckXiangGong* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckXiangGong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckXiangGong_descriptor_;
  metadata.reflection = AckXiangGong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOutCard::kOutCardFieldNumber;
const int ReqOutCard::kRowFieldNumber;
const int ReqOutCard::kColFieldNumber;
#endif  // !_MSC_VER

ReqOutCard::ReqOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOutCard::InitAsDefaultInstance() {
}

ReqOutCard::ReqOutCard(const ReqOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOutCard::SharedCtor() {
  _cached_size_ = 0;
  out_card_ = 0;
  row_ = 0;
  col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOutCard::~ReqOutCard() {
  SharedDtor();
}

void ReqOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOutCard_descriptor_;
}

const ReqOutCard& ReqOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqOutCard* ReqOutCard::default_instance_ = NULL;

ReqOutCard* ReqOutCard::New() const {
  return new ReqOutCard;
}

void ReqOutCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    out_card_ = 0;
    row_ = 0;
    col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 out_card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_card_)));
          set_has_out_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_row;
        break;
      }

      // optional int32 row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_col;
        break;
      }

      // optional int32 col = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 out_card = 1;
  if (has_out_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->out_card(), output);
  }

  // optional int32 row = 2;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->row(), output);
  }

  // optional int32 col = 3;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 out_card = 1;
  if (has_out_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->out_card(), target);
  }

  // optional int32 row = 2;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->row(), target);
  }

  // optional int32 col = 3;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 out_card = 1;
    if (has_out_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_card());
    }

    // optional int32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // optional int32 col = 3;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOutCard::MergeFrom(const ReqOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_card()) {
      set_out_card(from.out_card());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOutCard::CopyFrom(const ReqOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOutCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOutCard::Swap(ReqOutCard* other) {
  if (other != this) {
    std::swap(out_card_, other->out_card_);
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOutCard_descriptor_;
  metadata.reflection = ReqOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOutCard::kSeatidFieldNumber;
const int AckOutCard::kOutCardFieldNumber;
const int AckOutCard::kTotalHuxiFieldNumber;
const int AckOutCard::kHandCardsFieldNumber;
const int AckOutCard::kListenCardsFieldNumber;
const int AckOutCard::kOffCountFieldNumber;
#endif  // !_MSC_VER

AckOutCard::AckOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOutCard::InitAsDefaultInstance() {
}

AckOutCard::AckOutCard(const AckOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOutCard::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  out_card_ = 0;
  total_huxi_ = 0;
  off_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOutCard::~AckOutCard() {
  SharedDtor();
}

void AckOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOutCard_descriptor_;
}

const AckOutCard& AckOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckOutCard* AckOutCard::default_instance_ = NULL;

AckOutCard* AckOutCard::New() const {
  return new AckOutCard;
}

void AckOutCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    out_card_ = 0;
    total_huxi_ = 0;
    off_count_ = 0;
  }
  hand_cards_.Clear();
  listen_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_card;
        break;
      }

      // optional int32 out_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_card_)));
          set_has_out_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hand_cards;
        break;
      }

      // repeated .proto.game.tagHandCards hand_cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hand_cards;
        if (input->ExpectTag(40)) goto parse_listen_cards;
        break;
      }

      // repeated int32 listen_cards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_listen_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listen_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_listen_cards;
        if (input->ExpectTag(48)) goto parse_off_count;
        break;
      }

      // optional int32 off_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_off_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &off_count_)));
          set_has_off_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 out_card = 2;
  if (has_out_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_card(), output);
  }

  // optional int32 total_huxi = 3;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_huxi(), output);
  }

  // repeated .proto.game.tagHandCards hand_cards = 4;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hand_cards(i), output);
  }

  // repeated int32 listen_cards = 5;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->listen_cards(i), output);
  }

  // optional int32 off_count = 6;
  if (has_off_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->off_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 out_card = 2;
  if (has_out_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->out_card(), target);
  }

  // optional int32 total_huxi = 3;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_huxi(), target);
  }

  // repeated .proto.game.tagHandCards hand_cards = 4;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hand_cards(i), target);
  }

  // repeated int32 listen_cards = 5;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->listen_cards(i), target);
  }

  // optional int32 off_count = 6;
  if (has_off_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->off_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 out_card = 2;
    if (has_out_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_card());
    }

    // optional int32 total_huxi = 3;
    if (has_total_huxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

    // optional int32 off_count = 6;
    if (has_off_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->off_count());
    }

  }
  // repeated .proto.game.tagHandCards hand_cards = 4;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated int32 listen_cards = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listen_cards(i));
    }
    total_size += 1 * this->listen_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOutCard::MergeFrom(const AckOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  listen_cards_.MergeFrom(from.listen_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_out_card()) {
      set_out_card(from.out_card());
    }
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
    if (from.has_off_count()) {
      set_off_count(from.off_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOutCard::CopyFrom(const AckOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOutCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckOutCard::Swap(AckOutCard* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(out_card_, other->out_card_);
    std::swap(total_huxi_, other->total_huxi_);
    hand_cards_.Swap(&other->hand_cards_);
    listen_cards_.Swap(&other->listen_cards_);
    std::swap(off_count_, other->off_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOutCard_descriptor_;
  metadata.reflection = AckOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChangeCard::kHandCardsFieldNumber;
#endif  // !_MSC_VER

ReqChangeCard::ReqChangeCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChangeCard::InitAsDefaultInstance() {
}

ReqChangeCard::ReqChangeCard(const ReqChangeCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChangeCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChangeCard::~ReqChangeCard() {
  SharedDtor();
}

void ReqChangeCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChangeCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChangeCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChangeCard_descriptor_;
}

const ReqChangeCard& ReqChangeCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqChangeCard* ReqChangeCard::default_instance_ = NULL;

ReqChangeCard* ReqChangeCard::New() const {
  return new ReqChangeCard;
}

void ReqChangeCard::Clear() {
  hand_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChangeCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagHandCards hand_cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hand_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChangeCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.tagHandCards hand_cards = 1;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hand_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChangeCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.tagHandCards hand_cards = 1;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hand_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChangeCard::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.tagHandCards hand_cards = 1;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChangeCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChangeCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChangeCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChangeCard::MergeFrom(const ReqChangeCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChangeCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChangeCard::CopyFrom(const ReqChangeCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChangeCard::IsInitialized() const {

  return true;
}

void ReqChangeCard::Swap(ReqChangeCard* other) {
  if (other != this) {
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChangeCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChangeCard_descriptor_;
  metadata.reflection = ReqChangeCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChangeCard::kHandCardsFieldNumber;
const int AckChangeCard::kTotalHuxiFieldNumber;
#endif  // !_MSC_VER

AckChangeCard::AckChangeCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChangeCard::InitAsDefaultInstance() {
}

AckChangeCard::AckChangeCard(const AckChangeCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChangeCard::SharedCtor() {
  _cached_size_ = 0;
  total_huxi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChangeCard::~AckChangeCard() {
  SharedDtor();
}

void AckChangeCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChangeCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChangeCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChangeCard_descriptor_;
}

const AckChangeCard& AckChangeCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckChangeCard* AckChangeCard::default_instance_ = NULL;

AckChangeCard* AckChangeCard::New() const {
  return new AckChangeCard;
}

void AckChangeCard::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_huxi_ = 0;
  }
  hand_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChangeCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagHandCards hand_cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hand_cards;
        if (input->ExpectTag(16)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChangeCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.tagHandCards hand_cards = 1;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hand_cards(i), output);
  }

  // optional int32 total_huxi = 2;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_huxi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChangeCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.tagHandCards hand_cards = 1;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hand_cards(i), target);
  }

  // optional int32 total_huxi = 2;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_huxi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChangeCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_huxi = 2;
    if (has_total_huxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

  }
  // repeated .proto.game.tagHandCards hand_cards = 1;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChangeCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChangeCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChangeCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChangeCard::MergeFrom(const AckChangeCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChangeCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChangeCard::CopyFrom(const AckChangeCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChangeCard::IsInitialized() const {

  return true;
}

void AckChangeCard::Swap(AckChangeCard* other) {
  if (other != this) {
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(total_huxi_, other->total_huxi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChangeCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChangeCard_descriptor_;
  metadata.reflection = AckChangeCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateCard::kHandCardsFieldNumber;
const int AckUpdateCard::kTotalHuxiFieldNumber;
const int AckUpdateCard::kListenCardsFieldNumber;
#endif  // !_MSC_VER

AckUpdateCard::AckUpdateCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateCard::InitAsDefaultInstance() {
}

AckUpdateCard::AckUpdateCard(const AckUpdateCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateCard::SharedCtor() {
  _cached_size_ = 0;
  total_huxi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateCard::~AckUpdateCard() {
  SharedDtor();
}

void AckUpdateCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateCard_descriptor_;
}

const AckUpdateCard& AckUpdateCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUpdateCard* AckUpdateCard::default_instance_ = NULL;

AckUpdateCard* AckUpdateCard::New() const {
  return new AckUpdateCard;
}

void AckUpdateCard::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_huxi_ = 0;
  }
  hand_cards_.Clear();
  listen_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagHandCards hand_cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hand_cards;
        if (input->ExpectTag(16)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_listen_cards;
        break;
      }

      // repeated int32 listen_cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_listen_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listen_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_listen_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.tagHandCards hand_cards = 1;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hand_cards(i), output);
  }

  // optional int32 total_huxi = 2;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_huxi(), output);
  }

  // repeated int32 listen_cards = 3;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->listen_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.tagHandCards hand_cards = 1;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hand_cards(i), target);
  }

  // optional int32 total_huxi = 2;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_huxi(), target);
  }

  // repeated int32 listen_cards = 3;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->listen_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 total_huxi = 2;
    if (has_total_huxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

  }
  // repeated .proto.game.tagHandCards hand_cards = 1;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated int32 listen_cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listen_cards(i));
    }
    total_size += 1 * this->listen_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateCard::MergeFrom(const AckUpdateCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  listen_cards_.MergeFrom(from.listen_cards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateCard::CopyFrom(const AckUpdateCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateCard::IsInitialized() const {

  return true;
}

void AckUpdateCard::Swap(AckUpdateCard* other) {
  if (other != this) {
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(total_huxi_, other->total_huxi_);
    listen_cards_.Swap(&other->listen_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateCard_descriptor_;
  metadata.reflection = AckUpdateCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateAbandon::kSeatidFieldNumber;
const int AckUpdateAbandon::kCardFieldNumber;
const int AckUpdateAbandon::kAbandonCardsFieldNumber;
const int AckUpdateAbandon::kOffCountFieldNumber;
const int AckUpdateAbandon::kAbandonTypeFieldNumber;
#endif  // !_MSC_VER

AckUpdateAbandon::AckUpdateAbandon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUpdateAbandon::InitAsDefaultInstance() {
}

AckUpdateAbandon::AckUpdateAbandon(const AckUpdateAbandon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUpdateAbandon::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  card_ = 0;
  off_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateAbandon::~AckUpdateAbandon() {
  SharedDtor();
}

void AckUpdateAbandon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateAbandon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateAbandon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateAbandon_descriptor_;
}

const AckUpdateAbandon& AckUpdateAbandon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUpdateAbandon* AckUpdateAbandon::default_instance_ = NULL;

AckUpdateAbandon* AckUpdateAbandon::New() const {
  return new AckUpdateAbandon;
}

void AckUpdateAbandon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    card_ = 0;
    off_count_ = 0;
  }
  abandon_cards_.Clear();
  abandon_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateAbandon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional int32 card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_abandon_cards;
        break;
      }

      // repeated int32 abandon_cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abandon_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_abandon_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_abandon_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_abandon_cards;
        if (input->ExpectTag(32)) goto parse_off_count;
        break;
      }

      // optional int32 off_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_off_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &off_count_)));
          set_has_off_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_abandon_type;
        break;
      }

      // repeated int32 abandon_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_abandon_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_abandon_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_abandon_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_abandon_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUpdateAbandon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  // repeated int32 abandon_cards = 3;
  for (int i = 0; i < this->abandon_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->abandon_cards(i), output);
  }

  // optional int32 off_count = 4;
  if (has_off_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->off_count(), output);
  }

  // repeated int32 abandon_type = 5;
  for (int i = 0; i < this->abandon_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->abandon_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUpdateAbandon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  // repeated int32 abandon_cards = 3;
  for (int i = 0; i < this->abandon_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->abandon_cards(i), target);
  }

  // optional int32 off_count = 4;
  if (has_off_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->off_count(), target);
  }

  // repeated int32 abandon_type = 5;
  for (int i = 0; i < this->abandon_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->abandon_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUpdateAbandon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 off_count = 4;
    if (has_off_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->off_count());
    }

  }
  // repeated int32 abandon_cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->abandon_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->abandon_cards(i));
    }
    total_size += 1 * this->abandon_cards_size() + data_size;
  }

  // repeated int32 abandon_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->abandon_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->abandon_type(i));
    }
    total_size += 1 * this->abandon_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateAbandon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateAbandon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateAbandon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateAbandon::MergeFrom(const AckUpdateAbandon& from) {
  GOOGLE_CHECK_NE(&from, this);
  abandon_cards_.MergeFrom(from.abandon_cards_);
  abandon_type_.MergeFrom(from.abandon_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_off_count()) {
      set_off_count(from.off_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateAbandon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateAbandon::CopyFrom(const AckUpdateAbandon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateAbandon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUpdateAbandon::Swap(AckUpdateAbandon* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(card_, other->card_);
    abandon_cards_.Swap(&other->abandon_cards_);
    std::swap(off_count_, other->off_count_);
    abandon_type_.Swap(&other->abandon_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateAbandon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateAbandon_descriptor_;
  metadata.reflection = AckUpdateAbandon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagFanInfo::kFanTypeFieldNumber;
const int tagFanInfo::kFanNumFieldNumber;
#endif  // !_MSC_VER

tagFanInfo::tagFanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tagFanInfo::InitAsDefaultInstance() {
}

tagFanInfo::tagFanInfo(const tagFanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tagFanInfo::SharedCtor() {
  _cached_size_ = 0;
  fan_type_ = 0;
  fan_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagFanInfo::~tagFanInfo() {
  SharedDtor();
}

void tagFanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagFanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagFanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagFanInfo_descriptor_;
}

const tagFanInfo& tagFanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagFanInfo* tagFanInfo::default_instance_ = NULL;

tagFanInfo* tagFanInfo::New() const {
  return new tagFanInfo;
}

void tagFanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fan_type_ = 0;
    fan_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagFanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fan_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fan_type_)));
          set_has_fan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fan_num;
        break;
      }

      // optional int32 fan_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fan_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fan_num_)));
          set_has_fan_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tagFanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fan_type = 1;
  if (has_fan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fan_type(), output);
  }

  // optional int32 fan_num = 2;
  if (has_fan_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fan_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tagFanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fan_type = 1;
  if (has_fan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fan_type(), target);
  }

  // optional int32 fan_num = 2;
  if (has_fan_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fan_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tagFanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fan_type = 1;
    if (has_fan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fan_type());
    }

    // optional int32 fan_num = 2;
    if (has_fan_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fan_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagFanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagFanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagFanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagFanInfo::MergeFrom(const tagFanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fan_type()) {
      set_fan_type(from.fan_type());
    }
    if (from.has_fan_num()) {
      set_fan_num(from.fan_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagFanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagFanInfo::CopyFrom(const tagFanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagFanInfo::IsInitialized() const {

  return true;
}

void tagFanInfo::Swap(tagFanInfo* other) {
  if (other != this) {
    std::swap(fan_type_, other->fan_type_);
    std::swap(fan_num_, other->fan_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagFanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagFanInfo_descriptor_;
  metadata.reflection = tagFanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameEnd::kEndTypeFieldNumber;
const int AckGameEnd::kWinSeatidFieldNumber;
const int AckGameEnd::kHuCardFieldNumber;
const int AckGameEnd::kLeftCardsFieldNumber;
const int AckGameEnd::kTotalHuxiFieldNumber;
const int AckGameEnd::kHuXisFieldNumber;
const int AckGameEnd::kTunsFieldNumber;
const int AckGameEnd::kFansFieldNumber;
const int AckGameEnd::kFanInfoFieldNumber;
const int AckGameEnd::kWeavesFieldNumber;
const int AckGameEnd::kPlayersFieldNumber;
const int AckGameEnd::kOffCountFieldNumber;
const int AckGameEnd::kDianPaoFieldNumber;
const int AckGameEnd::kDianPaoUserFieldNumber;
#endif  // !_MSC_VER

AckGameEnd::AckGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameEnd::InitAsDefaultInstance() {
}

AckGameEnd::AckGameEnd(const AckGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameEnd::SharedCtor() {
  _cached_size_ = 0;
  end_type_ = 0;
  win_seatid_ = 0;
  hu_card_ = 0;
  total_huxi_ = 0;
  hu_xis_ = 0;
  tuns_ = 0;
  fans_ = 0;
  off_count_ = 0;
  dian_pao_ = false;
  dian_pao_user_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameEnd::~AckGameEnd() {
  SharedDtor();
}

void AckGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameEnd_descriptor_;
}

const AckGameEnd& AckGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameEnd* AckGameEnd::default_instance_ = NULL;

AckGameEnd* AckGameEnd::New() const {
  return new AckGameEnd;
}

void AckGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    end_type_ = 0;
    win_seatid_ = 0;
    hu_card_ = 0;
    total_huxi_ = 0;
    hu_xis_ = 0;
    tuns_ = 0;
    fans_ = 0;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    off_count_ = 0;
    dian_pao_ = false;
    dian_pao_user_ = 0;
  }
  left_cards_.Clear();
  fan_info_.Clear();
  weaves_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 end_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_type_)));
          set_has_end_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_seatid;
        break;
      }

      // optional int32 win_seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_seatid_)));
          set_has_win_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hu_card;
        break;
      }

      // optional int32 hu_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_card_)));
          set_has_hu_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_cards;
        break;
      }

      // repeated int32 left_cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_left_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_left_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_cards;
        if (input->ExpectTag(40)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hu_xis;
        break;
      }

      // optional int32 hu_xis = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hu_xis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_xis_)));
          set_has_hu_xis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tuns;
        break;
      }

      // optional int32 tuns = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tuns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuns_)));
          set_has_tuns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fans;
        break;
      }

      // optional int32 fans = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fans_)));
          set_has_fans();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fan_info;
        break;
      }

      // repeated .proto.game.tagFanInfo fan_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fan_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fan_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fan_info;
        if (input->ExpectTag(82)) goto parse_weaves;
        break;
      }

      // repeated .proto.game.tagWeaveCards weaves = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_weaves;
        if (input->ExpectTag(90)) goto parse_players;
        break;
      }

      // repeated .proto.game.tagPlayers players = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_players;
        if (input->ExpectTag(96)) goto parse_off_count;
        break;
      }

      // optional int32 off_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_off_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &off_count_)));
          set_has_off_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dian_pao;
        break;
      }

      // optional bool dian_pao = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dian_pao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dian_pao_)));
          set_has_dian_pao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dian_pao_user;
        break;
      }

      // optional int32 dian_pao_user = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dian_pao_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dian_pao_user_)));
          set_has_dian_pao_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 end_type = 1;
  if (has_end_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->end_type(), output);
  }

  // optional int32 win_seatid = 2;
  if (has_win_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_seatid(), output);
  }

  // optional int32 hu_card = 3;
  if (has_hu_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hu_card(), output);
  }

  // repeated int32 left_cards = 4;
  for (int i = 0; i < this->left_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->left_cards(i), output);
  }

  // optional int32 total_huxi = 5;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_huxi(), output);
  }

  // optional int32 hu_xis = 6;
  if (has_hu_xis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hu_xis(), output);
  }

  // optional int32 tuns = 7;
  if (has_tuns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tuns(), output);
  }

  // optional int32 fans = 8;
  if (has_fans()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fans(), output);
  }

  // repeated .proto.game.tagFanInfo fan_info = 9;
  for (int i = 0; i < this->fan_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fan_info(i), output);
  }

  // repeated .proto.game.tagWeaveCards weaves = 10;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->weaves(i), output);
  }

  // repeated .proto.game.tagPlayers players = 11;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->players(i), output);
  }

  // optional int32 off_count = 12;
  if (has_off_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->off_count(), output);
  }

  // optional bool dian_pao = 13;
  if (has_dian_pao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->dian_pao(), output);
  }

  // optional int32 dian_pao_user = 14;
  if (has_dian_pao_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->dian_pao_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 end_type = 1;
  if (has_end_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->end_type(), target);
  }

  // optional int32 win_seatid = 2;
  if (has_win_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_seatid(), target);
  }

  // optional int32 hu_card = 3;
  if (has_hu_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hu_card(), target);
  }

  // repeated int32 left_cards = 4;
  for (int i = 0; i < this->left_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->left_cards(i), target);
  }

  // optional int32 total_huxi = 5;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_huxi(), target);
  }

  // optional int32 hu_xis = 6;
  if (has_hu_xis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hu_xis(), target);
  }

  // optional int32 tuns = 7;
  if (has_tuns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tuns(), target);
  }

  // optional int32 fans = 8;
  if (has_fans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fans(), target);
  }

  // repeated .proto.game.tagFanInfo fan_info = 9;
  for (int i = 0; i < this->fan_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->fan_info(i), target);
  }

  // repeated .proto.game.tagWeaveCards weaves = 10;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->weaves(i), target);
  }

  // repeated .proto.game.tagPlayers players = 11;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->players(i), target);
  }

  // optional int32 off_count = 12;
  if (has_off_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->off_count(), target);
  }

  // optional bool dian_pao = 13;
  if (has_dian_pao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->dian_pao(), target);
  }

  // optional int32 dian_pao_user = 14;
  if (has_dian_pao_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->dian_pao_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 end_type = 1;
    if (has_end_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_type());
    }

    // optional int32 win_seatid = 2;
    if (has_win_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_seatid());
    }

    // optional int32 hu_card = 3;
    if (has_hu_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_card());
    }

    // optional int32 total_huxi = 5;
    if (has_total_huxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

    // optional int32 hu_xis = 6;
    if (has_hu_xis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_xis());
    }

    // optional int32 tuns = 7;
    if (has_tuns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tuns());
    }

    // optional int32 fans = 8;
    if (has_fans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fans());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional int32 off_count = 12;
    if (has_off_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->off_count());
    }

    // optional bool dian_pao = 13;
    if (has_dian_pao()) {
      total_size += 1 + 1;
    }

    // optional int32 dian_pao_user = 14;
    if (has_dian_pao_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dian_pao_user());
    }

  }
  // repeated int32 left_cards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->left_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->left_cards(i));
    }
    total_size += 1 * this->left_cards_size() + data_size;
  }

  // repeated .proto.game.tagFanInfo fan_info = 9;
  total_size += 1 * this->fan_info_size();
  for (int i = 0; i < this->fan_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fan_info(i));
  }

  // repeated .proto.game.tagWeaveCards weaves = 10;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  // repeated .proto.game.tagPlayers players = 11;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameEnd::MergeFrom(const AckGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  left_cards_.MergeFrom(from.left_cards_);
  fan_info_.MergeFrom(from.fan_info_);
  weaves_.MergeFrom(from.weaves_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_end_type()) {
      set_end_type(from.end_type());
    }
    if (from.has_win_seatid()) {
      set_win_seatid(from.win_seatid());
    }
    if (from.has_hu_card()) {
      set_hu_card(from.hu_card());
    }
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
    if (from.has_hu_xis()) {
      set_hu_xis(from.hu_xis());
    }
    if (from.has_tuns()) {
      set_tuns(from.tuns());
    }
    if (from.has_fans()) {
      set_fans(from.fans());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_off_count()) {
      set_off_count(from.off_count());
    }
    if (from.has_dian_pao()) {
      set_dian_pao(from.dian_pao());
    }
    if (from.has_dian_pao_user()) {
      set_dian_pao_user(from.dian_pao_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameEnd::CopyFrom(const AckGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameEnd::Swap(AckGameEnd* other) {
  if (other != this) {
    std::swap(end_type_, other->end_type_);
    std::swap(win_seatid_, other->win_seatid_);
    std::swap(hu_card_, other->hu_card_);
    left_cards_.Swap(&other->left_cards_);
    std::swap(total_huxi_, other->total_huxi_);
    std::swap(hu_xis_, other->hu_xis_);
    std::swap(tuns_, other->tuns_);
    std::swap(fans_, other->fans_);
    fan_info_.Swap(&other->fan_info_);
    weaves_.Swap(&other->weaves_);
    players_.Swap(&other->players_);
    std::swap(off_count_, other->off_count_);
    std::swap(dian_pao_, other->dian_pao_);
    std::swap(dian_pao_user_, other->dian_pao_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameEnd_descriptor_;
  metadata.reflection = AckGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameStartFail::kVidFieldNumber;
const int AckGameStartFail::kRoomidFieldNumber;
const int AckGameStartFail::kCanStartFieldNumber;
const int AckGameStartFail::kCodeFieldNumber;
const int AckGameStartFail::kTsFieldNumber;
#endif  // !_MSC_VER

AckGameStartFail::AckGameStartFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGameStartFail::InitAsDefaultInstance() {
}

AckGameStartFail::AckGameStartFail(const AckGameStartFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGameStartFail::SharedCtor() {
  _cached_size_ = 0;
  vid_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  can_start_ = 0;
  code_ = 0;
  ts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameStartFail::~AckGameStartFail() {
  SharedDtor();
}

void AckGameStartFail::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void AckGameStartFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameStartFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameStartFail_descriptor_;
}

const AckGameStartFail& AckGameStartFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameStartFail* AckGameStartFail::default_instance_ = NULL;

AckGameStartFail* AckGameStartFail::New() const {
  return new AckGameStartFail;
}

void AckGameStartFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vid_ = 0;
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    can_start_ = 0;
    code_ = 0;
    ts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameStartFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // optional bytes roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_start;
        break;
      }

      // optional int32 can_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_start_)));
          set_has_can_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // optional int32 code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // optional int32 ts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGameStartFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 vid = 1;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }

  // optional bytes roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->roomid(), output);
  }

  // optional int32 can_start = 3;
  if (has_can_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->can_start(), output);
  }

  // optional int32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  // optional int32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGameStartFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vid = 1;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }

  // optional bytes roomid = 2;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->roomid(), target);
  }

  // optional int32 can_start = 3;
  if (has_can_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->can_start(), target);
  }

  // optional int32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  // optional int32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGameStartFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }

    // optional bytes roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional int32 can_start = 3;
    if (has_can_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_start());
    }

    // optional int32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameStartFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameStartFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameStartFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameStartFail::MergeFrom(const AckGameStartFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vid()) {
      set_vid(from.vid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_can_start()) {
      set_can_start(from.can_start());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameStartFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameStartFail::CopyFrom(const AckGameStartFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameStartFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameStartFail::Swap(AckGameStartFail* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(roomid_, other->roomid_);
    std::swap(can_start_, other->can_start_);
    std::swap(code_, other->code_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameStartFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameStartFail_descriptor_;
  metadata.reflection = AckGameStartFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserReady::kSeatidFieldNumber;
const int AckUserReady::kUidFieldNumber;
#endif  // !_MSC_VER

AckUserReady::AckUserReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserReady::InitAsDefaultInstance() {
}

AckUserReady::AckUserReady(const AckUserReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserReady::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserReady::~AckUserReady() {
  SharedDtor();
}

void AckUserReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserReady_descriptor_;
}

const AckUserReady& AckUserReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserReady* AckUserReady::default_instance_ = NULL;

AckUserReady* AckUserReady::New() const {
  return new AckUserReady;
}

void AckUserReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    uid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserReady::MergeFrom(const AckUserReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserReady::CopyFrom(const AckUserReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUserReady::Swap(AckUserReady* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserReady_descriptor_;
  metadata.reflection = AckUserReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDissolveErr::kCodeFieldNumber;
#endif  // !_MSC_VER

AckDissolveErr::AckDissolveErr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDissolveErr::InitAsDefaultInstance() {
}

AckDissolveErr::AckDissolveErr(const AckDissolveErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDissolveErr::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDissolveErr::~AckDissolveErr() {
  SharedDtor();
}

void AckDissolveErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDissolveErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDissolveErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDissolveErr_descriptor_;
}

const AckDissolveErr& AckDissolveErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDissolveErr* AckDissolveErr::default_instance_ = NULL;

AckDissolveErr* AckDissolveErr::New() const {
  return new AckDissolveErr;
}

void AckDissolveErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDissolveErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDissolveErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDissolveErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDissolveErr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDissolveErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDissolveErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDissolveErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDissolveErr::MergeFrom(const AckDissolveErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDissolveErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDissolveErr::CopyFrom(const AckDissolveErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDissolveErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDissolveErr::Swap(AckDissolveErr* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDissolveErr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDissolveErr_descriptor_;
  metadata.reflection = AckDissolveErr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDissolveSucc::kUidFieldNumber;
const int AckDissolveSucc::kVotersUidFieldNumber;
const int AckDissolveSucc::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

AckDissolveSucc::AckDissolveSucc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDissolveSucc::InitAsDefaultInstance() {
}

AckDissolveSucc::AckDissolveSucc(const AckDissolveSucc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDissolveSucc::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  remain_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDissolveSucc::~AckDissolveSucc() {
  SharedDtor();
}

void AckDissolveSucc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDissolveSucc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDissolveSucc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDissolveSucc_descriptor_;
}

const AckDissolveSucc& AckDissolveSucc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDissolveSucc* AckDissolveSucc::default_instance_ = NULL;

AckDissolveSucc* AckDissolveSucc::New() const {
  return new AckDissolveSucc;
}

void AckDissolveSucc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    remain_time_ = 0;
  }
  voters_uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDissolveSucc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_voters_uid;
        break;
      }

      // repeated int32 voters_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voters_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_voters_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_voters_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_voters_uid;
        if (input->ExpectTag(24)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDissolveSucc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // repeated int32 voters_uid = 2;
  for (int i = 0; i < this->voters_uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->voters_uid(i), output);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDissolveSucc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // repeated int32 voters_uid = 2;
  for (int i = 0; i < this->voters_uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->voters_uid(i), target);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDissolveSucc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 remain_time = 3;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

  }
  // repeated int32 voters_uid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->voters_uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->voters_uid(i));
    }
    total_size += 1 * this->voters_uid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDissolveSucc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDissolveSucc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDissolveSucc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDissolveSucc::MergeFrom(const AckDissolveSucc& from) {
  GOOGLE_CHECK_NE(&from, this);
  voters_uid_.MergeFrom(from.voters_uid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDissolveSucc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDissolveSucc::CopyFrom(const AckDissolveSucc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDissolveSucc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDissolveSucc::Swap(AckDissolveSucc* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    voters_uid_.Swap(&other->voters_uid_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDissolveSucc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDissolveSucc_descriptor_;
  metadata.reflection = AckDissolveSucc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDissolveAct::kUidFieldNumber;
const int ReqDissolveAct::kActionFieldNumber;
#endif  // !_MSC_VER

ReqDissolveAct::ReqDissolveAct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDissolveAct::InitAsDefaultInstance() {
}

ReqDissolveAct::ReqDissolveAct(const ReqDissolveAct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDissolveAct::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDissolveAct::~ReqDissolveAct() {
  SharedDtor();
}

void ReqDissolveAct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDissolveAct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDissolveAct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDissolveAct_descriptor_;
}

const ReqDissolveAct& ReqDissolveAct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqDissolveAct* ReqDissolveAct::default_instance_ = NULL;

ReqDissolveAct* ReqDissolveAct::New() const {
  return new ReqDissolveAct;
}

void ReqDissolveAct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDissolveAct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional int32 action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDissolveAct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDissolveAct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDissolveAct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDissolveAct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDissolveAct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDissolveAct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDissolveAct::MergeFrom(const ReqDissolveAct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDissolveAct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDissolveAct::CopyFrom(const ReqDissolveAct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDissolveAct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqDissolveAct::Swap(ReqDissolveAct* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDissolveAct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDissolveAct_descriptor_;
  metadata.reflection = ReqDissolveAct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDissolveActSucc::kUidFieldNumber;
const int AckDissolveActSucc::kActionFieldNumber;
#endif  // !_MSC_VER

AckDissolveActSucc::AckDissolveActSucc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDissolveActSucc::InitAsDefaultInstance() {
}

AckDissolveActSucc::AckDissolveActSucc(const AckDissolveActSucc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDissolveActSucc::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDissolveActSucc::~AckDissolveActSucc() {
  SharedDtor();
}

void AckDissolveActSucc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDissolveActSucc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDissolveActSucc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDissolveActSucc_descriptor_;
}

const AckDissolveActSucc& AckDissolveActSucc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDissolveActSucc* AckDissolveActSucc::default_instance_ = NULL;

AckDissolveActSucc* AckDissolveActSucc::New() const {
  return new AckDissolveActSucc;
}

void AckDissolveActSucc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDissolveActSucc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional int32 action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDissolveActSucc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDissolveActSucc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDissolveActSucc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDissolveActSucc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDissolveActSucc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDissolveActSucc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDissolveActSucc::MergeFrom(const AckDissolveActSucc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDissolveActSucc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDissolveActSucc::CopyFrom(const AckDissolveActSucc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDissolveActSucc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDissolveActSucc::Swap(AckDissolveActSucc* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDissolveActSucc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDissolveActSucc_descriptor_;
  metadata.reflection = AckDissolveActSucc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDissolveResult::kResultFieldNumber;
#endif  // !_MSC_VER

AckDissolveResult::AckDissolveResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDissolveResult::InitAsDefaultInstance() {
}

AckDissolveResult::AckDissolveResult(const AckDissolveResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDissolveResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDissolveResult::~AckDissolveResult() {
  SharedDtor();
}

void AckDissolveResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDissolveResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDissolveResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDissolveResult_descriptor_;
}

const AckDissolveResult& AckDissolveResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDissolveResult* AckDissolveResult::default_instance_ = NULL;

AckDissolveResult* AckDissolveResult::New() const {
  return new AckDissolveResult;
}

void AckDissolveResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDissolveResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDissolveResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDissolveResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDissolveResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDissolveResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDissolveResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDissolveResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDissolveResult::MergeFrom(const AckDissolveResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDissolveResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDissolveResult::CopyFrom(const AckDissolveResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDissolveResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDissolveResult::Swap(AckDissolveResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDissolveResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDissolveResult_descriptor_;
  metadata.reflection = AckDissolveResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOffline::kUidFieldNumber;
const int AckOffline::kSeatidFieldNumber;
#endif  // !_MSC_VER

AckOffline::AckOffline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOffline::InitAsDefaultInstance() {
}

AckOffline::AckOffline(const AckOffline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOffline::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOffline::~AckOffline() {
  SharedDtor();
}

void AckOffline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOffline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOffline_descriptor_;
}

const AckOffline& AckOffline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckOffline* AckOffline::default_instance_ = NULL;

AckOffline* AckOffline::New() const {
  return new AckOffline;
}

void AckOffline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOffline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOffline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOffline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOffline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOffline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOffline::MergeFrom(const AckOffline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOffline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOffline::CopyFrom(const AckOffline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOffline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckOffline::Swap(AckOffline* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOffline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOffline_descriptor_;
  metadata.reflection = AckOffline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFinalEnd::kRoomidFieldNumber;
const int AckFinalEnd::kRoomUserIdFieldNumber;
const int AckFinalEnd::kTsFieldNumber;
const int AckFinalEnd::kPlayersFieldNumber;
#endif  // !_MSC_VER

AckFinalEnd::AckFinalEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFinalEnd::InitAsDefaultInstance() {
}

AckFinalEnd::AckFinalEnd(const AckFinalEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFinalEnd::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_user_id_ = 0;
  ts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFinalEnd::~AckFinalEnd() {
  SharedDtor();
}

void AckFinalEnd::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void AckFinalEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFinalEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFinalEnd_descriptor_;
}

const AckFinalEnd& AckFinalEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckFinalEnd* AckFinalEnd::default_instance_ = NULL;

AckFinalEnd* AckFinalEnd::New() const {
  return new AckFinalEnd;
}

void AckFinalEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    room_user_id_ = 0;
    ts_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFinalEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_user_id;
        break;
      }

      // optional int32 room_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_user_id_)));
          set_has_room_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // optional int32 ts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated .proto.game.tagPlayers players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFinalEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->roomid(), output);
  }

  // optional int32 room_user_id = 2;
  if (has_room_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_user_id(), output);
  }

  // optional int32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ts(), output);
  }

  // repeated .proto.game.tagPlayers players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFinalEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes roomid = 1;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->roomid(), target);
  }

  // optional int32 room_user_id = 2;
  if (has_room_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_user_id(), target);
  }

  // optional int32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ts(), target);
  }

  // repeated .proto.game.tagPlayers players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFinalEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

    // optional int32 room_user_id = 2;
    if (has_room_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_user_id());
    }

    // optional int32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }

  }
  // repeated .proto.game.tagPlayers players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFinalEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFinalEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFinalEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFinalEnd::MergeFrom(const AckFinalEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_room_user_id()) {
      set_room_user_id(from.room_user_id());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFinalEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFinalEnd::CopyFrom(const AckFinalEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFinalEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckFinalEnd::Swap(AckFinalEnd* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(room_user_id_, other->room_user_id_);
    std::swap(ts_, other->ts_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFinalEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFinalEnd_descriptor_;
  metadata.reflection = AckFinalEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckHandDetail::kPlayersFieldNumber;
#endif  // !_MSC_VER

AckHandDetail::AckHandDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHandDetail::InitAsDefaultInstance() {
}

AckHandDetail::AckHandDetail(const AckHandDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHandDetail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHandDetail::~AckHandDetail() {
  SharedDtor();
}

void AckHandDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckHandDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHandDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHandDetail_descriptor_;
}

const AckHandDetail& AckHandDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckHandDetail* AckHandDetail::default_instance_ = NULL;

AckHandDetail* AckHandDetail::New() const {
  return new AckHandDetail;
}

void AckHandDetail::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHandDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagPlayers players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckHandDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHandDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHandDetail::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.tagPlayers players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHandDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHandDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHandDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHandDetail::MergeFrom(const AckHandDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHandDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHandDetail::CopyFrom(const AckHandDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHandDetail::IsInitialized() const {

  return true;
}

void AckHandDetail::Swap(AckHandDetail* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHandDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHandDetail_descriptor_;
  metadata.reflection = AckHandDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLastEndInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

AckLastEndInfo::AckLastEndInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLastEndInfo::InitAsDefaultInstance() {
}

AckLastEndInfo::AckLastEndInfo(const AckLastEndInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLastEndInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLastEndInfo::~AckLastEndInfo() {
  SharedDtor();
}

void AckLastEndInfo::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void AckLastEndInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLastEndInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLastEndInfo_descriptor_;
}

const AckLastEndInfo& AckLastEndInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckLastEndInfo* AckLastEndInfo::default_instance_ = NULL;

AckLastEndInfo* AckLastEndInfo::New() const {
  return new AckLastEndInfo;
}

void AckLastEndInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLastEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLastEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLastEndInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes info = 1;
  if (has_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLastEndInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLastEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLastEndInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLastEndInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLastEndInfo::MergeFrom(const AckLastEndInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLastEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLastEndInfo::CopyFrom(const AckLastEndInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLastEndInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLastEndInfo::Swap(AckLastEndInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLastEndInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLastEndInfo_descriptor_;
  metadata.reflection = AckLastEndInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChouNotity::kTypeFieldNumber;
#endif  // !_MSC_VER

AckChouNotity::AckChouNotity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChouNotity::InitAsDefaultInstance() {
}

AckChouNotity::AckChouNotity(const AckChouNotity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChouNotity::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChouNotity::~AckChouNotity() {
  SharedDtor();
}

void AckChouNotity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChouNotity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChouNotity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChouNotity_descriptor_;
}

const AckChouNotity& AckChouNotity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckChouNotity* AckChouNotity::default_instance_ = NULL;

AckChouNotity* AckChouNotity::New() const {
  return new AckChouNotity;
}

void AckChouNotity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChouNotity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChouNotity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChouNotity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChouNotity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChouNotity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChouNotity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChouNotity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChouNotity::MergeFrom(const AckChouNotity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChouNotity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChouNotity::CopyFrom(const AckChouNotity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChouNotity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckChouNotity::Swap(AckChouNotity* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChouNotity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChouNotity_descriptor_;
  metadata.reflection = AckChouNotity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableInfoVideo::kBankerFieldNumber;
const int TableInfoVideo::kTakeInFieldNumber;
const int TableInfoVideo::kPlayIdFieldNumber;
const int TableInfoVideo::kBaseHuxiFieldNumber;
const int TableInfoVideo::kRoomUserIdFieldNumber;
const int TableInfoVideo::kPlayersFieldNumber;
const int TableInfoVideo::kGamePlayerFieldNumber;
const int TableInfoVideo::kGameNameFieldNumber;
const int TableInfoVideo::kIsWithMaohuFieldNumber;
const int TableInfoVideo::kIsZimoFanFieldNumber;
const int TableInfoVideo::kIsMustHuFieldNumber;
const int TableInfoVideo::kIsHhdFieldNumber;
const int TableInfoVideo::kHuxiToTunFieldNumber;
const int TableInfoVideo::kAllNumFieldNumber;
const int TableInfoVideo::kCurrentNumFieldNumber;
#endif  // !_MSC_VER

TableInfoVideo::TableInfoVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableInfoVideo::InitAsDefaultInstance() {
}

TableInfoVideo::TableInfoVideo(const TableInfoVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableInfoVideo::SharedCtor() {
  _cached_size_ = 0;
  banker_ = 0;
  take_in_ = 0;
  play_id_ = 0;
  base_huxi_ = 0;
  room_user_id_ = 0;
  game_player_ = 0;
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_with_maohu_ = false;
  is_zimo_fan_ = false;
  is_must_hu_ = 0;
  is_hhd_ = false;
  huxi_to_tun_ = 0;
  all_num_ = 0;
  current_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableInfoVideo::~TableInfoVideo() {
  SharedDtor();
}

void TableInfoVideo::SharedDtor() {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (this != default_instance_) {
  }
}

void TableInfoVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInfoVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableInfoVideo_descriptor_;
}

const TableInfoVideo& TableInfoVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

TableInfoVideo* TableInfoVideo::default_instance_ = NULL;

TableInfoVideo* TableInfoVideo::New() const {
  return new TableInfoVideo;
}

void TableInfoVideo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_ = 0;
    take_in_ = 0;
    play_id_ = 0;
    base_huxi_ = 0;
    room_user_id_ = 0;
    game_player_ = 0;
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::kEmptyString) {
        game_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_with_maohu_ = false;
    is_zimo_fan_ = false;
    is_must_hu_ = 0;
    is_hhd_ = false;
    huxi_to_tun_ = 0;
    all_num_ = 0;
    current_num_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableInfoVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_)));
          set_has_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_take_in;
        break;
      }

      // optional int32 take_in = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &take_in_)));
          set_has_take_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_play_id;
        break;
      }

      // optional int32 play_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_play_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_id_)));
          set_has_play_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_base_huxi;
        break;
      }

      // optional int32 base_huxi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_huxi_)));
          set_has_base_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_room_user_id;
        break;
      }

      // optional int32 room_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_user_id_)));
          set_has_room_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_players;
        break;
      }

      // repeated .proto.game.tagPlayers players = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_players;
        if (input->ExpectTag(56)) goto parse_game_player;
        break;
      }

      // optional int32 game_player = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_player_)));
          set_has_game_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_game_name;
        break;
      }

      // optional bytes game_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_with_maohu;
        break;
      }

      // optional bool is_with_maohu = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_with_maohu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_with_maohu_)));
          set_has_is_with_maohu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_zimo_fan;
        break;
      }

      // optional bool is_zimo_fan = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_zimo_fan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_zimo_fan_)));
          set_has_is_zimo_fan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_must_hu;
        break;
      }

      // optional int32 is_must_hu = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_must_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_must_hu_)));
          set_has_is_must_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_hhd;
        break;
      }

      // optional bool is_hhd = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hhd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hhd_)));
          set_has_is_hhd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_huxi_to_tun;
        break;
      }

      // optional int32 huxi_to_tun = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huxi_to_tun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huxi_to_tun_)));
          set_has_huxi_to_tun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_all_num;
        break;
      }

      // optional int32 all_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_num_)));
          set_has_all_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_current_num;
        break;
      }

      // optional int32 current_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_num_)));
          set_has_current_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableInfoVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 banker = 1;
  if (has_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker(), output);
  }

  // optional int32 take_in = 2;
  if (has_take_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->take_in(), output);
  }

  // optional int32 play_id = 3;
  if (has_play_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->play_id(), output);
  }

  // optional int32 base_huxi = 4;
  if (has_base_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_huxi(), output);
  }

  // optional int32 room_user_id = 5;
  if (has_room_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->room_user_id(), output);
  }

  // repeated .proto.game.tagPlayers players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  // optional int32 game_player = 7;
  if (has_game_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->game_player(), output);
  }

  // optional bytes game_name = 8;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->game_name(), output);
  }

  // optional bool is_with_maohu = 9;
  if (has_is_with_maohu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_with_maohu(), output);
  }

  // optional bool is_zimo_fan = 10;
  if (has_is_zimo_fan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_zimo_fan(), output);
  }

  // optional int32 is_must_hu = 11;
  if (has_is_must_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_must_hu(), output);
  }

  // optional bool is_hhd = 12;
  if (has_is_hhd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_hhd(), output);
  }

  // optional int32 huxi_to_tun = 13;
  if (has_huxi_to_tun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->huxi_to_tun(), output);
  }

  // optional int32 all_num = 14;
  if (has_all_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->all_num(), output);
  }

  // optional int32 current_num = 15;
  if (has_current_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->current_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableInfoVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 banker = 1;
  if (has_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker(), target);
  }

  // optional int32 take_in = 2;
  if (has_take_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->take_in(), target);
  }

  // optional int32 play_id = 3;
  if (has_play_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->play_id(), target);
  }

  // optional int32 base_huxi = 4;
  if (has_base_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_huxi(), target);
  }

  // optional int32 room_user_id = 5;
  if (has_room_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->room_user_id(), target);
  }

  // repeated .proto.game.tagPlayers players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->players(i), target);
  }

  // optional int32 game_player = 7;
  if (has_game_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->game_player(), target);
  }

  // optional bytes game_name = 8;
  if (has_game_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->game_name(), target);
  }

  // optional bool is_with_maohu = 9;
  if (has_is_with_maohu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_with_maohu(), target);
  }

  // optional bool is_zimo_fan = 10;
  if (has_is_zimo_fan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_zimo_fan(), target);
  }

  // optional int32 is_must_hu = 11;
  if (has_is_must_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_must_hu(), target);
  }

  // optional bool is_hhd = 12;
  if (has_is_hhd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_hhd(), target);
  }

  // optional int32 huxi_to_tun = 13;
  if (has_huxi_to_tun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->huxi_to_tun(), target);
  }

  // optional int32 all_num = 14;
  if (has_all_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->all_num(), target);
  }

  // optional int32 current_num = 15;
  if (has_current_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->current_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableInfoVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 banker = 1;
    if (has_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker());
    }

    // optional int32 take_in = 2;
    if (has_take_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->take_in());
    }

    // optional int32 play_id = 3;
    if (has_play_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_id());
    }

    // optional int32 base_huxi = 4;
    if (has_base_huxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_huxi());
    }

    // optional int32 room_user_id = 5;
    if (has_room_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_user_id());
    }

    // optional int32 game_player = 7;
    if (has_game_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_player());
    }

    // optional bytes game_name = 8;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_with_maohu = 9;
    if (has_is_with_maohu()) {
      total_size += 1 + 1;
    }

    // optional bool is_zimo_fan = 10;
    if (has_is_zimo_fan()) {
      total_size += 1 + 1;
    }

    // optional int32 is_must_hu = 11;
    if (has_is_must_hu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_must_hu());
    }

    // optional bool is_hhd = 12;
    if (has_is_hhd()) {
      total_size += 1 + 1;
    }

    // optional int32 huxi_to_tun = 13;
    if (has_huxi_to_tun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huxi_to_tun());
    }

    // optional int32 all_num = 14;
    if (has_all_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_num());
    }

    // optional int32 current_num = 15;
    if (has_current_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_num());
    }

  }
  // repeated .proto.game.tagPlayers players = 6;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInfoVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableInfoVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableInfoVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableInfoVideo::MergeFrom(const TableInfoVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker()) {
      set_banker(from.banker());
    }
    if (from.has_take_in()) {
      set_take_in(from.take_in());
    }
    if (from.has_play_id()) {
      set_play_id(from.play_id());
    }
    if (from.has_base_huxi()) {
      set_base_huxi(from.base_huxi());
    }
    if (from.has_room_user_id()) {
      set_room_user_id(from.room_user_id());
    }
    if (from.has_game_player()) {
      set_game_player(from.game_player());
    }
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_with_maohu()) {
      set_is_with_maohu(from.is_with_maohu());
    }
    if (from.has_is_zimo_fan()) {
      set_is_zimo_fan(from.is_zimo_fan());
    }
    if (from.has_is_must_hu()) {
      set_is_must_hu(from.is_must_hu());
    }
    if (from.has_is_hhd()) {
      set_is_hhd(from.is_hhd());
    }
    if (from.has_huxi_to_tun()) {
      set_huxi_to_tun(from.huxi_to_tun());
    }
    if (from.has_all_num()) {
      set_all_num(from.all_num());
    }
    if (from.has_current_num()) {
      set_current_num(from.current_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableInfoVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfoVideo::CopyFrom(const TableInfoVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfoVideo::IsInitialized() const {

  return true;
}

void TableInfoVideo::Swap(TableInfoVideo* other) {
  if (other != this) {
    std::swap(banker_, other->banker_);
    std::swap(take_in_, other->take_in_);
    std::swap(play_id_, other->play_id_);
    std::swap(base_huxi_, other->base_huxi_);
    std::swap(room_user_id_, other->room_user_id_);
    players_.Swap(&other->players_);
    std::swap(game_player_, other->game_player_);
    std::swap(game_name_, other->game_name_);
    std::swap(is_with_maohu_, other->is_with_maohu_);
    std::swap(is_zimo_fan_, other->is_zimo_fan_);
    std::swap(is_must_hu_, other->is_must_hu_);
    std::swap(is_hhd_, other->is_hhd_);
    std::swap(huxi_to_tun_, other->huxi_to_tun_);
    std::swap(all_num_, other->all_num_);
    std::swap(current_num_, other->current_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableInfoVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableInfoVideo_descriptor_;
  metadata.reflection = TableInfoVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStartVideo::kBankerFieldNumber;
const int GameStartVideo::kBankerCardFieldNumber;
const int GameStartVideo::kLeftCardCountFieldNumber;
const int GameStartVideo::kPlayersFieldNumber;
const int GameStartVideo::kCurrentNumFieldNumber;
#endif  // !_MSC_VER

GameStartVideo::GameStartVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStartVideo::InitAsDefaultInstance() {
}

GameStartVideo::GameStartVideo(const GameStartVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStartVideo::SharedCtor() {
  _cached_size_ = 0;
  banker_ = 0;
  banker_card_ = 0;
  left_card_count_ = 0;
  current_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartVideo::~GameStartVideo() {
  SharedDtor();
}

void GameStartVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStartVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStartVideo_descriptor_;
}

const GameStartVideo& GameStartVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

GameStartVideo* GameStartVideo::default_instance_ = NULL;

GameStartVideo* GameStartVideo::New() const {
  return new GameStartVideo;
}

void GameStartVideo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    banker_ = 0;
    banker_card_ = 0;
    left_card_count_ = 0;
    current_num_ = 0;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStartVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 banker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_)));
          set_has_banker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_banker_card;
        break;
      }

      // optional int32 banker_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_card_)));
          set_has_banker_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_card_count;
        break;
      }

      // optional int32 left_card_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_count_)));
          set_has_left_card_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        break;
      }

      // repeated .proto.game.tagPlayers players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_players;
        if (input->ExpectTag(40)) goto parse_current_num;
        break;
      }

      // optional int32 current_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_num_)));
          set_has_current_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStartVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 banker = 1;
  if (has_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker(), output);
  }

  // optional int32 banker_card = 2;
  if (has_banker_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->banker_card(), output);
  }

  // optional int32 left_card_count = 3;
  if (has_left_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_card_count(), output);
  }

  // repeated .proto.game.tagPlayers players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  // optional int32 current_num = 5;
  if (has_current_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->current_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStartVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 banker = 1;
  if (has_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker(), target);
  }

  // optional int32 banker_card = 2;
  if (has_banker_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->banker_card(), target);
  }

  // optional int32 left_card_count = 3;
  if (has_left_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_card_count(), target);
  }

  // repeated .proto.game.tagPlayers players = 4;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->players(i), target);
  }

  // optional int32 current_num = 5;
  if (has_current_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->current_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStartVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 banker = 1;
    if (has_banker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker());
    }

    // optional int32 banker_card = 2;
    if (has_banker_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_card());
    }

    // optional int32 left_card_count = 3;
    if (has_left_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card_count());
    }

    // optional int32 current_num = 5;
    if (has_current_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_num());
    }

  }
  // repeated .proto.game.tagPlayers players = 4;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStartVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStartVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStartVideo::MergeFrom(const GameStartVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker()) {
      set_banker(from.banker());
    }
    if (from.has_banker_card()) {
      set_banker_card(from.banker_card());
    }
    if (from.has_left_card_count()) {
      set_left_card_count(from.left_card_count());
    }
    if (from.has_current_num()) {
      set_current_num(from.current_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStartVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartVideo::CopyFrom(const GameStartVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameStartVideo::Swap(GameStartVideo* other) {
  if (other != this) {
    std::swap(banker_, other->banker_);
    std::swap(banker_card_, other->banker_card_);
    std::swap(left_card_count_, other->left_card_count_);
    players_.Swap(&other->players_);
    std::swap(current_num_, other->current_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStartVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStartVideo_descriptor_;
  metadata.reflection = GameStartVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateVideo::kAckCodeFieldNumber;
const int OperateVideo::kSeatidFieldNumber;
const int OperateVideo::kActionCardFieldNumber;
const int OperateVideo::kHandCardsFieldNumber;
const int OperateVideo::kTotalHuxiFieldNumber;
const int OperateVideo::kListenCardsFieldNumber;
const int OperateVideo::kWeavesFieldNumber;
#endif  // !_MSC_VER

OperateVideo::OperateVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateVideo::InitAsDefaultInstance() {
}

OperateVideo::OperateVideo(const OperateVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateVideo::SharedCtor() {
  _cached_size_ = 0;
  ack_code_ = 0;
  seatid_ = 0;
  action_card_ = 0;
  total_huxi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateVideo::~OperateVideo() {
  SharedDtor();
}

void OperateVideo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateVideo_descriptor_;
}

const OperateVideo& OperateVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

OperateVideo* OperateVideo::default_instance_ = NULL;

OperateVideo* OperateVideo::New() const {
  return new OperateVideo;
}

void OperateVideo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ack_code_ = 0;
    seatid_ = 0;
    action_card_ = 0;
    total_huxi_ = 0;
  }
  hand_cards_.Clear();
  listen_cards_.Clear();
  weaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ack_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_code_)));
          set_has_ack_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_card;
        break;
      }

      // optional int32 action_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_card_)));
          set_has_action_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hand_cards;
        break;
      }

      // repeated .proto.game.tagHandCards hand_cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hand_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hand_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hand_cards;
        if (input->ExpectTag(40)) goto parse_total_huxi;
        break;
      }

      // optional int32 total_huxi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_huxi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_huxi_)));
          set_has_total_huxi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_listen_cards;
        break;
      }

      // repeated int32 listen_cards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_listen_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listen_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_listen_cards;
        if (input->ExpectTag(58)) goto parse_weaves;
        break;
      }

      // repeated .proto.game.tagWeaveCards weaves = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_weaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ack_code = 1;
  if (has_ack_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ack_code(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 action_card = 3;
  if (has_action_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_card(), output);
  }

  // repeated .proto.game.tagHandCards hand_cards = 4;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hand_cards(i), output);
  }

  // optional int32 total_huxi = 5;
  if (has_total_huxi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_huxi(), output);
  }

  // repeated int32 listen_cards = 6;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->listen_cards(i), output);
  }

  // repeated .proto.game.tagWeaveCards weaves = 7;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->weaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ack_code = 1;
  if (has_ack_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ack_code(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 action_card = 3;
  if (has_action_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_card(), target);
  }

  // repeated .proto.game.tagHandCards hand_cards = 4;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hand_cards(i), target);
  }

  // optional int32 total_huxi = 5;
  if (has_total_huxi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_huxi(), target);
  }

  // repeated int32 listen_cards = 6;
  for (int i = 0; i < this->listen_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->listen_cards(i), target);
  }

  // repeated .proto.game.tagWeaveCards weaves = 7;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->weaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ack_code = 1;
    if (has_ack_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ack_code());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 action_card = 3;
    if (has_action_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_card());
    }

    // optional int32 total_huxi = 5;
    if (has_total_huxi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_huxi());
    }

  }
  // repeated .proto.game.tagHandCards hand_cards = 4;
  total_size += 1 * this->hand_cards_size();
  for (int i = 0; i < this->hand_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hand_cards(i));
  }

  // repeated int32 listen_cards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->listen_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listen_cards(i));
    }
    total_size += 1 * this->listen_cards_size() + data_size;
  }

  // repeated .proto.game.tagWeaveCards weaves = 7;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateVideo::MergeFrom(const OperateVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  listen_cards_.MergeFrom(from.listen_cards_);
  weaves_.MergeFrom(from.weaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ack_code()) {
      set_ack_code(from.ack_code());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_action_card()) {
      set_action_card(from.action_card());
    }
    if (from.has_total_huxi()) {
      set_total_huxi(from.total_huxi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateVideo::CopyFrom(const OperateVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OperateVideo::Swap(OperateVideo* other) {
  if (other != this) {
    std::swap(ack_code_, other->ack_code_);
    std::swap(seatid_, other->seatid_);
    std::swap(action_card_, other->action_card_);
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(total_huxi_, other->total_huxi_);
    listen_cards_.Swap(&other->listen_cards_);
    weaves_.Swap(&other->weaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateVideo_descriptor_;
  metadata.reflection = OperateVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateNotify::kPlayersFieldNumber;
#endif  // !_MSC_VER

OperateNotify::OperateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateNotify::InitAsDefaultInstance() {
}

OperateNotify::OperateNotify(const OperateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateNotify::~OperateNotify() {
  SharedDtor();
}

void OperateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateNotify_descriptor_;
}

const OperateNotify& OperateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

OperateNotify* OperateNotify::default_instance_ = NULL;

OperateNotify* OperateNotify::New() const {
  return new OperateNotify;
}

void OperateNotify::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagPlayers players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateNotify::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.tagPlayers players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateNotify::MergeFrom(const OperateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateNotify::CopyFrom(const OperateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateNotify::IsInitialized() const {

  return true;
}

void OperateNotify::Swap(OperateNotify* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateNotify_descriptor_;
  metadata.reflection = OperateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGains::kPlayersFieldNumber;
#endif  // !_MSC_VER

AckGains::AckGains()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGains::InitAsDefaultInstance() {
}

AckGains::AckGains(const AckGains& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGains::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGains::~AckGains() {
  SharedDtor();
}

void AckGains::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGains::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGains::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGains_descriptor_;
}

const AckGains& AckGains::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGains* AckGains::default_instance_ = NULL;

AckGains* AckGains::New() const {
  return new AckGains;
}

void AckGains::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGains::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagPlayers players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGains::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.game.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGains::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.game.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGains::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.tagPlayers players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGains::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGains* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGains*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGains::MergeFrom(const AckGains& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGains::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGains::CopyFrom(const AckGains& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGains::IsInitialized() const {

  return true;
}

void AckGains::Swap(AckGains* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGains::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGains_descriptor_;
  metadata.reflection = AckGains_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChat::kSeatidFieldNumber;
const int AckChat::kTextFieldNumber;
#endif  // !_MSC_VER

AckChat::AckChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChat::InitAsDefaultInstance() {
}

AckChat::AckChat(const AckChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChat::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChat::~AckChat() {
  SharedDtor();
}

void AckChat::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void AckChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChat_descriptor_;
}

const AckChat& AckChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckChat* AckChat::default_instance_ = NULL;

AckChat* AckChat::New() const {
  return new AckChat;
}

void AckChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional bytes text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional bytes text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional bytes text = 2;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional bytes text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChat::MergeFrom(const AckChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChat::CopyFrom(const AckChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckChat::Swap(AckChat* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChat_descriptor_;
  metadata.reflection = AckChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFace::kSeatidFieldNumber;
const int AckFace::kFaceidFieldNumber;
#endif  // !_MSC_VER

AckFace::AckFace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFace::InitAsDefaultInstance() {
}

AckFace::AckFace(const AckFace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFace::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  faceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFace::~AckFace() {
  SharedDtor();
}

void AckFace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFace_descriptor_;
}

const AckFace& AckFace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckFace* AckFace::default_instance_ = NULL;

AckFace* AckFace::New() const {
  return new AckFace;
}

void AckFace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatid_ = 0;
    faceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faceid;
        break;
      }

      // optional int32 faceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 faceid = 2;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->faceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 faceid = 2;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->faceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 faceid = 2;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFace::MergeFrom(const AckFace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFace::CopyFrom(const AckFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckFace::Swap(AckFace* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(faceid_, other->faceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFace_descriptor_;
  metadata.reflection = AckFace_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
